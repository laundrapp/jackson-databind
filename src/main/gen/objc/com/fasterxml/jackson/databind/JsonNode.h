//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonNode")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsonNode
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonNode 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonNode 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsonNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsonNode_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonNode || defined(INCLUDE_ComFasterxmlJacksonDatabindJsonNode))
#define ComFasterxmlJacksonDatabindJsonNode_

#define RESTRICT_ComFasterxmlJacksonDatabindJsonSerializable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable_Base 1
#include "com/fasterxml/jackson/databind/JsonSerializable.h"

#define RESTRICT_ComFasterxmlJacksonCoreTreeNode 1
#define INCLUDE_ComFasterxmlJacksonCoreTreeNode 1
#include "com/fasterxml/jackson/core/TreeNode.h"

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class ComFasterxmlJacksonCoreJsonPointer;
@class ComFasterxmlJacksonDatabindNodeJsonNodeType;
@class IOSByteArray;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilSpliterator;

/*!
 @brief Base class for all JSON nodes, which form the basis of JSON
  Tree Model that Jackson implements.
 One way to think of these nodes is to consider them
  similar to DOM nodes in XML DOM trees.
 <p>
  As a general design rule, most accessors ("getters") are included
  in this base class, to allow for traversing structure without
  type casts. Most mutators, however, need to be accessed through
  specific sub-classes (such as <code>ObjectNode</code>
  and <code>ArrayNode</code>).
  This seems sensible because proper type
  information is generally available when building or modifying
  trees, but less often when reading a tree (newly built from
  parsed JSON content).
 <p>
  Actual concrete sub-classes can be found from package 
 <code>com.fasterxml.jackson.databind.node</code>.
 <p>
  Note that it is possible to "read" from nodes, using
  method <code>TreeNode.traverse(ObjectCodec)</code>, which will result in
  a <code>JsonParser</code> being constructed. This can be used for (relatively)
  efficient conversations between different representations; and it is what
  core databind uses for methods like <code>Class)</code>
  and <code>ObjectMapper.treeAsTokens(TreeNode)</code>
 */
@interface ComFasterxmlJacksonDatabindJsonNode : ComFasterxmlJacksonDatabindJsonSerializable_Base < ComFasterxmlJacksonCoreTreeNode, JavaLangIterable >

#pragma mark Public

/*!
 @brief Method that will try to convert value of this node to a Java <b>boolean</b>.
 JSON booleans map naturally; integer numbers other than 0 map to true, and
  0 maps to false
  and Strings 'true' and 'false' map to corresponding values.
 <p>
  If representation cannot be converted to a boolean value (including structured types
  like Objects and Arrays),
  default value of <b>false</b> will be returned; no exceptions are thrown.
 */
- (jboolean)asBoolean;

/*!
 @brief Method that will try to convert value of this node to a Java <b>boolean</b>.
 JSON booleans map naturally; integer numbers other than 0 map to true, and
  0 maps to false
  and Strings 'true' and 'false' map to corresponding values.
 <p>
  If representation cannot be converted to a boolean value (including structured types
  like Objects and Arrays),
  specified <b>defaultValue</b> will be returned; no exceptions are thrown.
 */
- (jboolean)asBooleanWithBoolean:(jboolean)defaultValue;

/*!
 @brief Method that will try to convert value of this node to a Java <b>double</b>.
 Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
  and 1.0 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an int (including structured types
  like Objects and Arrays),
  default value of <b>0.0</b> will be returned; no exceptions are thrown.
 */
- (jdouble)asDouble;

/*!
 @brief Method that will try to convert value of this node to a Java <b>double</b>.
 Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
  and 1.0 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an int (including structured types
  like Objects and Arrays),
  specified <b>defaultValue</b> will be returned; no exceptions are thrown.
 */
- (jdouble)asDoubleWithDouble:(jdouble)defaultValue;

/*!
 @brief Method that will try to convert value of this node to a Java <b>int</b>.
 Numbers are coerced using default Java rules; booleans convert to 0 (false)
  and 1 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an int (including structured types
  like Objects and Arrays),
  default value of <b>0</b> will be returned; no exceptions are thrown.
 */
- (jint)asInt;

/*!
 @brief Method that will try to convert value of this node to a Java <b>int</b>.
 Numbers are coerced using default Java rules; booleans convert to 0 (false)
  and 1 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an int (including structured types
  like Objects and Arrays),
  specified <b>defaultValue</b> will be returned; no exceptions are thrown.
 */
- (jint)asIntWithInt:(jint)defaultValue;

/*!
 @brief Method that will try to convert value of this node to a Java <b>long</b>.
 Numbers are coerced using default Java rules; booleans convert to 0 (false)
  and 1 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an long (including structured types
  like Objects and Arrays),
  default value of <b>0</b> will be returned; no exceptions are thrown.
 */
- (jlong)asLong;

/*!
 @brief Method that will try to convert value of this node to a Java <b>long</b>.
 Numbers are coerced using default Java rules; booleans convert to 0 (false)
  and 1 (true), and Strings are parsed using default Java language integer
  parsing rules.
 <p>
  If representation cannot be converted to an long (including structured types
  like Objects and Arrays),
  specified <b>defaultValue</b> will be returned; no exceptions are thrown.
 */
- (jlong)asLongWithLong:(jlong)defaultValue;

/*!
 @brief Method that will return a valid String representation of
  the container value, if the node is a value node
  (method <code>isValueNode</code> returns true),
  otherwise empty String.
 */
- (NSString *)asText;

/*!
 @brief Method similar to <code>asText()</code>, except that it will return 
 <code>defaultValue</code> in cases where null value would be returned;
  either for missing nodes (trying to access missing property, or element
  at invalid item for array) or explicit nulls.
 @since 2.4
 */
- (NSString *)asTextWithNSString:(NSString *)defaultValue;

/*!
 @brief Method for locating node specified by given JSON pointer instances.
 Method will never return null; if no matching node exists, 
    will return a node for which <code>isMissingNode()</code> returns true.
 @return Node that matches given JSON Pointer: if no match exists,
    will return a node for which <code>isMissingNode()</code> returns true.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindJsonNode *)atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)ptr;

/*!
 @brief Convenience method that is functionally equivalent to:
 @code

    return at(JsonPointer.valueOf(jsonPointerExpression));
 
@endcode
 <p>
  Note that if the same expression is used often, it is preferable to construct 
 <code>JsonPointer</code> instance once and reuse it: this method will not perform
  any caching of compiled expressions.
 @param jsonPtrExpr Expression to compile as a <code>JsonPointer</code>    instance
 @return Node that matches given JSON Pointer: if no match exists,
    will return a node for which <code>TreeNode.isMissingNode()</code> returns true.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindJsonNode *)atWithNSString:(NSString *)jsonPtrExpr;

/*!
 @brief Returns integer value for this node (as <code>BigDecimal</code>), <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns <code>BigInteger.ZERO</code>.
 @return <code>BigInteger</code> value this node contains, if numeric node; <code>BigInteger.ZERO</code> for non-number nodes.
 */
- (JavaMathBigInteger *)bigIntegerValue;

/*!
 @brief Method to use for accessing binary content of binary nodes (nodes
  for which <code>isBinary</code> returns true); or for Text Nodes
  (ones for which <code>textValue</code> returns non-null value),
  to read decoded base64 data.
 For other types of nodes, returns null.
 @return Binary data this node contains, iff it is a binary
    node; null otherwise
 */
- (IOSByteArray *)binaryValue;

/*!
 @brief Method to use for accessing JSON boolean values (value
  literals 'true' and 'false').
 For other types, always returns false.
 @return Textual value this node contains, iff it is a textual
    json node (comes from JSON String value entry)
 */
- (jboolean)booleanValue;

/*!
 @brief Method that can be used to check whether this node is a numeric
  node (<code>isNumber</code> would return true) AND its value fits
  within Java's 32-bit signed integer type, <code>int</code>.
 Note that floating-point numbers are convertible if the integral
  part fits without overflow (as per standard Java coercion rules)
 <p>
  NOTE: this method does not consider possible value type conversion
  from JSON String into Number; so even if this method returns false,
  it is possible that <code>asInt</code> could still succeed
  if node is a JSON String representing integral number, or boolean.
 @since 2.0
 */
- (jboolean)canConvertToInt;

/*!
 @brief Method that can be used to check whether this node is a numeric
  node (<code>isNumber</code> would return true) AND its value fits
  within Java's 64-bit signed integer type, <code>long</code>.
 Note that floating-point numbers are convertible if the integral
  part fits without overflow (as per standard Java coercion rules)
 <p>
  NOTE: this method does not consider possible value type conversion
  from JSON String into Number; so even if this method returns false,
  it is possible that <code>asLong</code> could still succeed
  if node is a JSON String representing integral number, or boolean.
 @since 2.0
 */
- (jboolean)canConvertToLong;

/*!
 @brief Returns floating point value for this node (as <code>BigDecimal</code>), <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns <code>BigDecimal.ZERO</code>.
 @return <code>BigDecimal</code> value this node contains, if numeric node; <code>BigDecimal.ZERO</code> for non-number nodes.
 */
- (JavaMathBigDecimal *)decimalValue;

/*!
 @brief Method that can be called to get a node that is guaranteed
  not to allow changing of this node through mutators on
  this node or any of its children.
 This means it can either make a copy of this node (and all
  mutable children and grand children nodes), or node itself
  if it is immutable.
 <p>
  Note: return type is guaranteed to have same type as the
  node method is called on; which is why method is declared
  with local generic type.
 @since 2.0
 @return Node that is either a copy of this node (and all non-leaf
     children); or, for immutable leaf nodes, node itself.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)deepCopy;

/*!
 @brief Returns 64-bit floating point (double) value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns 0.0.
 For integer values, conversion is done using coercion; this may result
  in overflows with <code>BigInteger</code> values.
 @return 64-bit double value this node contains, if any; 0.0 for non-number nodes.
 @since 2.2
 */
- (jdouble)doubleValue;

/*!
 @brief Method for accessing all value nodes of this Node, iff
  this node is a JSON Array or Object node.In case of Object node,
  field names (keys) are not included, only values.
 For other types of nodes, returns empty iterator.
 */
- (id<JavaUtilIterator>)elements;

/*!
 @brief Entry method for invoking customizable comparison, using passed-in 
 <code>Comparator</code> object.Nodes will handle traversal of structured
  types (arrays, objects), but defer to comparator for scalar value
  comparisons.
 If a "natural" <code>Comparator</code> is passed -- one that
  simply calls <code>equals()</code> on one of arguments, passing the other
  -- implementation is the same as directly calling <code>equals()</code>
  on node.
 <p>
  Default implementation simply delegates to passed in <code>comparator</code>,
  with <code>this</code> as the first argument, and <code>other</code> as
  the second argument.
 @param comparator Object called to compare two scalar <code>JsonNode</code>  
     instances, and return either 0 (are equals) or non-zero (not equal)
 @since 2.6
 */
- (jboolean)equalsWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
 withComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)other;

/*!
 @brief Equality for node objects is defined as full (deep) value
  equality.This means that it is possible to compare complete
  JSON trees for equality by comparing equality of root nodes.
 <p>
  Note: marked as abstract to ensure all implementation
  classes define it properly and not rely on definition
  from <code>java.lang.Object</code>.
 */
- (jboolean)isEqual:(id)o;

- (id<JavaUtilIterator>)fieldNames;

/*!
 @return Iterator that can be used to traverse all key/value pairs for
    object nodes; empty iterator (no contents) for other types
 */
- (id<JavaUtilIterator>)fields;

/*!
 @brief Method for finding a JSON Object that contains specified field,
  within this node or its descendants.
 If no matching field is found in this node or its descendants, returns null.
 @param fieldName Name of field to look for
 @return Value of first matching node found, if any; null if none
 */
- (ComFasterxmlJacksonDatabindJsonNode *)findParentWithNSString:(NSString *)fieldName;

/*!
 @brief Method for finding a JSON Object that contains specified field,
  within this node or its descendants.
 If no matching field is found in this node or its descendants, returns null.
 @param fieldName Name of field to look for
 @return Value of first matching node found, if any; null if none
 */
- (id<JavaUtilList>)findParentsWithNSString:(NSString *)fieldName;

- (id<JavaUtilList>)findParentsWithNSString:(NSString *)fieldName
                           withJavaUtilList:(id<JavaUtilList>)foundSoFar;

/*!
 @brief Method similar to <code>findValue</code>, but that will return a
  "missing node" instead of null if no field is found.Missing node
  is a specific kind of node for which <code>isMissingNode</code>
  returns true; and all value access methods return empty or
  missing value.
 @param fieldName Name of field to look for
 @return Value of first matching node found; or if not found, a
     "missing node" (non-null instance that has no value)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)findPathWithNSString:(NSString *)fieldName;

/*!
 @brief Method for finding a JSON Object field with specified name in this
  node or its child nodes, and returning value it has.
 If no matching field is found in this node or its descendants, returns null.
 @param fieldName Name of field to look for
 @return Value of first matching node found, if any; null if none
 */
- (ComFasterxmlJacksonDatabindJsonNode *)findValueWithNSString:(NSString *)fieldName;

/*!
 @brief Method for finding JSON Object fields with specified name, and returning
  found ones as a List.Note that sub-tree search ends if a field is found,
  so possible children of result nodes are <b>not</b> included.
 If no matching fields are found in this node or its descendants, returns
  an empty List.
 @param fieldName Name of field to look for
 */
- (id<JavaUtilList>)findValuesWithNSString:(NSString *)fieldName;

- (id<JavaUtilList>)findValuesWithNSString:(NSString *)fieldName
                          withJavaUtilList:(id<JavaUtilList>)foundSoFar;

/*!
 @brief Similar to <code>findValues</code>, but will additionally convert
  values into Strings, calling <code>asText</code>.
 */
- (id<JavaUtilList>)findValuesAsTextWithNSString:(NSString *)fieldName;

- (id<JavaUtilList>)findValuesAsTextWithNSString:(NSString *)fieldName
                                withJavaUtilList:(id<JavaUtilList>)foundSoFar;

/*!
 @brief Returns 32-bit floating value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns 0.0.
 For integer values, conversion is done using coercion; this means
  that an overflow is possible for `long` values
 @return 32-bit float value this node contains, if any; 0.0 for non-number nodes.
 @since 2.2
 */
- (jfloat)floatValue;

/*!
 @brief Method for accessing value of the specified element of
  an array node.For other nodes, null is always returned.
 <p>
  For array nodes, index specifies
  exact location within array and allows for efficient iteration
  over child elements (underlying storage is guaranteed to
  be efficiently indexable, i.e. has random-access to elements).
  If index is less than 0, or equal-or-greater than 
 <code>node.size()</code>, null is returned; no exception is
  thrown for any index.
 <p>
  NOTE: if the element value has been explicitly set as <code>null</code>
  (which is different from removal!),
  a <code>com.fasterxml.jackson.databind.node.NullNode</code> will be returned,
  not null.
 @return Node that represent value of the specified element,
    if this node is an array and has specified element.
    Null otherwise.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)getWithInt:(jint)index;

/*!
 @brief Method for accessing value of the specified field of
  an object node.If this node is not an object (or it
  does not have a value for specified field name), or
  if there is no field with such name, null is returned.
 <p>
  NOTE: if the property value has been explicitly set as <code>null</code>
  (which is different from removal!),
  a <code>com.fasterxml.jackson.databind.node.NullNode</code> will be returned,
  not null.
 @return Node that represent value of the specified field,
    if this node is an object and has value for the specified
    field. Null otherwise.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)getWithNSString:(NSString *)fieldName;

/*!
 @brief Return the type of this node
 @return the node type as a <code>JsonNodeType</code> enum value
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindNodeJsonNodeType *)getNodeType;

/*!
 @brief Method that allows checking whether this node is JSON Array node
  and contains a value for specified index
  If this is the case
  (including case of specified indexing having null as value), returns true;
  otherwise returns false.
 <p>
  Note: array element indexes are 0-based.
 <p>
  This method is equivalent to:
 @code

    node.get(index) != null
 
@endcode
 <p>
  NOTE: this method will return <code>true</code> for explicitly added
  null values.
 @param index Index to check
 @return True if this node is a JSON Object node, and has a property
    entry with specified name (with any value, including null value)
 */
- (jboolean)hasWithInt:(jint)index;

/*!
 @brief Method that allows checking whether this node is JSON Object node
  and contains value for specified property.If this is the case
  (including properties with explicit null values), returns true;
  otherwise returns false.
 <p>
  This method is equivalent to:
 @code

    node.get(fieldName) != null
 
@endcode
  (since return value of get() is node, not value node contains)
 <p>
  NOTE: when explicit <code>null</code> values are added, this
  method will return <code>true</code> for such properties.
 @param fieldName Name of element to check
 @return True if this node is a JSON Object node, and has a property
    entry with specified name (with any value, including null value)
 */
- (jboolean)hasWithNSString:(NSString *)fieldName;

/*!
 @brief Method that is similar to <code>has(int)</code>, but that will
  return <code>false</code> for explicitly added nulls.
 <p>
  This method is equivalent to:
 @code

    node.get(index) != null &lt;&lt; !node.get(index).isNull()
 
@endcode
 @since 2.1
 */
- (jboolean)hasNonNullWithInt:(jint)index;

/*!
 @brief Method that is similar to <code>has(String)</code>, but that will
  return <code>false</code> for explicitly added nulls.
 <p>
  This method is functionally equivalent to:
 @code

    node.get(fieldName) != null &lt;&lt; !node.get(fieldName).isNull()
 
@endcode
 @since 2.1
 */
- (jboolean)hasNonNullWithNSString:(NSString *)fieldName;

/*!
 @brief Returns integer value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns 0.
 For floating-point numbers, value is truncated using default
  Java coercion, similar to how cast from double to int operates.
 @return Integer value this node contains, if any; 0 for non-number
    nodes.
 */
- (jint)intValue;

- (jboolean)isArray;

- (jboolean)isBigDecimal;

- (jboolean)isBigInteger;

/*!
 @brief Method that can be used to check if this node represents
  binary data (Base64 encoded).Although this will be externally
  written as JSON String value, <code>isTextual</code> will
  return false if this method returns true.
 @return True if this node represents base64 encoded binary data
 */
- (jboolean)isBinary;

/*!
 @brief Method that can be used to check if this node was created from
  JSON boolean value (literals "true" and "false").
 */
- (jboolean)isBoolean;

- (jboolean)isContainerNode;

- (jboolean)isDouble;

/*!
 @since 2.2
 */
- (jboolean)isFloat;

/*!
 @return True if this node represents a non-integral
    numeric JSON value
 */
- (jboolean)isFloatingPointNumber;

/*!
 @brief Method that can be used to check whether contained value
  is a number represented as Java <code>int</code>.
 Note, however, that even if this method returns false, it
  is possible that conversion would be possible from other numeric
  types -- to check if this is possible, use 
 <code>canConvertToInt()</code> instead.
 @return True if the value contained by this node is stored as Java int
 */
- (jboolean)isInt;

/*!
 @return True if this node represents an integral (integer)
    numeric JSON value
 */
- (jboolean)isIntegralNumber;

/*!
 @brief Method that can be used to check whether contained value
  is a number represented as Java <code>long</code>.
 Note, however, that even if this method returns false, it
  is possible that conversion would be possible from other numeric
  types -- to check if this is possible, use 
 <code>canConvertToInt()</code> instead.
 @return True if the value contained by this node is stored as Java <code>long</code>
 */
- (jboolean)isLong;

- (jboolean)isMissingNode;

/*!
 @brief Method that can be used to check if this node was created from
  JSON literal null value.
 */
- (jboolean)isNull;

/*!
 @return True if this node represents a numeric JSON value
 */
- (jboolean)isNumber;

- (jboolean)isObject;

/*!
 @brief Method that can be used to check if the node is a wrapper
  for a POJO ("Plain Old Java Object" aka "bean".
 Returns true only for
  instances of <code>POJONode</code>.
 @return True if this node wraps a POJO
 */
- (jboolean)isPojo;

/*!
 @brief Method that can be used to check whether contained value
  is a number represented as Java <code>short</code>.
 Note, however, that even if this method returns false, it
  is possible that conversion would be possible from other numeric
  types -- to check if this is possible, use 
 <code>canConvertToInt()</code> instead.
 @return True if the value contained by this node is stored as Java short
 */
- (jboolean)isShort;

/*!
 @brief Method that checks whether this node represents basic JSON String
  value.
 */
- (jboolean)isTextual;

- (jboolean)isValueNode;

/*!
 @brief Same as calling <code>elements</code>; implemented so that
  convenience "for-each" loop can be used for looping over elements
  of JSON Array constructs.
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Returns 64-bit long value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns 0.
 For floating-point numbers, value is truncated using default
  Java coercion, similar to how cast from double to long operates.
 @return Long value this node contains, if any; 0 for non-number
    nodes.
 */
- (jlong)longValue;

/*!
 @brief Returns numeric value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true); otherwise
  returns null
 @return Number value this node contains, if any (null for non-number
    nodes).
 */
- (NSNumber *)numberValue;

/*!
 @brief This method is similar to <code>get(int)</code>, except
  that instead of returning null if no such element exists (due
  to index being out of range, or this node not being an array),
  a "missing node" (node that returns true for 
 <code>isMissingNode</code>) will be returned.This allows for
  convenient and safe chained access via path calls.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)pathWithInt:(jint)index;

/*!
 @brief This method is similar to <code>get(String)</code>, except
  that instead of returning null if no such value exists (due
  to this node not being an object, or object not having value
  for the specified field),
  a "missing node" (node that returns true for 
 <code>isMissingNode</code>) will be returned.This allows for
  convenient and safe chained access via path calls.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)pathWithNSString:(NSString *)fieldName;

/*!
 @brief Returns 16-bit short value for this node, <b>if and only if</b>
  this node is numeric (<code>isNumber</code> returns true).For other
  types returns 0.
 For floating-point numbers, value is truncated using default
  Java coercion, similar to how cast from double to short operates.
 @return Short value this node contains, if any; 0 for non-number
    nodes.
 */
- (jshort)shortValue;

- (jint)size;

/*!
 @brief Method to use for accessing String values.
 Does <b>NOT</b> do any conversions for non-String value nodes;
  for non-String values (ones for which <code>isTextual</code> returns
  false) null will be returned.
  For String values, null is never returned (but empty Strings may be)
 @return Textual value this node contains, iff it is a textual
    JSON node (comes from JSON String value entry)
 */
- (NSString *)textValue;

/*!
 @brief Method that will produce developer-readable representation of the
  node; which may <b>or may not</b> be as valid JSON.
 If you want valid JSON output (or output formatted using one of
  other Jackson supported data formats) make sure to use 
 <code>ObjectMapper</code> or <code>ObjectWriter</code> to serialize an
  instance, for example:
 @code

    String json = objectMapper.writeValueAsString(rootNode);
 
@endcode
 <p>
  Note: method defined as abstract to ensure all implementation
  classes explicitly implement method, instead of relying
  on <code>Object.toString()</code> definition.
 */
- (NSString *)description;

/*!
 @brief Method that can be called on Object nodes, to access a property
  that has Object value; or if no such property exists, to create,
  add and return such Object node.
 If the node method is called on is not Object node,
  or if property exists and has value that is not Object node, 
 <code>UnsupportedOperationException</code> is thrown
 */
- (ComFasterxmlJacksonDatabindJsonNode *)withWithNSString:(NSString *)propertyName;

/*!
 @brief Method that can be called on Object nodes, to access a property
  that has <code>Array</code> value; or if no such property exists, to create,
  add and return such Array node.
 If the node method is called on is not Object node,
  or if property exists and has value that is not Array node, 
 <code>UnsupportedOperationException</code> is thrown
 */
- (ComFasterxmlJacksonDatabindJsonNode *)withArrayWithNSString:(NSString *)propertyName;

#pragma mark Protected

- (instancetype __nonnull)init;

- (ComFasterxmlJacksonDatabindJsonNode *)_atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)ptr;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsonNode)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsonNode_init(ComFasterxmlJacksonDatabindJsonNode *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsonNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonNode")
