//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleModule")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleModule
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleModule 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleModule 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleModule

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindModuleSimpleModule_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleModule || defined(INCLUDE_ComFasterxmlJacksonDatabindModuleSimpleModule))
#define ComFasterxmlJacksonDatabindModuleSimpleModule_

#define RESTRICT_ComFasterxmlJacksonDatabindModule 1
#define INCLUDE_ComFasterxmlJacksonDatabindModule 1
#include "com/fasterxml/jackson/databind/Module.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier;
@class ComFasterxmlJacksonDatabindDeserValueInstantiator;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver;
@class ComFasterxmlJacksonDatabindModuleSimpleDeserializers;
@class ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers;
@class ComFasterxmlJacksonDatabindModuleSimpleSerializers;
@class ComFasterxmlJacksonDatabindModuleSimpleValueInstantiators;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindSerBeanSerializerModifier;
@class IOSClass;
@class IOSObjectArray;
@class JavaUtilHashMap;
@class JavaUtilLinkedHashSet;
@protocol ComFasterxmlJacksonDatabindModule_SetupContext;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Vanilla <code>Module</code> implementation that allows registration
  of serializers and deserializers, bean serializer
  and deserializer modifiers, registration of subtypes and mix-ins
  as well as some other commonly
  needed aspects (addition of custom <code>AbstractTypeResolver</code>s,
  <code>com.fasterxml.jackson.databind.deser.ValueInstantiator</code>s).
 <p>
  NOTE: although it is not expected that sub-types should need to
  override <code>setupModule(SetupContext)</code> method, if they choose
  to do so they MUST call <code>super.setupModule(context);</code>
  to ensure that registration works as expected.
 <p>
  WARNING: when registering <code>JsonSerializer</code>s and <code>JsonDeserializer</code>s,
  only type erased <code>Class</code> is compared: this means that usually you should
  NOT use this implementation for registering structured types such as 
 <code>java.util.Collection</code>s or <code>java.util.Map</code>s: this because parametric
  type information will not be considered and you may end up having "wrong" handler
  for your type.
  What you need to do, instead, is to implement <code>com.fasterxml.jackson.databind.deser.Deserializers</code> 
  and/or <code>com.fasterxml.jackson.databind.ser.Serializers</code> callbacks to match full type
  signatures (with <code>JavaType</code>).
 */
@interface ComFasterxmlJacksonDatabindModuleSimpleModule : ComFasterxmlJacksonDatabindModule < JavaIoSerializable > {
 @public
  NSString *_name_;
  ComFasterxmlJacksonCoreVersion *_version_;
  ComFasterxmlJacksonDatabindModuleSimpleSerializers *_serializers_;
  ComFasterxmlJacksonDatabindModuleSimpleDeserializers *_deserializers_;
  ComFasterxmlJacksonDatabindModuleSimpleSerializers *_keySerializers_;
  ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *_keyDeserializers_;
  /*!
   @brief Lazily-constructed resolver used for storing mappings from
  abstract classes to more specific implementing classes
  (which may be abstract or concrete)
   */
  ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *_abstractTypes_;
  /*!
   @brief Lazily-constructed resolver used for storing mappings from
  abstract classes to more specific implementing classes
  (which may be abstract or concrete)
   */
  ComFasterxmlJacksonDatabindModuleSimpleValueInstantiators *_valueInstantiators_;
  /*!
   @since 2.2
   */
  ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *_deserializerModifier_;
  /*!
   @since 2.2
   */
  ComFasterxmlJacksonDatabindSerBeanSerializerModifier *_serializerModifier_;
  /*!
   @brief Lazily-constructed map that contains mix-in definitions, indexed
  by target class, value being mix-in to apply.
   */
  JavaUtilHashMap *_mixins_;
  /*!
   @brief Set of subtypes to register, if any.
   */
  JavaUtilLinkedHashSet *_subtypes_;
  /*!
   @since 2.3
   */
  ComFasterxmlJacksonDatabindPropertyNamingStrategy *_namingStrategy_;
}

#pragma mark Public

/*!
 @brief Constructors that should only be used for non-reusable
  convenience modules used by app code: "real" modules should
  use actual name and version number information.
 */
- (instancetype __nonnull)init;

/*!
 @brief Convenience constructor that will default version to 
 <code>Version.unknownVersion()</code>.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Constructor to use for actual reusable modules.
 ObjectMapper may use name as identifier to notice attempts
  for multiple registrations of the same module (although it
  does not have to).
 @param name Unique name of the module
 @param version_ Version of the module
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
        withComFasterxmlJacksonCoreVersion:(ComFasterxmlJacksonCoreVersion *)version_;

/*!
 @since 2.1
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
        withComFasterxmlJacksonCoreVersion:(ComFasterxmlJacksonCoreVersion *)version_
                          withJavaUtilList:(id<JavaUtilList>)serializers;

/*!
 @since 2.1
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
        withComFasterxmlJacksonCoreVersion:(ComFasterxmlJacksonCoreVersion *)version_
                           withJavaUtilMap:(id<JavaUtilMap>)deserializers;

/*!
 @since 2.1
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
        withComFasterxmlJacksonCoreVersion:(ComFasterxmlJacksonCoreVersion *)version_
                           withJavaUtilMap:(id<JavaUtilMap>)deserializers
                          withJavaUtilList:(id<JavaUtilList>)serializers;

/*!
 @brief Convenience constructor that will use specified Version,
  including name from <code>Version.getArtifactId()</code>
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreVersion:(ComFasterxmlJacksonCoreVersion *)version_;

/*!
 @brief Lazily-constructed resolver used for storing mappings from
  abstract classes to more specific implementing classes
  (which may be abstract or concrete)
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addAbstractTypeMappingWithIOSClass:(IOSClass *)superType
                                                                         withIOSClass:(IOSClass *)subType;

/*!
 @brief Method for adding deserializer to handle specified type.
 <p>
  WARNING! Type matching only uses type-erased <code>Class</code> and should NOT
  be used when registering serializers for generic types like 
 <code>java.util.Collection</code> and <code>java.util.Map</code>.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addDeserializerWithIOSClass:(IOSClass *)type
                               withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addKeyDeserializerWithIOSClass:(IOSClass *)type
                                   withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)deser;

- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addKeySerializerWithIOSClass:(IOSClass *)type
                                  withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Method for adding serializer to handle values of specific type.
 <p>
  WARNING! Type matching only uses type-erased <code>Class</code> and should NOT
  be used when registering serializers for generic types like 
 <code>java.util.Collection</code> and <code>java.util.Map</code>.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addSerializerWithIOSClass:(IOSClass *)type
                               withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Method for adding serializer to handle type that the serializer claims to handle
  (see <code>JsonSerializer.handledType()</code>).
 <p>
  WARNING! Type matching only uses type-erased <code>Class</code> and should NOT
  be used when registering serializers for generic types like 
 <code>java.util.Collection</code> and <code>java.util.Map</code>.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addSerializerWithComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Method for registering <code>ValueInstantiator</code> to use when deserializing
  instances of type <code>beanType</code>.
 <p>
  Instantiator is
  registered when module is registered for <code>ObjectMapper</code>.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)addValueInstantiatorWithIOSClass:(IOSClass *)beanType
                              withComFasterxmlJacksonDatabindDeserValueInstantiator:(ComFasterxmlJacksonDatabindDeserValueInstantiator *)inst;

- (NSString *)getModuleName;

/*!
 @brief Since instances are likely to be custom, implementation returns 
 <code>null</code> if (but only if!)
 this class is directly instantiated;
  but class name (default impl) for sub-classes.
 */
- (id)getTypeId;

/*!
 @brief Method for adding set of subtypes to be registered with 
 <code>ObjectMapper</code>
  this is an alternative to using annotations in super type to indicate subtypes.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)registerSubtypesWithIOSClassArray:(IOSObjectArray *)subtypes;

/*!
 @brief Method for adding set of subtypes (along with type name to use) to be registered with 
 <code>ObjectMapper</code>
  this is an alternative to using annotations in super type to indicate subtypes.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)registerSubtypesWithJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method for adding set of subtypes (along with type name to use) to be registered with 
 <code>ObjectMapper</code>
  this is an alternative to using annotations in super type to indicate subtypes.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)registerSubtypesWithComFasterxmlJacksonDatabindJsontypeNamedTypeArray:(IOSObjectArray *)subtypes;

/*!
 @brief Resets currently configured abstract type mappings
 */
- (void)setAbstractTypesWithComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver:(ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *)atr;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)setDeserializerModifierWithComFasterxmlJacksonDatabindDeserBeanDeserializerModifier:(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *)mod;

/*!
 @brief Resets all currently configured deserializers.
 */
- (void)setDeserializersWithComFasterxmlJacksonDatabindModuleSimpleDeserializers:(ComFasterxmlJacksonDatabindModuleSimpleDeserializers *)d;

/*!
 @brief Resets all currently configured key deserializers.
 */
- (void)setKeyDeserializersWithComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers:(ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *)kd;

/*!
 @brief Resets all currently configured key serializers.
 */
- (void)setKeySerializersWithComFasterxmlJacksonDatabindModuleSimpleSerializers:(ComFasterxmlJacksonDatabindModuleSimpleSerializers *)ks;

/*!
 @brief Method for specifying that annotations define by <code>mixinClass</code>
  should be "mixed in" with annotations that <code>targetType</code>
  has (as if they were directly included on it!).
 <p>
  Mix-in annotations are
  registered when module is registered for <code>ObjectMapper</code>.
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)setMixInAnnotationWithIOSClass:(IOSClass *)targetType
                                                                     withIOSClass:(IOSClass *)mixinClass;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)setSerializerModifierWithComFasterxmlJacksonDatabindSerBeanSerializerModifier:(ComFasterxmlJacksonDatabindSerBeanSerializerModifier *)mod;

/*!
 @brief Resets all currently configured serializers.
 */
- (void)setSerializersWithComFasterxmlJacksonDatabindModuleSimpleSerializers:(ComFasterxmlJacksonDatabindModuleSimpleSerializers *)s;

/*!
 @brief Standard implementation handles registration of all configured
  customizations: it is important that sub-classes call this 
  implementation (usually before additional custom logic)
  if they choose to override it; otherwise customizations
  will not be registered.
 */
- (void)setupModuleWithComFasterxmlJacksonDatabindModule_SetupContext:(id<ComFasterxmlJacksonDatabindModule_SetupContext>)context;

/*!
 @brief Resets all currently configured value instantiators
 */
- (void)setValueInstantiatorsWithComFasterxmlJacksonDatabindModuleSimpleValueInstantiators:(ComFasterxmlJacksonDatabindModuleSimpleValueInstantiators *)svi;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

/*!
 @since 2.9
 */
- (void)_checkNotNullWithId:(id)thingy
               withNSString:(NSString *)type;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindModuleSimpleModule *)setNamingStrategyWithComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)naming;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindModuleSimpleModule)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _name_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _version_, ComFasterxmlJacksonCoreVersion *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _serializers_, ComFasterxmlJacksonDatabindModuleSimpleSerializers *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _deserializers_, ComFasterxmlJacksonDatabindModuleSimpleDeserializers *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _keySerializers_, ComFasterxmlJacksonDatabindModuleSimpleSerializers *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _keyDeserializers_, ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _abstractTypes_, ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _valueInstantiators_, ComFasterxmlJacksonDatabindModuleSimpleValueInstantiators *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _deserializerModifier_, ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _serializerModifier_, ComFasterxmlJacksonDatabindSerBeanSerializerModifier *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _mixins_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _subtypes_, JavaUtilLinkedHashSet *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleModule, _namingStrategy_, ComFasterxmlJacksonDatabindPropertyNamingStrategy *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_init(ComFasterxmlJacksonDatabindModuleSimpleModule *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithComFasterxmlJacksonCoreVersion_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, ComFasterxmlJacksonCoreVersion *version_);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithComFasterxmlJacksonCoreVersion_(ComFasterxmlJacksonCoreVersion *version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithComFasterxmlJacksonCoreVersion_(ComFasterxmlJacksonCoreVersion *version_);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, NSString *name, ComFasterxmlJacksonCoreVersion *version_);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_(NSString *name, ComFasterxmlJacksonCoreVersion *version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_(NSString *name, ComFasterxmlJacksonCoreVersion *version_);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilList_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilList> serializers);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilList_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilList> serializers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilList_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilList> serializers);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_withJavaUtilList_(ComFasterxmlJacksonDatabindModuleSimpleModule *self, NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers, id<JavaUtilList> serializers);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *new_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_withJavaUtilList_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers, id<JavaUtilList> serializers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleModule *create_ComFasterxmlJacksonDatabindModuleSimpleModule_initWithNSString_withComFasterxmlJacksonCoreVersion_withJavaUtilMap_withJavaUtilList_(NSString *name, ComFasterxmlJacksonCoreVersion *version_, id<JavaUtilMap> deserializers, id<JavaUtilList> serializers);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindModuleSimpleModule)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleModule")
