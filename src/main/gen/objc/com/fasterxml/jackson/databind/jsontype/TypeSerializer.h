//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsontypeTypeSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindJsontypeTypeSerializer))
#define ComFasterxmlJacksonDatabindJsontypeTypeSerializer_

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreTypeWritableTypeId;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;

/*!
 @brief Interface for serializing type information regarding instances of specified
  base type (super class), so that exact subtype can be properly deserialized
  later on.These instances are to be called by regular 
 <code>com.fasterxml.jackson.databind.JsonSerializer</code>s using proper contextual
  calls, to add type information using mechanism type serializer was
  configured with.
 <p>
  NOTE: version 2.9 contains significant attempt at simplifying interface,
  as well as giving format implementation (via <code>JsonGenerator</code>) more
  control over actual serialization details.
 */
@interface ComFasterxmlJacksonDatabindJsontypeTypeSerializer : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to create contextual version, to be used for
  values of given property.This may be the type itself
  (as is the case for bean properties), or values contained
  (for <code>java.util.Collection</code> or <code>java.util.Map</code>
  valued properties).
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)forPropertyWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop;

/*!
 @brief Name of property that contains type information, if
  property-based inclusion is used.
 */
- (NSString *)getPropertyName;

/*!
 @brief Accessor for object that handles conversions between
  types and matching type ids.
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)getTypeIdResolver;

/*!
 @brief Accessor for type information inclusion method
  that serializer uses; indicates how type information
  is embedded in resulting JSON.
 */
- (ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)getTypeInclusion;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)typeIdWithId:(id)value
                                               withIOSClass:(IOSClass *)typeForId
                       withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape;

/*!
 @brief Factory method for constructing type id value object to pass to 
 <code>writeTypePrefix</code>.
 */
- (ComFasterxmlJacksonCoreTypeWritableTypeId *)typeIdWithId:(id)value
                       withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)typeIdWithId:(id)value
                       withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape
                                                     withId:(id)id_;

- (void)writeCustomTypePrefixForArrayWithId:(id)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                               withNSString:(NSString *)typeId;

- (void)writeCustomTypePrefixForObjectWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypePrefixForScalarWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForArrayWithId:(id)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                               withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForObjectWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForScalarWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                withNSString:(NSString *)typeId;

/*!
 @brief Method called to write initial part of type information for given
  value, along with possible wrapping to use: details are specified
  by `typeId` argument.
 @param g Generator to use for outputting type id and possible wrapping
 @param typeId Details of what type id is to be written, how.
 @since 2.9
 */
- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypePrefixWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                         withComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeId;

/*!
 @brief Method called to write initial part of type information for given
  value, when it will be output as JSON Array value (not as JSON
  Object or scalar).
 This means that context after call must be JSON Array, that is, there
  must be an open START_ARRAY to write contents in.
 @param value Value that will be serialized, for which type information is    to be written
 @param g Generator to use for writing type information
 */
- (void)writeTypePrefixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Alternative version of the prefix-for-array method, which is given
  actual type to use (instead of using exact type of the value); typically
  a super type of actual value type
 */
- (void)writeTypePrefixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                         withIOSClass:(IOSClass *)type;

/*!
 @brief Method called to write initial part of type information for given
  value, when it will be output as JSON Object value (not as JSON
  Array or scalar).
 This means that context after call must be JSON Object, meaning that
  caller can then proceed to output field entries.
 @param value Value that will be serialized, for which type information is    to be written
 @param g Generator to use for writing type information
 */
- (void)writeTypePrefixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Alternative version of the prefix-for-object method, which is given
  actual type to use (instead of using exact type of the value); typically
  a super type of actual value type
 */
- (void)writeTypePrefixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                          withIOSClass:(IOSClass *)type;

/*!
 @brief Method called to write initial part of type information for given
  value, when it will be output as scalar JSON value (not as JSON
  Object or Array).
 This means that the context after call cannot be that of JSON Object;
  it may be Array or root context.
 @param value Value that will be serialized, for which type information is    to be written
 @param g Generator to use for writing type information
 */
- (void)writeTypePrefixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Alternative version of the prefix-for-scalar method, which is given
  actual type to use (instead of using exact type of the value); typically
  a super type of actual value type
 */
- (void)writeTypePrefixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                          withIOSClass:(IOSClass *)type;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypeSuffixWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                         withComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeId;

/*!
 @brief Method called after value has been serialized, to close any scopes opened
  by earlier matching call to <code>writeTypeSuffixForScalar</code>.
 It needs to write closing END_ARRAY marker, and any other decoration
  that needs to be matched.
 */
- (void)writeTypeSuffixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Method called after value has been serialized, to close any scopes opened
  by earlier matching call to <code>writeTypePrefixForObject</code>.
 It needs to write closing END_OBJECT marker, and any other decoration
  that needs to be matched.
 */
- (void)writeTypeSuffixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Method called after value has been serialized, to close any scopes opened
  by earlier matching call to <code>writeTypePrefixForScalar</code>.
 Actual action to take may depend on various factors, but has to match with action 
 <code>writeTypePrefixForScalar</code> did (close array or object; or do nothing).
 */
- (void)writeTypeSuffixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

#pragma mark Protected

/*!
 @brief Helper method needed for backwards compatibility: since original type id
  can not be routed through completely, we have to reverse-engineer likely
  setting before calling suffix.
 @since 2.9
 */
- (void)_writeLegacySuffixWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                     withComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeId;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsontypeTypeSerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsontypeTypeSerializer_init(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsontypeTypeSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeSerializer")
