//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/node/DecimalNode.h"
#include "com/fasterxml/jackson/databind/node/NumericNode.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

inline JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_get_MIN_INTEGER(void);
static JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_INTEGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindNodeDecimalNode, MIN_INTEGER, JavaMathBigDecimal *)

inline JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_get_MAX_INTEGER(void);
static JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_INTEGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindNodeDecimalNode, MAX_INTEGER, JavaMathBigDecimal *)

inline JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_get_MIN_LONG(void);
static JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindNodeDecimalNode, MIN_LONG, JavaMathBigDecimal *)

inline JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_get_MAX_LONG(void);
static JavaMathBigDecimal *ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindNodeDecimalNode, MAX_LONG, JavaMathBigDecimal *)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindNodeDecimalNode)

ComFasterxmlJacksonDatabindNodeDecimalNode *ComFasterxmlJacksonDatabindNodeDecimalNode_ZERO;

@implementation ComFasterxmlJacksonDatabindNodeDecimalNode

- (instancetype __nonnull)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)v {
  ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(self, v);
  return self;
}

+ (ComFasterxmlJacksonDatabindNodeDecimalNode *)valueOfWithJavaMathBigDecimal:(JavaMathBigDecimal *)d {
  return ComFasterxmlJacksonDatabindNodeDecimalNode_valueOfWithJavaMathBigDecimal_(d);
}

- (ComFasterxmlJacksonCoreJsonToken *)asToken {
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT);
}

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType {
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, BIG_DECIMAL);
}

- (jboolean)isFloatingPointNumber {
  return true;
}

- (jboolean)isBigDecimal {
  return true;
}

- (jboolean)canConvertToInt {
  return ([((JavaMathBigDecimal *) nil_chk(_value_)) compareToWithId:ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_INTEGER] >= 0) && ([_value_ compareToWithId:ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_INTEGER] <= 0);
}

- (jboolean)canConvertToLong {
  return ([((JavaMathBigDecimal *) nil_chk(_value_)) compareToWithId:ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_LONG] >= 0) && ([_value_ compareToWithId:ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_LONG] <= 0);
}

- (NSNumber *)numberValue {
  return _value_;
}

- (jshort)shortValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) shortValue];
}

- (jint)intValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) intValue];
}

- (jlong)longValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) longLongValue];
}

- (JavaMathBigInteger *)bigIntegerValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) toBigInteger];
}

- (jfloat)floatValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) floatValue];
}

- (jdouble)doubleValue {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) doubleValue];
}

- (JavaMathBigDecimal *)decimalValue {
  return _value_;
}

- (NSString *)asText {
  return [((JavaMathBigDecimal *) nil_chk(_value_)) description];
}

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(jgen)) writeNumberWithJavaMathBigDecimal:_value_];
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (o == nil) return false;
  if ([o isKindOfClass:[ComFasterxmlJacksonDatabindNodeDecimalNode class]]) {
    return [((JavaMathBigDecimal *) nil_chk(((ComFasterxmlJacksonDatabindNodeDecimalNode *) cast_chk(o, [ComFasterxmlJacksonDatabindNodeDecimalNode class]))->_value_)) compareToWithId:_value_] == 0;
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [JavaLangDouble_valueOfWithDouble_([self doubleValue]) hash]);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(_value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeDecimalNode;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser_NumberType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigDecimal:);
  methods[1].selector = @selector(valueOfWithJavaMathBigDecimal:);
  methods[2].selector = @selector(asToken);
  methods[3].selector = @selector(numberType);
  methods[4].selector = @selector(isFloatingPointNumber);
  methods[5].selector = @selector(isBigDecimal);
  methods[6].selector = @selector(canConvertToInt);
  methods[7].selector = @selector(canConvertToLong);
  methods[8].selector = @selector(numberValue);
  methods[9].selector = @selector(shortValue);
  methods[10].selector = @selector(intValue);
  methods[11].selector = @selector(longValue);
  methods[12].selector = @selector(bigIntegerValue);
  methods[13].selector = @selector(floatValue);
  methods[14].selector = @selector(doubleValue);
  methods[15].selector = @selector(decimalValue);
  methods[16].selector = @selector(asText);
  methods[17].selector = @selector(serializeWithComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[18].selector = @selector(isEqual:);
  methods[19].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LComFasterxmlJacksonDatabindNodeDecimalNode;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "MIN_INTEGER", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "MAX_INTEGER", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "MIN_LONG", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "MAX_LONG", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "_value_", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigDecimal;", "valueOf", "serialize", "LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonProcessingException;", "equals", "LNSObject;", "hashCode", &ComFasterxmlJacksonDatabindNodeDecimalNode_ZERO, &ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_INTEGER, &ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_INTEGER, &ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_LONG, &ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_LONG };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindNodeDecimalNode = { "DecimalNode", "com.fasterxml.jackson.databind.node", ptrTable, methods, fields, 7, 0x1, 20, 6, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindNodeDecimalNode;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindNodeDecimalNode class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindNodeDecimalNode_ZERO, new_ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(JreLoadStatic(JavaMathBigDecimal, ZERO)));
    JreStrongAssign(&ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_INTEGER, JavaMathBigDecimal_valueOfWithLong_(JavaLangInteger_MIN_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_INTEGER, JavaMathBigDecimal_valueOfWithLong_(JavaLangInteger_MAX_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonDatabindNodeDecimalNode_MIN_LONG, JavaMathBigDecimal_valueOfWithLong_(JavaLangLong_MIN_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonDatabindNodeDecimalNode_MAX_LONG, JavaMathBigDecimal_valueOfWithLong_(JavaLangLong_MAX_VALUE));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindNodeDecimalNode)
  }
}

@end

void ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(ComFasterxmlJacksonDatabindNodeDecimalNode *self, JavaMathBigDecimal *v) {
  ComFasterxmlJacksonDatabindNodeNumericNode_init(self);
  JreStrongAssign(&self->_value_, v);
}

ComFasterxmlJacksonDatabindNodeDecimalNode *new_ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(JavaMathBigDecimal *v) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindNodeDecimalNode, initWithJavaMathBigDecimal_, v)
}

ComFasterxmlJacksonDatabindNodeDecimalNode *create_ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(JavaMathBigDecimal *v) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindNodeDecimalNode, initWithJavaMathBigDecimal_, v)
}

ComFasterxmlJacksonDatabindNodeDecimalNode *ComFasterxmlJacksonDatabindNodeDecimalNode_valueOfWithJavaMathBigDecimal_(JavaMathBigDecimal *d) {
  ComFasterxmlJacksonDatabindNodeDecimalNode_initialize();
  return create_ComFasterxmlJacksonDatabindNodeDecimalNode_initWithJavaMathBigDecimal_(d);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindNodeDecimalNode)
