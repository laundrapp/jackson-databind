//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer))
#define ComFasterxmlJacksonDatabindSerStdStdSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindJsonSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonSerializer 1
#include "com/fasterxml/jackson/databind/JsonSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#include "com/fasterxml/jackson/databind/jsonschema/SchemaAware.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Feature;
@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonParser_NumberType;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatTypes;
@class ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonValueFormat;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@class JavaLangBoolean;
@class JavaLangThrowable;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol ComFasterxmlJacksonDatabindSerPropertyFilter;
@protocol JavaLangReflectType;
@protocol JavaUtilCollection;

/*!
 @brief Base class used by all standard serializers, and can also
  be used for custom serializers (in fact, this is the recommended
  base class to use).
 Provides convenience methods for implementing <code>SchemaAware</code>
 */
@interface ComFasterxmlJacksonDatabindSerStdStdSerializer : ComFasterxmlJacksonDatabindJsonSerializer < ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable, ComFasterxmlJacksonDatabindJsonschemaSchemaAware, JavaIoSerializable > {
 @public
  /*!
   @brief Nominal type supported, usually declared type of
  property for which serializer is used.
   */
  IOSClass *_handledType_;
}

#pragma mark Public

/*!
 @brief Default implementation specifies no format.This behavior is usually
  overriden by custom serializers.
 */
- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

/*!
 @brief Default implementation simply claims type is "string"; usually
  overriden by custom serializers.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

/*!
 @brief Default implementation simply claims type is "string"; usually
  overriden by custom serializers.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint
                                                                                        withBoolean:(jboolean)isOptional;

- (IOSClass *)handledType;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)wrapAndThrowWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                withJavaLangThrowable:(JavaLangThrowable *)t
                                                               withId:(id)bean
                                                              withInt:(jint)index;

/*!
 @brief Method that will modify caught exception (passed in as argument)
  as necessary to include reference information, and to ensure it
  is a subtype of <code>IOException</code>, or an unchecked exception.
 <p>
  Rules for wrapping and unwrapping are bit complicated; essentially:
 <ul>
  <li>Errors are to be passed as is (if uncovered via unwrapping) 
 <li>"Plain" IOExceptions (ones that are not of type
    <code>JsonMappingException</code> are to be passed as is
 </ul>
 */
- (void)wrapAndThrowWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                withJavaLangThrowable:(JavaLangThrowable *)t
                                                               withId:(id)bean
                                                         withNSString:(NSString *)fieldName;

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)t;

/*!
 @brief Alternate constructor that is (alas!)
 needed to work
  around kinks of generic type handling
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)t
                               withBoolean:(jboolean)dummy;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @since 2.6
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)src;

/*!
 @since 2.9
 */
+ (jboolean)_neitherNullWithId:(id)a
                        withId:(id)b;

/*!
 @since 2.9
 */
+ (jboolean)_nonEmptyWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (ComFasterxmlJacksonDatabindNodeObjectNode *)createSchemaNodeWithNSString:(NSString *)type;

- (ComFasterxmlJacksonDatabindNodeObjectNode *)createSchemaNodeWithNSString:(NSString *)type
                                                                withBoolean:(jboolean)isOptional;

/*!
 @brief Convenience method for finding out possibly configured content value serializer.
 @since 2.7.4
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findAnnotatedContentSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers
                                                                                   withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

/*!
 @brief Helper method that can be used to see if specified property has annotation
  indicating that a converter is to be used for contained values (contents
  of structured types; array/List/Map values)
 @param existingSerializer (optional) configured content     serializer if one already exists.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findContextualConvertingSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                       withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                                                                     withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)existingSerializer;

/*!
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findConvertingContentSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                    withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                                  withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)existingSerializer;

/*!
 @brief Convenience method that uses <code>findFormatOverrides</code> to find possible
  defaults and/of overrides, and then calls <code>JsonFormat.Value.getFeature(...)
 </code>
  to find whether that feature has been specifically marked as enabled or disabled.
 @param typeForDefaults Type (erased) used for finding default format settings, if any
 @since 2.7
 */
- (JavaLangBoolean *)findFormatFeatureWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                            withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                           withIOSClass:(IOSClass *)typeForDefaults
                                    withComFasterxmlJacksonAnnotationJsonFormat_Feature:(ComFasterxmlJacksonAnnotationJsonFormat_Feature *)feat;

/*!
 @brief Helper method that may be used to find if this deserializer has specific 
 <code>JsonFormat</code> settings, either via property, or through type-specific
  defaulting.
 @param typeForDefaults Type (erased) used for finding default format settings, if any
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)findFormatOverridesWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                                                           withIOSClass:(IOSClass *)typeForDefaults;

/*!
 @since 2.8
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)findIncludeOverridesWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                              withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                                                             withIOSClass:(IOSClass *)typeForDefaults;

/*!
 @brief Helper method used to locate filter that is needed, based on filter id
  this serializer was constructed with.
 @since 2.3
 */
- (id<ComFasterxmlJacksonDatabindSerPropertyFilter>)findPropertyFilterWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                                                 withId:(id)filterId
                                                                                                                 withId:(id)valueToFilter;

/*!
 @brief Method that can be called to determine if given serializer is the default
  serializer Jackson uses; as opposed to a custom serializer installed by
  a module or calling application.Determination is done using 
 <code>JacksonStdImpl</code> annotation on serializer class.
 */
- (jboolean)isDefaultSerializerWithComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.7
 */
- (void)visitArrayFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                 withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatTypes:(ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatTypes *)itemType;

/*!
 @since 2.7
 */
- (void)visitArrayFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                                    withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)itemSerializer
                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)itemType;

/*!
 @brief Helper method that calls necessary visit method(s) to indicate that the
  underlying JSON type is a floating-point JSON number.
 @since 2.7
 */
- (void)visitFloatFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                                 withComFasterxmlJacksonCoreJsonParser_NumberType:(ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType;

/*!
 @brief Helper method that calls necessary visit method(s) to indicate that the
  underlying JSON type is JSON Integer number.
 @since 2.7
 */
- (void)visitIntFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                        withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                               withComFasterxmlJacksonCoreJsonParser_NumberType:(ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType;

/*!
 @brief Helper method that calls necessary visit method(s) to indicate that the
  underlying JSON type is JSON Integer number, but that there is also a further
  format restriction involved.
 @since 2.7
 */
- (void)visitIntFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                        withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                               withComFasterxmlJacksonCoreJsonParser_NumberType:(ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType
                               withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonValueFormat:(ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonValueFormat *)format;

/*!
 @brief Helper method that calls necessary visit method(s) to indicate that the
  underlying JSON type is JSON String.
 @since 2.7
 */
- (void)visitStringFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

/*!
 @brief Helper method that calls necessary visit method(s) to indicate that the
  underlying JSON type is JSON String, but that there is a more refined
  logical type
 @since 2.7
 */
- (void)visitStringFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                  withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonValueFormat:(ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonValueFormat *)format;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdSerializer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdStdSerializer, _handledType_, IOSClass *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdSerializer_initWithIOSClass_(ComFasterxmlJacksonDatabindSerStdStdSerializer *self, IOSClass *t);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdSerializer_initWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindSerStdStdSerializer *self, ComFasterxmlJacksonDatabindJavaType *type);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdSerializer_initWithIOSClass_withBoolean_(ComFasterxmlJacksonDatabindSerStdStdSerializer *self, IOSClass *t, jboolean dummy);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdSerializer_initWithComFasterxmlJacksonDatabindSerStdStdSerializer_(ComFasterxmlJacksonDatabindSerStdStdSerializer *self, ComFasterxmlJacksonDatabindSerStdStdSerializer *src);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindSerStdStdSerializer__neitherNullWithId_withId_(id a, id b);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindSerStdStdSerializer__nonEmptyWithJavaUtilCollection_(id<JavaUtilCollection> c);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdSerializer")
