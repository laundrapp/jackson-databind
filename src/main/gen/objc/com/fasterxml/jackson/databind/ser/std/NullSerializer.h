//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdNullSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdNullSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdNullSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdNullSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdNullSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdNullSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdNullSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdNullSerializer))
#define ComFasterxmlJacksonDatabindSerStdNullSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;

/*!
 @brief This is a simple dummy serializer that will just output literal
  JSON null value whenever serialization is requested.
 Used as the default "null serializer" (which is used for serializing
  null object references unless overridden), as well as for some
  more exotic types (java.lang.Void).
 */
@interface ComFasterxmlJacksonDatabindSerStdNullSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer

#pragma mark Public

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Although this method should rarely get called, for convenience we should override
  it, and handle it same way as "natural" types: by serializing exactly as is,
  without type decorations.The most common possible use case is that of delegation
  by JSON filter; caller cannot know what kind of serializer it gets handed.
 */
- (void)serializeWithTypeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdNullSerializer)

inline ComFasterxmlJacksonDatabindSerStdNullSerializer *ComFasterxmlJacksonDatabindSerStdNullSerializer_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdNullSerializer *ComFasterxmlJacksonDatabindSerStdNullSerializer_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdNullSerializer, instance, ComFasterxmlJacksonDatabindSerStdNullSerializer *)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdNullSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdNullSerializer")
