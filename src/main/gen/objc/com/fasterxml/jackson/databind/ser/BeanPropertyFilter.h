//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyFilter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBeanPropertyFilter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyFilter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyFilter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBeanPropertyFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBeanPropertyFilter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyFilter || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBeanPropertyFilter))
#define ComFasterxmlJacksonDatabindSerBeanPropertyFilter_

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindSerBeanPropertyWriter;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor;

/*!
 @brief Interface that defines API for filter objects use (as configured
  using <code>com.fasterxml.jackson.annotation.JsonFilter</code>)
  for filtering bean properties to serialize.
 <p>
  Starting with version 2.3 this class is deprecated; use 
 <code>PropertyFilter</code> instead.
 */
@protocol ComFasterxmlJacksonDatabindSerBeanPropertyFilter < JavaObject >

/*!
 @brief Method called by <code>BeanSerializer</code> to let filter decide what to do with
  given bean property value: the usual choices are to either filter out (i.e.
 do nothing) or write using given <code>BeanPropertyWriter</code>, although filters
  can choose other to do something different altogether.
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.serializeAsField(pojo, jgen, prov);
  }
 
@endcode
 @param pojo Object that contains property value to serialize
 @param jgen Generator use for serializing value
 @param prov Provider that can be used for accessing dynamic aspects of serialization     processing
 @param writer Default bean property serializer to use
 */
- (void)serializeAsFieldWithId:(id)pojo
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
withComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)writer;

/*!
 @brief Method called by <code>BeanSerializer</code> to let the filter determine whether, and in what
  form the given property exist within the parent, or root, schema.Filters can omit
  adding the property to the node, or choose the form of the schema value for the property.
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.depositSchemaProperty(propertiesNode, provider);
  }
 
@endcode
 @param writer Bean property writer to use to create schema value
 @param propertiesNode Node which the given property would exist within
 @param provider Provider that can be used for accessing dynamic aspects of serialization  	processing
 @since 2.1
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)writer
                                    withComFasterxmlJacksonDatabindNodeObjectNode:(ComFasterxmlJacksonDatabindNodeObjectNode *)propertiesNode
                                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called by <code>BeanSerializer</code> to let the filter determine whether, and in what
  form the given property exist within the parent, or root, schema.Filters can omit
  adding the property to the node, or choose the form of the schema value for the property
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.depositSchemaProperty(objectVisitor, provider);
  }
 
@endcode
 @param writer Bean property serializer to use to create schema value
 @param objectVisitor JsonObjectFormatVisitor which should be aware of   the property's existence
 @param provider Provider that can be used for accessing dynamic aspects of serialization  	processing
 @since 2.1
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)writer
         withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor>)objectVisitor
                                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerBeanPropertyFilter)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBeanPropertyFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyFilter")
