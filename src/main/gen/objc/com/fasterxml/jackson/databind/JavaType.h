//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/JavaType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJavaType")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJavaType
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJavaType 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJavaType 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJavaType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJavaType_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJavaType || defined(INCLUDE_ComFasterxmlJacksonDatabindJavaType))
#define ComFasterxmlJacksonDatabindJavaType_

#define RESTRICT_ComFasterxmlJacksonCoreTypeResolvedType 1
#define INCLUDE_ComFasterxmlJacksonCoreTypeResolvedType 1
#include "com/fasterxml/jackson/core/type/ResolvedType.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangReflectType 1
#define INCLUDE_JavaLangReflectType 1
#include "java/lang/reflect/Type.h"

@class ComFasterxmlJacksonDatabindTypeTypeBindings;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@protocol JavaUtilList;

/*!
 @brief Base class for type token classes used both to contain information
  and as keys for deserializers.
 <p>
  Instances can (only) be constructed by 
 <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.
 <p>
  Since 2.2 this implements <code>java.lang.reflect.Type</code> to allow
  it to be pushed through interfaces that only expose that type.
 */
@interface ComFasterxmlJacksonDatabindJavaType : ComFasterxmlJacksonCoreTypeResolvedType < JavaIoSerializable, JavaLangReflectType > {
 @public
  /*!
   @brief This is the nominal type-erased Class that would be close to the
  type represented (but not exactly type, due to type erasure: type
  instance may have more information on this).
   May be an interface or abstract class, so instantiation
  may not be possible.
   */
  IOSClass *_class_;
  jint _hash_;
  /*!
   @brief Optional handler (codec) that can be attached to indicate 
  what to use for handling (serializing, deserializing) values of
  this specific type.
   <p>
  Note: untyped (i.e. caller has to cast) because it is used for
  different kinds of handlers, with unrelated types.
   */
  id _valueHandler_;
  /*!
   @brief Optional handler that can be attached to indicate how to handle
  additional type metadata associated with this type.
   <p>
  Note: untyped (i.e. caller has to cast) because it is used for
  different kinds of handlers, with unrelated types.
   */
  id _typeHandler_;
  /*!
   @brief Whether entities defined with this type should be handled using
  static typing (as opposed to dynamic runtime type) or not.
   @since 2.2
   */
  jboolean _asStatic_;
}

#pragma mark Public

- (ComFasterxmlJacksonDatabindJavaType *)containedTypeWithInt:(jint)index;

- (jint)containedTypeCount;

- (NSString *)containedTypeNameWithInt:(jint)index;

/*!
 @brief Convenience method that is functionally same as:
 <code>
  JavaType t = containedType(index);
  if (t == null) {
     t = TypeFactory.unknownType();
  }
 </code>
  and typically used to eliminate need for null checks for common case
  where we just want to check if containedType is available first; and
  if not, use "unknown type" (which translates to <code>java.lang.Object</code>
  basically).
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJavaType *)containedTypeOrUnknownWithInt:(jint)index;

- (jboolean)isEqual:(id)o;

/*!
 @brief Method that may be called to find representation of given type
  within type hierarchy of this type: either this type (if this
  type has given erased type), one of its supertypes that has the
  erased types, or null if target is neither this type or any of its
  supertypes.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)findSuperTypeWithIOSClass:(IOSClass *)erasedTarget;

/*!
 @brief Method that may be used to find paramaterization this type has for
  given type-erased generic target type.
 @since 2.7
 */
- (IOSObjectArray *)findTypeParametersWithIOSClass:(IOSClass *)expType;

/*!
 @brief Legacy method used for forcing sub-typing of this type into
  type specified by specific type erasure.
 Deprecated as of 2.7 as such specializations really ought to
  go through <code>TypeFactory</code>, not directly via <code>JavaType</code>.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)forcedNarrowByWithIOSClass:(IOSClass *)subclass;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindTypeTypeBindings *)getBindings;

- (ComFasterxmlJacksonDatabindJavaType *)getContentType;

/*!
 @since 2.7
 */
- (id)getContentTypeHandler;

/*!
 @since 2.7
 */
- (id)getContentValueHandler;

/*!
 @brief Method for accessing signature without generic
  type information, in form compatible with all versions
  of JVM, and specifically used for type descriptions
  when generating byte code.
 */
- (NSString *)getErasedSignature;

/*!
 @brief Method for accessing signature without generic
  type information, in form compatible with all versions
  of JVM, and specifically used for type descriptions
  when generating byte code.
 @param sb StringBuilder to append signature to
 @return StringBuilder that was passed in; returned to allow
  call chaining
 */
- (JavaLangStringBuilder *)getErasedSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

/*!
 @brief Method for accessing signature that contains generic
  type information, in form compatible with JVM 1.5
  as per JLS.It is a superset of <code>getErasedSignature</code>,
  in that generic information can be automatically removed
  if necessary (just remove outermost
  angle brackets along with content inside)
 */
- (NSString *)getGenericSignature;

/*!
 @param sb StringBuilder to append signature to
 @return StringBuilder that was passed in; returned to allow
  call chaining
 */
- (JavaLangStringBuilder *)getGenericSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

/*!
 @brief Accessor for finding fully resolved interfaces this type implements,
  if any; empty array if none.
 @since 2.7
 */
- (id<JavaUtilList>)getInterfaces;

- (ComFasterxmlJacksonDatabindJavaType *)getKeyType;

- (IOSClass *)getParameterSource;

- (IOSClass *)getRawClass;

- (ComFasterxmlJacksonDatabindJavaType *)getReferencedType;

/*!
 @brief Accessor for finding fully resolved parent class of this type,
  if it has one; null if not.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)getSuperClass;

/*!
 @brief Method for accessing type handler associated with this type, if any
 */
- (id)getTypeHandler;

/*!
 @brief Method for accessing value handler associated with this type, if any
 */
- (id)getValueHandler;

/*!
 @brief Accessor that allows determining whether <code>getContentType()</code> should
  return a non-null value (that is, there is a "content type") or not.
 True if <code>isContainerType()</code> or <code>isReferenceType()</code> return true.
 @since 2.8
 */
- (jboolean)hasContentType;

- (jboolean)hasGenericTypes;

/*!
 @brief Helper method that checks whether this type, or its (optional) key
  or content type has <code>getValueHandler</code> or <code>getTypeHandler()</code>;
  that is, are there any non-standard handlers associated with this
  type object.
 @since 2.8
 */
- (jboolean)hasHandlers;

- (NSUInteger)hash;

/*!
 @brief Method that can be used to check whether this type has
  specified Class as its type erasure.Put another way, returns
  true if instantiation of this Type is given (type-erased) Class.
 */
- (jboolean)hasRawClassWithIOSClass:(IOSClass *)clz;

/*!
 @since 2.6
 */
- (jboolean)hasValueHandler;

- (jboolean)isAbstract;

- (jboolean)isArrayType;

/*!
 @return True if type is either true <code>java.util.Collection</code> type,
     or something similar (meaning it has at least one type parameter,
     which describes type of contents)
 */
- (jboolean)isCollectionLikeType;

/*!
 @brief Convenience method for checking whether underlying Java type
  is a concrete class or not: abstract classes and interfaces
  are not.
 */
- (jboolean)isConcrete;

/*!
 @return True if type represented is a container type; this includes
     array, Map and Collection types.
 */
- (jboolean)isContainerType;

- (jboolean)isEnumType;

- (jboolean)isFinal;

- (jboolean)isInterface;

/*!
 @brief Convenience method, short-hand for
 <code>
    getRawClass() == Object.class
 </code>
  and used to figure if we basically have "untyped" type object.
 @since 2.5
 */
- (jboolean)isJavaLangObject;

/*!
 @return True if type is either true <code>java.util.Map</code> type,
     or something similar (meaning it has at least two type parameter;
     first one describing key type, second value type)
 */
- (jboolean)isMapLikeType;

- (jboolean)isPrimitive;

- (jboolean)isThrowable;

/*!
 @since 2.6
 */
- (jboolean)isTypeOrSubTypeOfWithIOSClass:(IOSClass *)clz;

/*!
 @since 2.9
 */
- (jboolean)isTypeOrSuperTypeOfWithIOSClass:(IOSClass *)clz;

/*!
 @brief Mutant factory method that will try to create and return a sub-type instance
  for known parameterized types; for other types will return `null` to indicate
  that no just refinement makes necessary sense, without trying to detect
  special status through implemented interfaces.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)refineWithIOSClass:(IOSClass *)rawType
            withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
               withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (NSString *)description;

/*!
 @brief Accessor for checking whether handlers for dealing with values of
  this type should use static typing (as opposed to dynamic typing).
 Note that while value of 'true' does mean that static typing is to
  be used, value of 'false' may still be overridden by other settings.
 @since 2.2
 */
- (jboolean)useStaticType;

/*!
 @brief Mutant factory method that may be called on structured types
  that have a so-called content type (element of arrays, value type
  of Maps, referenced type of referential types),
  and will construct a new instance that is identical to
  this instance, except that it has specified content type, instead of current
  one.If content type is already set to given type, <code>this</code> is returned.
 If type does not have a content type (which is the case with 
 <code>SimpleType</code>), <code>IllegalArgumentException</code>
  will be thrown.
 @return Newly created type instance
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)withContentTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)contentType;

/*!
 @brief Mutant factory method that will construct a new instance that is identical to
  this instance, except that it will have specified content type (element type
  for arrays, value type for Maps and so forth) handler assigned.
 @return Newly created type instance, with given
 */
- (ComFasterxmlJacksonDatabindJavaType *)withContentTypeHandlerWithId:(id)h;

/*!
 @brief Mutant factory method that will construct a new instance that is identical to
  this instance, except that it will have specified content value handler assigned.
 @return Newly created type instance
 */
- (ComFasterxmlJacksonDatabindJavaType *)withContentValueHandlerWithId:(id)h;

/*!
 @brief Mutant factory method that will try to copy handlers that the specified
  source type instance had, if any; this must be done recursively where
  necessary (as content types may be structured).
 @since 2.8.4
 */
- (ComFasterxmlJacksonDatabindJavaType *)withHandlersFromWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)src;

/*!
 @brief Method that can be called to get a type instance that indicates
  that values of the type should be handled using "static typing" for purposes
  of serialization (as opposed to "dynamic" aka runtime typing):
  meaning that no runtime information is needed for determining serializers to use.
 The main use case is to allow forcing of specific root value serialization type,
  and specifically in resolving serializers for contained types (element types
  for arrays, Collections and Maps).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJavaType *)withStaticTyping;

/*!
 @brief "Copy method" that will construct a new instance that is identical to
  this instance, except that it will have specified type handler assigned.
 @return Newly created type instance
 */
- (ComFasterxmlJacksonDatabindJavaType *)withTypeHandlerWithId:(id)h;

/*!
 @brief Mutant factory method that will construct a new instance that is identical to
  this instance, except that it will have specified value handler assigned.
 @return Newly created type instance
 */
- (ComFasterxmlJacksonDatabindJavaType *)withValueHandlerWithId:(id)h;

#pragma mark Protected

/*!
 @param raw "Raw" (type-erased) class for this type
 @param additionalHash Additional hash code to use, in addition    to hash code of the class name
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)raw
                                   withInt:(jint)additionalHash
                                    withId:(id)valueHandler
                                    withId:(id)typeHandler
                               withBoolean:(jboolean)asStatic;

/*!
 @brief Copy-constructor used when refining/upgrading type instances.
 @since 2.7
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)base;

- (ComFasterxmlJacksonDatabindJavaType *)_narrowWithIOSClass:(IOSClass *)subclass;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJavaType)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJavaType, _class_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJavaType, _valueHandler_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJavaType, _typeHandler_, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJavaType_initWithIOSClass_withInt_withId_withId_withBoolean_(ComFasterxmlJacksonDatabindJavaType *self, IOSClass *raw, jint additionalHash, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJavaType_initWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *self, ComFasterxmlJacksonDatabindJavaType *base);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJavaType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJavaType")
