//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParseException.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonStreamContext.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/ObjectCodec.h"
#include "com/fasterxml/jackson/core/Version.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/databind/JsonNode.h"
#include "com/fasterxml/jackson/databind/cfg/PackageVersion.h"
#include "com/fasterxml/jackson/databind/node/BinaryNode.h"
#include "com/fasterxml/jackson/databind/node/NodeCursor.h"
#include "com/fasterxml/jackson/databind/node/NumericNode.h"
#include "com/fasterxml/jackson/databind/node/POJONode.h"
#include "com/fasterxml/jackson/databind/node/TreeTraversingParser.h"
#include "java/io/OutputStream.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@implementation ComFasterxmlJacksonDatabindNodeTreeTraversingParser

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)n {
  ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_(self, n);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)n
                               withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec {
  ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_(self, n, codec);
  return self;
}

- (void)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)c {
  JreStrongAssign(&_objectCodec_, c);
}

- (ComFasterxmlJacksonCoreObjectCodec *)getCodec {
  return _objectCodec_;
}

- (ComFasterxmlJacksonCoreVersion *)version__ {
  return JreLoadStatic(ComFasterxmlJacksonDatabindCfgPackageVersion, VERSION);
}

- (void)close {
  if (!_closed_) {
    _closed_ = true;
    JreStrongAssign(&_nodeCursor_, nil);
    JreStrongAssign(&_currToken_, nil);
  }
}

- (ComFasterxmlJacksonCoreJsonToken *)nextToken {
  if (_nextToken_ != nil) {
    JreStrongAssign(&_currToken_, _nextToken_);
    JreStrongAssign(&_nextToken_, nil);
    return _currToken_;
  }
  if (_startContainer_) {
    _startContainer_ = false;
    if (![((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) currentHasChildren]) {
      JreStrongAssign(&_currToken_, (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) ? JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT) : JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY));
      return _currToken_;
    }
    JreStrongAssign(&_nodeCursor_, [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) iterateChildren]);
    JreStrongAssign(&_currToken_, [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) nextToken]);
    if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT) || _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      _startContainer_ = true;
    }
    return _currToken_;
  }
  if (_nodeCursor_ == nil) {
    _closed_ = true;
    return nil;
  }
  JreStrongAssign(&_currToken_, [_nodeCursor_ nextToken]);
  if (_currToken_ != nil) {
    if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT) || _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      _startContainer_ = true;
    }
    return _currToken_;
  }
  JreStrongAssign(&_currToken_, [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) endToken]);
  JreStrongAssign(&_nodeCursor_, [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) getParent]);
  return _currToken_;
}

- (ComFasterxmlJacksonCoreJsonParser *)skipChildren {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
    _startContainer_ = false;
    JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT));
  }
  else if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    _startContainer_ = false;
    JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY));
  }
  return self;
}

- (jboolean)isClosed {
  return _closed_;
}

- (NSString *)getCurrentName {
  return (_nodeCursor_ == nil) ? nil : [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) getCurrentName];
}

- (void)overrideCurrentNameWithNSString:(NSString *)name {
  if (_nodeCursor_ != nil) {
    [_nodeCursor_ overrideCurrentNameWithNSString:name];
  }
}

- (ComFasterxmlJacksonCoreJsonStreamContext *)getParsingContext {
  return _nodeCursor_;
}

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation {
  return JreLoadStatic(ComFasterxmlJacksonCoreJsonLocation, NA);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  return JreLoadStatic(ComFasterxmlJacksonCoreJsonLocation, NA);
}

- (NSString *)getText {
  if (_closed_) {
    return nil;
  }
  {
    ComFasterxmlJacksonDatabindJsonNode *n;
    switch ([_currToken_ ordinal]) {
      case ComFasterxmlJacksonCoreJsonToken_Enum_FIELD_NAME:
      return [((ComFasterxmlJacksonDatabindNodeNodeCursor *) nil_chk(_nodeCursor_)) getCurrentName];
      case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_STRING:
      return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNode])) textValue];
      case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_FLOAT:
      return NSString_java_valueOf_([((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNode])) numberValue]);
      case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_EMBEDDED_OBJECT:
      n = [self currentNode];
      if (n != nil && [n isBinary]) {
        return [n asText];
      }
      default:
      return (_currToken_ == nil) ? nil : [((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asString];
    }
  }
}

- (IOSCharArray *)getTextCharacters {
  return [((NSString *) nil_chk([self getText])) java_toCharArray];
}

- (jint)getTextLength {
  return [((NSString *) nil_chk([self getText])) java_length];
}

- (jint)getTextOffset {
  return 0;
}

- (jboolean)hasTextCharacters {
  return false;
}

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)getNumberType {
  ComFasterxmlJacksonDatabindJsonNode *n = [self currentNumericNode];
  return (n == nil) ? nil : [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk(n)) numberType];
}

- (JavaMathBigInteger *)getBigIntegerValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) bigIntegerValue];
}

- (JavaMathBigDecimal *)getDecimalValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) decimalValue];
}

- (jdouble)getDoubleValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) doubleValue];
}

- (jfloat)getFloatValue {
  return (jfloat) [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) doubleValue];
}

- (jlong)getLongValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) longValue];
}

- (jint)getIntValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) intValue];
}

- (NSNumber *)getNumberValue {
  return [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk([self currentNumericNode])) numberValue];
}

- (id)getEmbeddedObject {
  if (!_closed_) {
    ComFasterxmlJacksonDatabindJsonNode *n = [self currentNode];
    if (n != nil) {
      if ([n isPojo]) {
        return [((ComFasterxmlJacksonDatabindNodePOJONode *) cast_chk(n, [ComFasterxmlJacksonDatabindNodePOJONode class])) getPojo];
      }
      if ([n isBinary]) {
        return [((ComFasterxmlJacksonDatabindNodeBinaryNode *) cast_chk(n, [ComFasterxmlJacksonDatabindNodeBinaryNode class])) binaryValue];
      }
    }
  }
  return nil;
}

- (jboolean)isNaN {
  if (!_closed_) {
    ComFasterxmlJacksonDatabindJsonNode *n = [self currentNode];
    if ([n isKindOfClass:[ComFasterxmlJacksonDatabindNodeNumericNode class]]) {
      return [((ComFasterxmlJacksonDatabindNodeNumericNode *) nil_chk(((ComFasterxmlJacksonDatabindNodeNumericNode *) cast_chk(n, [ComFasterxmlJacksonDatabindNodeNumericNode class])))) isNaN];
    }
  }
  return false;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  ComFasterxmlJacksonDatabindJsonNode *n = [self currentNode];
  if (n != nil) {
    IOSByteArray *data = [n binaryValue];
    if (data != nil) {
      return data;
    }
    if ([n isPojo]) {
      id ob = [((ComFasterxmlJacksonDatabindNodePOJONode *) cast_chk(n, [ComFasterxmlJacksonDatabindNodePOJONode class])) getPojo];
      if ([ob isKindOfClass:[IOSByteArray class]]) {
        return (IOSByteArray *) cast_chk(ob, [IOSByteArray class]);
      }
    }
  }
  return nil;
}

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  IOSByteArray *data = [self getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:b64variant];
  if (data != nil) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:data withInt:0 withInt:data->size_];
    return data->size_;
  }
  return 0;
}

- (ComFasterxmlJacksonDatabindJsonNode *)currentNode {
  if (_closed_ || _nodeCursor_ == nil) {
    return nil;
  }
  return [_nodeCursor_ currentNode];
}

- (ComFasterxmlJacksonDatabindJsonNode *)currentNumericNode {
  ComFasterxmlJacksonDatabindJsonNode *n = [self currentNode];
  if (n == nil || ![n isNumber]) {
    ComFasterxmlJacksonCoreJsonToken *t = (n == nil) ? nil : [((ComFasterxmlJacksonDatabindJsonNode *) nil_chk(n)) asToken];
    @throw nil_chk([self _constructErrorWithNSString:JreStrcat("$@$", @"Current token (", t, @") not numeric, cannot use numeric value accessors")]);
  }
  return n;
}

- (void)_handleEOF {
  [self _throwInternal];
}

- (void)dealloc {
  RELEASE_(_objectCodec_);
  RELEASE_(_nodeCursor_);
  RELEASE_(_nextToken_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreObjectCodec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreVersion;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonStreamContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser_NumberType;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 6, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonDatabindJsonNode:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonDatabindJsonNode:withComFasterxmlJacksonCoreObjectCodec:);
  methods[2].selector = @selector(setCodecWithComFasterxmlJacksonCoreObjectCodec:);
  methods[3].selector = @selector(getCodec);
  methods[4].selector = @selector(version__);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(nextToken);
  methods[7].selector = @selector(skipChildren);
  methods[8].selector = @selector(isClosed);
  methods[9].selector = @selector(getCurrentName);
  methods[10].selector = @selector(overrideCurrentNameWithNSString:);
  methods[11].selector = @selector(getParsingContext);
  methods[12].selector = @selector(getTokenLocation);
  methods[13].selector = @selector(getCurrentLocation);
  methods[14].selector = @selector(getText);
  methods[15].selector = @selector(getTextCharacters);
  methods[16].selector = @selector(getTextLength);
  methods[17].selector = @selector(getTextOffset);
  methods[18].selector = @selector(hasTextCharacters);
  methods[19].selector = @selector(getNumberType);
  methods[20].selector = @selector(getBigIntegerValue);
  methods[21].selector = @selector(getDecimalValue);
  methods[22].selector = @selector(getDoubleValue);
  methods[23].selector = @selector(getFloatValue);
  methods[24].selector = @selector(getLongValue);
  methods[25].selector = @selector(getIntValue);
  methods[26].selector = @selector(getNumberValue);
  methods[27].selector = @selector(getEmbeddedObject);
  methods[28].selector = @selector(isNaN);
  methods[29].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[30].selector = @selector(readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:);
  methods[31].selector = @selector(currentNode);
  methods[32].selector = @selector(currentNumericNode);
  methods[33].selector = @selector(_handleEOF);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_objectCodec_", "LComFasterxmlJacksonCoreObjectCodec;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nodeCursor_", "LComFasterxmlJacksonDatabindNodeNodeCursor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nextToken_", "LComFasterxmlJacksonCoreJsonToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_startContainer_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_closed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonDatabindJsonNode;", "LComFasterxmlJacksonDatabindJsonNode;LComFasterxmlJacksonCoreObjectCodec;", "setCodec", "LComFasterxmlJacksonCoreObjectCodec;", "version", "LJavaIoIOException;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonParseException;", "overrideCurrentName", "LNSString;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "readBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;", "LComFasterxmlJacksonCoreJsonParseException;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindNodeTreeTraversingParser = { "TreeTraversingParser", "com.fasterxml.jackson.databind.node", ptrTable, methods, fields, 7, 0x1, 34, 5, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindNodeTreeTraversingParser;
}

@end

void ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_(ComFasterxmlJacksonDatabindNodeTreeTraversingParser *self, ComFasterxmlJacksonDatabindJsonNode *n) {
  ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_(self, n, nil);
}

ComFasterxmlJacksonDatabindNodeTreeTraversingParser *new_ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_(ComFasterxmlJacksonDatabindJsonNode *n) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindNodeTreeTraversingParser, initWithComFasterxmlJacksonDatabindJsonNode_, n)
}

ComFasterxmlJacksonDatabindNodeTreeTraversingParser *create_ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_(ComFasterxmlJacksonDatabindJsonNode *n) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindNodeTreeTraversingParser, initWithComFasterxmlJacksonDatabindJsonNode_, n)
}

void ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonDatabindNodeTreeTraversingParser *self, ComFasterxmlJacksonDatabindJsonNode *n, ComFasterxmlJacksonCoreObjectCodec *codec) {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithInt_(self, 0);
  JreStrongAssign(&self->_objectCodec_, codec);
  if ([((ComFasterxmlJacksonDatabindJsonNode *) nil_chk(n)) isArray]) {
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY));
    JreStrongAssignAndConsume(&self->_nodeCursor_, new_ComFasterxmlJacksonDatabindNodeNodeCursor_ArrayCursor_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonDatabindNodeNodeCursor_(n, nil));
  }
  else if ([n isObject]) {
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT));
    JreStrongAssignAndConsume(&self->_nodeCursor_, new_ComFasterxmlJacksonDatabindNodeNodeCursor_ObjectCursor_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonDatabindNodeNodeCursor_(n, nil));
  }
  else {
    JreStrongAssignAndConsume(&self->_nodeCursor_, new_ComFasterxmlJacksonDatabindNodeNodeCursor_RootCursor_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonDatabindNodeNodeCursor_(n, nil));
  }
}

ComFasterxmlJacksonDatabindNodeTreeTraversingParser *new_ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonDatabindJsonNode *n, ComFasterxmlJacksonCoreObjectCodec *codec) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindNodeTreeTraversingParser, initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_, n, codec)
}

ComFasterxmlJacksonDatabindNodeTreeTraversingParser *create_ComFasterxmlJacksonDatabindNodeTreeTraversingParser_initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonDatabindJsonNode *n, ComFasterxmlJacksonCoreObjectCodec *codec) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindNodeTreeTraversingParser, initWithComFasterxmlJacksonDatabindJsonNode_withComFasterxmlJacksonCoreObjectCodec_, n, codec)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindNodeTreeTraversingParser)
