//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver || defined(INCLUDE_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver))
#define ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_

#define RESTRICT_ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase 1
#include "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.h"

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_Id;
@class ComFasterxmlJacksonDatabindCfgMapperConfig;
@class ComFasterxmlJacksonDatabindDatabindContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSClass;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;

@interface ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver : ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase {
 @public
  ComFasterxmlJacksonDatabindCfgMapperConfig *_config_;
  /*!
   @brief Mappings from class name to type id, used for serialization
   */
  id<JavaUtilMap> _typeToId_;
  /*!
   @brief Mappings from type id to JavaType, used for deserialization
   */
  id<JavaUtilMap> _idToType_;
}

#pragma mark Public

+ (ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver *)constructWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                               withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                withJavaUtilCollection:(id<JavaUtilCollection>)subtypes
                                                                                                           withBoolean:(jboolean)forSer
                                                                                                           withBoolean:(jboolean)forDeser;

- (NSString *)getDescForKnownTypeIds;

- (ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)getMechanism;

- (NSString *)idFromValueWithId:(id)value;

- (NSString *)idFromValueAndTypeWithId:(id)value
                          withIOSClass:(IOSClass *)type;

- (NSString *)description;

- (ComFasterxmlJacksonDatabindJavaType *)typeFromIdWithComFasterxmlJacksonDatabindDatabindContext:(ComFasterxmlJacksonDatabindDatabindContext *)context
                                                                                     withNSString:(NSString *)id_;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                             withJavaUtilMap:(id<JavaUtilMap>)typeToId
                                                             withJavaUtilMap:(id<JavaUtilMap>)idToType;

/*!
 @brief If no name was explicitly given for a class, we will just
  use non-qualified class name
 */
+ (NSString *)_defaultTypeIdWithIOSClass:(IOSClass *)cls;

- (ComFasterxmlJacksonDatabindJavaType *)_typeFromIdWithNSString:(NSString *)id_;

- (NSString *)idFromClassWithIOSClass:(IOSClass *)clazz;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0
                       withComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver, _config_, ComFasterxmlJacksonDatabindCfgMapperConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver, _typeToId_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver, _idToType_, id<JavaUtilMap>)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_initWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindJavaType_withJavaUtilMap_withJavaUtilMap_(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver *self, ComFasterxmlJacksonDatabindCfgMapperConfig *config, ComFasterxmlJacksonDatabindJavaType *baseType, id<JavaUtilMap> typeToId, id<JavaUtilMap> idToType);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver *new_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_initWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindJavaType_withJavaUtilMap_withJavaUtilMap_(ComFasterxmlJacksonDatabindCfgMapperConfig *config, ComFasterxmlJacksonDatabindJavaType *baseType, id<JavaUtilMap> typeToId, id<JavaUtilMap> idToType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver *create_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_initWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindJavaType_withJavaUtilMap_withJavaUtilMap_(ComFasterxmlJacksonDatabindCfgMapperConfig *config, ComFasterxmlJacksonDatabindJavaType *baseType, id<JavaUtilMap> typeToId, id<JavaUtilMap> idToType);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver *ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_constructWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindJavaType_withJavaUtilCollection_withBoolean_withBoolean_(ComFasterxmlJacksonDatabindCfgMapperConfig *config, ComFasterxmlJacksonDatabindJavaType *baseType, id<JavaUtilCollection> subtypes, jboolean forSer, jboolean forDeser);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver__defaultTypeIdWithIOSClass_(IOSClass *cls);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver")
