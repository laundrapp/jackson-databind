//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeFactory")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindTypeTypeFactory
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindTypeTypeFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindTypeTypeFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeFactory || defined(INCLUDE_ComFasterxmlJacksonDatabindTypeTypeFactory))
#define ComFasterxmlJacksonDatabindTypeTypeFactory_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreTypeTypeReference;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeClassStack;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeSimpleType;
@class ComFasterxmlJacksonDatabindTypeTypeBindings;
@class ComFasterxmlJacksonDatabindTypeTypeModifier;
@class ComFasterxmlJacksonDatabindTypeTypeParser;
@class ComFasterxmlJacksonDatabindUtilLRUMap;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangClassLoader;
@protocol JavaLangReflectGenericArrayType;
@protocol JavaLangReflectParameterizedType;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;
@protocol JavaLangReflectWildcardType;

/*!
 @brief Class used for creating concrete <code>JavaType</code> instances,
  given various inputs.
 <p>
  Instances of this class are accessible using <code>com.fasterxml.jackson.databind.ObjectMapper</code>
  as well as many objects it constructs (like 
 <code>com.fasterxml.jackson.databind.DeserializationConfig</code> and 
 <code>com.fasterxml.jackson.databind.SerializationConfig</code>)),
  but usually those objects also 
  expose convenience methods (<code>constructType</code>).
  So, you can do for example:
 @code

    JavaType stringType = mapper.constructType(String.class);
 
@endcode
  However, more advanced methods are only exposed by factory so that you
  may need to use:
 @code

    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);
 
@endcode
 */
@interface ComFasterxmlJacksonDatabindTypeTypeFactory : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief Since type resolution can be expensive (specifically when resolving
  actual generic types), we will use small cache to avoid repetitive
  resolution of core types
   */
  ComFasterxmlJacksonDatabindUtilLRUMap *_typeCache_;
  /*!
   @brief Registered <code>TypeModifier</code>s: objects that can change details
  of <code>JavaType</code> instances factory constructs.
   */
  IOSObjectArray *_modifiers_;
  ComFasterxmlJacksonDatabindTypeTypeParser *_parser_;
  /*!
   @brief ClassLoader used by this factory [databind#624].
   */
  JavaLangClassLoader *_classLoader_;
}

#pragma mark Public

/*!
 @brief Method that will clear up any cached type definitions that may
  be cached by this <code>TypeFactory</code> instance.
 This method should not be commonly used, that is, only use it
  if you know there is a problem with retention of type definitions;
  the most likely (and currently only known) problem is retention
  of <code>Class</code> instances via <code>JavaType</code> reference.
 @since 2.4.1
 */
- (void)clearCache;

/*!
 @brief Method for constructing an <code>ArrayType</code>.
 <p>
  NOTE: type modifiers are NOT called on array type itself; but are called
  for element type (and other contained types)
 */
- (ComFasterxmlJacksonDatabindTypeArrayType *)constructArrayTypeWithIOSClass:(IOSClass *)elementType;

/*!
 @brief Method for constructing an <code>ArrayType</code>.
 <p>
  NOTE: type modifiers are NOT called on array type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeArrayType *)constructArrayTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)elementType;

/*!
 @brief Method for constructing a <code>CollectionLikeType</code>.
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionLikeType *)constructCollectionLikeTypeWithIOSClass:(IOSClass *)collectionClass
                                                                                  withIOSClass:(IOSClass *)elementClass;

/*!
 @brief Method for constructing a <code>CollectionLikeType</code>.
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionLikeType *)constructCollectionLikeTypeWithIOSClass:(IOSClass *)collectionClass
                                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)elementType;

/*!
 @brief Method for constructing a <code>CollectionType</code>.
 <p>
  NOTE: type modifiers are NOT called on Collection type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionType *)constructCollectionTypeWithIOSClass:(IOSClass *)collectionClass
                                                                          withIOSClass:(IOSClass *)elementClass;

/*!
 @brief Method for constructing a <code>CollectionType</code>.
 <p>
  NOTE: type modifiers are NOT called on Collection type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionType *)constructCollectionTypeWithIOSClass:(IOSClass *)collectionClass
                                               withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)elementType;

/*!
 @brief Factory method for constructing a <code>JavaType</code> out of its canonical
  representation (see <code>JavaType.toCanonical()</code>).
 @param canonical Canonical string representation of a type
 @throw IllegalArgumentExceptionIf canonical representation is malformed,
    or class that type represents (including its generic parameters) is
    not found
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructFromCanonicalWithNSString:(NSString *)canonical;

/*!
 @brief Method similar to <code>constructSpecializedType</code>, but that creates a
  less-specific type of given type.Usually this is as simple as simply
  finding super-type with type erasure of <code>superClass</code>, but
  there may be need for some additional work-arounds.
 @param superClass
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructGeneralizedTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                            withIOSClass:(IOSClass *)superClass;

/*!
 @brief Method for constructing a <code>MapLikeType</code> instance
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeMapLikeType *)constructMapLikeTypeWithIOSClass:(IOSClass *)mapClass
                                                                    withIOSClass:(IOSClass *)keyClass
                                                                    withIOSClass:(IOSClass *)valueClass;

/*!
 @brief Method for constructing a <code>MapLikeType</code> instance
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeMapLikeType *)constructMapLikeTypeWithIOSClass:(IOSClass *)mapClass
                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method for constructing a <code>MapType</code> instance
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeMapType *)constructMapTypeWithIOSClass:(IOSClass *)mapClass
                                                            withIOSClass:(IOSClass *)keyClass
                                                            withIOSClass:(IOSClass *)valueClass;

/*!
 @brief Method for constructing a <code>MapType</code> instance
 <p>
  NOTE: type modifiers are NOT called on constructed type itself; but are called
  for contained types.
 */
- (ComFasterxmlJacksonDatabindTypeMapType *)constructMapTypeWithIOSClass:(IOSClass *)mapClass
                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Factory method for constructing <code>JavaType</code> that
  represents a parameterized type.For example, to represent
  type <code>List&lt;Set&lt;Integer>></code>, you could
  call
 @code

   JavaType inner = TypeFactory.constructParametricType(Set.class, Set.class, Integer.class);
   return TypeFactory.constructParametricType(ArrayList.class, List.class, inner);
 
@endcode
 <p>
  The reason for first two arguments to be separate is that parameterization may
  apply to a super-type.
 For example, if generic type was instead to be
  constructed for <code>ArrayList&lt;Integer></code>, the usual call would be:
 @code

   TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class);
 
@endcode
  since parameterization is applied to <code>java.util.List</code>.
  In most cases distinction does not matter, but there are types where it does;
  one such example is parameterization of types that implement <code>java.util.Iterator</code>.
 <p>
  NOTE: type modifiers are NOT called on constructed type.
 @param parametrized Actual full type
 @param parameterClasses Type parameters to apply
 @since 2.5 NOTE: was briefly deprecated for 2.6
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructParametricTypeWithIOSClass:(IOSClass *)parametrized
                                                           withIOSClassArray:(IOSObjectArray *)parameterClasses;

/*!
 @brief Factory method for constructing <code>JavaType</code> that
  represents a parameterized type.For example, to represent
  type <code>List&lt;Set&lt;Integer>></code>, you could
  call
 @code

   JavaType inner = TypeFactory.constructParametricType(Set.class, Set.class, Integer.class);
   return TypeFactory.constructParametricType(ArrayList.class, List.class, inner);
 
@endcode
 <p>
  The reason for first two arguments to be separate is that parameterization may
  apply to a super-type.
 For example, if generic type was instead to be
  constructed for <code>ArrayList&lt;Integer></code>, the usual call would be:
 @code

   TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class);
 
@endcode
  since parameterization is applied to <code>java.util.List</code>.
  In most cases distinction does not matter, but there are types where it does;
  one such example is parameterization of types that implement <code>java.util.Iterator</code>.
 <p>
  NOTE: type modifiers are NOT called on constructed type.
 @param rawType Actual type-erased type
 @param parameterTypes Type parameters to apply
 @since 2.5 NOTE: was briefly deprecated for 2.6
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructParametricTypeWithIOSClass:(IOSClass *)rawType
                                withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)parameterTypes;

/*!
 @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructParametrizedTypeWithIOSClass:(IOSClass *)parametrized
                                                                  withIOSClass:(IOSClass *)parametersFor
                                                             withIOSClassArray:(IOSObjectArray *)parameterClasses;

/*!
 @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructParametrizedTypeWithIOSClass:(IOSClass *)parametrized
                                                                  withIOSClass:(IOSClass *)parametersFor
                                  withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)parameterTypes;

/*!
 @brief Method that can be used to construct "raw" Collection-like type; meaning that its
  parameterization is unknown.
 This is similar to using <code>Object.class</code> parameterization,
  and is equivalent to calling:
 @code

   typeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType());
 
@endcode
 <p>
  This method should only be used if parameterization is completely unavailable.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionLikeType *)constructRawCollectionLikeTypeWithIOSClass:(IOSClass *)collectionClass;

/*!
 @brief Method that can be used to construct "raw" Collection type; meaning that its
  parameterization is unknown.
 This is similar to using <code>Object.class</code> parameterization,
  and is equivalent to calling:
 @code

   typeFactory.constructCollectionType(collectionClass, typeFactory.unknownType());
 
@endcode
 <p>
  This method should only be used if parameterization is completely unavailable.
 */
- (ComFasterxmlJacksonDatabindTypeCollectionType *)constructRawCollectionTypeWithIOSClass:(IOSClass *)collectionClass;

/*!
 @brief Method that can be used to construct "raw" Map-like type; meaning that its
  parameterization is unknown.
 This is similar to using <code>Object.class</code> parameterization,
  and is equivalent to calling:
 @code

   typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());
 
@endcode
 <p>
  This method should only be used if parameterization is completely unavailable.
 */
- (ComFasterxmlJacksonDatabindTypeMapLikeType *)constructRawMapLikeTypeWithIOSClass:(IOSClass *)mapClass;

/*!
 @brief Method that can be used to construct "raw" Map type; meaning that its
  parameterization is unknown.
 This is similar to using <code>Object.class</code> parameterization,
  and is equivalent to calling:
 @code

   typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());
 
@endcode
 <p>
  This method should only be used if parameterization is completely unavailable.
 */
- (ComFasterxmlJacksonDatabindTypeMapType *)constructRawMapTypeWithIOSClass:(IOSClass *)mapClass;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructReferenceTypeWithIOSClass:(IOSClass *)rawType
                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)referredType;

/*!
 @brief Method for constructing a type instance with specified parameterization.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructSimpleTypeWithIOSClass:(IOSClass *)rawType
                                                            withIOSClass:(IOSClass *)parameterTarget
                            withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)parameterTypes;

/*!
 @brief Method for constructing a type instance with specified parameterization.
 <p>
  NOTE: was briefly deprecated for 2.6.
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructSimpleTypeWithIOSClass:(IOSClass *)rawType
                            withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)parameterTypes;

/*!
 @brief Factory method for creating a subtype of given base type, as defined
  by specified subclass; but retaining generic type information if any.
 Can be used, for example, to get equivalent of "HashMap&lt;String,Integer&gt;"
  from "Map&lt;String,Integer&gt;" by giving <code>HashMap.class</code>
  as subclass.
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructSpecializedTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                            withIOSClass:(IOSClass *)subclass;

- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                                 withIOSClass:(IOSClass *)contextClass;

/*!
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)contextType;

- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type
                              withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)typeRef;

/*!
 @brief Method used to access the globally shared instance, which has
  no custom configuration.Used by <code>ObjectMapper</code> to
  get the default factory when constructed.
 */
+ (ComFasterxmlJacksonDatabindTypeTypeFactory *)defaultInstance;

/*!
 @brief Low-level lookup method moved from <code>com.fasterxml.jackson.databind.util.ClassUtil</code>,
  to allow for overriding of lookup functionality in environments like OSGi.
 @since 2.6
 */
- (IOSClass *)findClassWithNSString:(NSString *)className_;

/*!
 */
- (IOSObjectArray *)findTypeParametersWithIOSClass:(IOSClass *)clz
                                      withIOSClass:(IOSClass *)expType;

/*!
 */
- (IOSObjectArray *)findTypeParametersWithIOSClass:(IOSClass *)clz
                                      withIOSClass:(IOSClass *)expType
   withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

/*!
 @brief Method that is to figure out actual type parameters that given
  class binds to generic types defined by given (generic)
  interface or class.
 This could mean, for example, trying to figure out
  key and value types for Map implementations.
 @param type Sub-type (leaf type) that implements  <code> expType </code>
 */
- (IOSObjectArray *)findTypeParametersWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                 withIOSClass:(IOSClass *)expType;

- (JavaLangClassLoader *)getClassLoader;

/*!
 @brief Method that can be called to figure out more specific of two
  types (if they are related; that is, one implements or extends the
  other); or if not related, return the primary type.
 @param type1 Primary type to consider
 @param type2 Secondary type to consider
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJavaType *)moreSpecificTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type1
                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type2;

/*!
 @brief Static helper method that can be called to figure out type-erased
  call for given JDK type.It can be called statically since type resolution
  process can never change actual type-erased class; thereby static
  default instance is used for determination.
 */
+ (IOSClass *)rawClassWithJavaLangReflectType:(id<JavaLangReflectType>)t;

/*!
 @brief Method that use by core Databind functionality, and that should NOT be called
  by application code outside databind package.
 <p> 
  Unchecked here not only means that no checks are made as to whether given class
  might be non-simple type (like <code>CollectionType</code>) but also that most of supertype
  information is not gathered. This means that unless called on primitive types or 
 <code>java.lang.String</code>, results are probably not what you want to use.
 */
- (ComFasterxmlJacksonDatabindJavaType *)uncheckedSimpleTypeWithIOSClass:(IOSClass *)cls;

/*!
 @brief Method for constructing a marker type that indicates missing generic
  type information, which is handled same as simple type for 
 <code>java.lang.Object</code>.
 */
+ (ComFasterxmlJacksonDatabindJavaType *)unknownType;

/*!
 @brief Mutant factory method that will construct new <code>TypeFactory</code> with
  identical settings except for different cache; most likely one with
  bigger maximum size.
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindTypeTypeFactory *)withCacheWithComFasterxmlJacksonDatabindUtilLRUMap:(ComFasterxmlJacksonDatabindUtilLRUMap *)cache;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)withClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)withModifierWithComFasterxmlJacksonDatabindTypeTypeModifier:(ComFasterxmlJacksonDatabindTypeTypeModifier *)mod;

#pragma mark Protected

/*!
 @since 2.8
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindUtilLRUMap:(ComFasterxmlJacksonDatabindUtilLRUMap *)typeCache;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindUtilLRUMap:(ComFasterxmlJacksonDatabindUtilLRUMap *)typeCache
                          withComFasterxmlJacksonDatabindTypeTypeParser:(ComFasterxmlJacksonDatabindTypeTypeParser *)p
                   withComFasterxmlJacksonDatabindTypeTypeModifierArray:(IOSObjectArray *)mods
                                                withJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

/*!
 @brief Factory method to call when no special <code>JavaType</code> is needed,
  no generic parameters are passed.Default implementation may check
  pre-constructed values for "well-known" types, but if none found
  will simply call <code>_newSimpleType</code>
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)_constructSimpleWithIOSClass:(IOSClass *)raw
                      withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                              withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
                         withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (IOSClass *)_findPrimitiveWithNSString:(NSString *)className_;

/*!
 @brief Helper method called to see if requested, non-generic-parameterized
  type is one of common, "well-known" types, instances of which are
  pre-constructed and do not need dynamic caching.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)_findWellKnownSimpleWithIOSClass:(IOSClass *)clz;

/*!
 @brief Factory method that can be used if type information is passed
  as Java typing returned from <code>getGenericXxx</code> methods
  (usually for a return or argument type).
 */
- (ComFasterxmlJacksonDatabindJavaType *)_fromAnyWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                       withJavaLangReflectType:(id<JavaLangReflectType>)type
                                               withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

- (ComFasterxmlJacksonDatabindJavaType *)_fromArrayTypeWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                 withJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)type
                                                     withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

/*!
 @param bindings Mapping of formal parameter declarations (for generic    types) into actual types
 */
- (ComFasterxmlJacksonDatabindJavaType *)_fromClassWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                                    withIOSClass:(IOSClass *)rawType
                                                 withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

/*!
 @brief This method deals with parameterized types, that is,
  first class generic classes.
 */
- (ComFasterxmlJacksonDatabindJavaType *)_fromParamTypeWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)ptype
                                                     withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)parentBindings;

- (ComFasterxmlJacksonDatabindJavaType *)_fromVariableWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                    withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var
                                                    withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

/*!
 @brief Helper class used to check whether exact class for which type is being constructed
  is one of well-known base interfaces or classes that indicates alternate 
 <code>JavaType</code> implementation.
 */
- (ComFasterxmlJacksonDatabindJavaType *)_fromWellKnownClassWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                                             withIOSClass:(IOSClass *)rawType
                                                          withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
                                                             withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (ComFasterxmlJacksonDatabindJavaType *)_fromWellKnownInterfaceWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                                                 withIOSClass:(IOSClass *)rawType
                                                              withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
                                                                 withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (ComFasterxmlJacksonDatabindJavaType *)_fromWildcardWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                    withJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)type
                                                    withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings;

/*!
 @brief Factory method that is to create a new <code>SimpleType</code> with no
  checks whatsoever.Default implementation calls the single argument
  constructor of <code>SimpleType</code>.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)_newSimpleTypeWithIOSClass:(IOSClass *)raw
                    withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                            withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
                       withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonDatabindJavaType *)_resolveSuperClassWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                                            withIOSClass:(IOSClass *)rawType
                                                         withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)parentBindings;

- (IOSObjectArray *)_resolveSuperInterfacesWithComFasterxmlJacksonDatabindTypeClassStack:(ComFasterxmlJacksonDatabindTypeClassStack *)context
                                                                            withIOSClass:(IOSClass *)rawType
                                         withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)parentBindings;

- (ComFasterxmlJacksonDatabindJavaType *)_unknownType;

- (IOSClass *)classForNameWithNSString:(NSString *)name;

- (IOSClass *)classForNameWithNSString:(NSString *)name
                           withBoolean:(jboolean)initialize_
               withJavaLangClassLoader:(JavaLangClassLoader *)loader;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindTypeTypeFactory)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeTypeFactory, _typeCache_, ComFasterxmlJacksonDatabindUtilLRUMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeTypeFactory, _modifiers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeTypeFactory, _parser_, ComFasterxmlJacksonDatabindTypeTypeParser *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeTypeFactory, _classLoader_, JavaLangClassLoader *)

/*!
 @brief Globally shared singleton.Not accessed directly; non-core
  code should use per-ObjectMapper instance (via configuration objects).
 Core Jackson code uses <code>defaultInstance</code> for accessing it.
 */
inline ComFasterxmlJacksonDatabindTypeTypeFactory *ComFasterxmlJacksonDatabindTypeTypeFactory_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *ComFasterxmlJacksonDatabindTypeTypeFactory_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, instance, ComFasterxmlJacksonDatabindTypeTypeFactory *)

inline ComFasterxmlJacksonDatabindTypeTypeBindings *ComFasterxmlJacksonDatabindTypeTypeFactory_get_EMPTY_BINDINGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeBindings *ComFasterxmlJacksonDatabindTypeTypeFactory_EMPTY_BINDINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, EMPTY_BINDINGS, ComFasterxmlJacksonDatabindTypeTypeBindings *)

inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_BOOL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_BOOL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_BOOL, ComFasterxmlJacksonDatabindTypeSimpleType *)

inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_INT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_INT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_INT, ComFasterxmlJacksonDatabindTypeSimpleType *)

inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_LONG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_LONG, ComFasterxmlJacksonDatabindTypeSimpleType *)

inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_STRING, ComFasterxmlJacksonDatabindTypeSimpleType *)

inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_OBJECT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_OBJECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_OBJECT, ComFasterxmlJacksonDatabindTypeSimpleType *)

/*!
 @brief Cache <code>Comparable</code> because it is both parameteric (relatively costly to
  resolve) and mostly useless (no special handling), better handle directly
 @since 2.7
 */
inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_COMPARABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_COMPARABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_COMPARABLE, ComFasterxmlJacksonDatabindTypeSimpleType *)

/*!
 @brief Cache <code>Enum</code> because it is parametric AND self-referential (costly to
  resolve) and useless in itself (no special handling).
 @since 2.7
 */
inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_ENUM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_ENUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_ENUM, ComFasterxmlJacksonDatabindTypeSimpleType *)

/*!
 @brief Cache <code>Class</code> because it is nominally parametric, but has no really
  useful information.
 @since 2.7
 */
inline ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_get_CORE_TYPE_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeTypeFactory_CORE_TYPE_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeFactory, CORE_TYPE_CLASS, ComFasterxmlJacksonDatabindTypeSimpleType *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_(ComFasterxmlJacksonDatabindTypeTypeFactory *self, ComFasterxmlJacksonDatabindUtilLRUMap *typeCache);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *new_ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_(ComFasterxmlJacksonDatabindUtilLRUMap *typeCache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *create_ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_(ComFasterxmlJacksonDatabindUtilLRUMap *typeCache);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_withComFasterxmlJacksonDatabindTypeTypeParser_withComFasterxmlJacksonDatabindTypeTypeModifierArray_withJavaLangClassLoader_(ComFasterxmlJacksonDatabindTypeTypeFactory *self, ComFasterxmlJacksonDatabindUtilLRUMap *typeCache, ComFasterxmlJacksonDatabindTypeTypeParser *p, IOSObjectArray *mods, JavaLangClassLoader *classLoader);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *new_ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_withComFasterxmlJacksonDatabindTypeTypeParser_withComFasterxmlJacksonDatabindTypeTypeModifierArray_withJavaLangClassLoader_(ComFasterxmlJacksonDatabindUtilLRUMap *typeCache, ComFasterxmlJacksonDatabindTypeTypeParser *p, IOSObjectArray *mods, JavaLangClassLoader *classLoader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *create_ComFasterxmlJacksonDatabindTypeTypeFactory_initWithComFasterxmlJacksonDatabindUtilLRUMap_withComFasterxmlJacksonDatabindTypeTypeParser_withComFasterxmlJacksonDatabindTypeTypeModifierArray_withJavaLangClassLoader_(ComFasterxmlJacksonDatabindUtilLRUMap *typeCache, ComFasterxmlJacksonDatabindTypeTypeParser *p, IOSObjectArray *mods, JavaLangClassLoader *classLoader);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeTypeFactory *ComFasterxmlJacksonDatabindTypeTypeFactory_defaultInstance(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindTypeTypeFactory_unknownType(void);

FOUNDATION_EXPORT IOSClass *ComFasterxmlJacksonDatabindTypeTypeFactory_rawClassWithJavaLangReflectType_(id<JavaLangReflectType> t);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindTypeTypeFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeFactory")
