//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationFeature")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserializationFeature
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationFeature 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationFeature 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserializationFeature

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserializationFeature_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationFeature || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserializationFeature))
#define ComFasterxmlJacksonDatabindDeserializationFeature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#define INCLUDE_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#include "com/fasterxml/jackson/databind/cfg/ConfigFeature.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindDeserializationFeature_Enum) {
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_USE_BIG_DECIMAL_FOR_FLOATS = 0,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_USE_BIG_INTEGER_FOR_INTS = 1,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_USE_LONG_FOR_INTS = 2,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_USE_JAVA_ARRAY_FOR_JSON_ARRAY = 3,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_UNKNOWN_PROPERTIES = 4,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_NULL_FOR_PRIMITIVES = 5,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_NUMBERS_FOR_ENUMS = 6,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_INVALID_SUBTYPE = 7,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_READING_DUP_TREE_KEY = 8,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_IGNORED_PROPERTIES = 9,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_UNRESOLVED_OBJECT_IDS = 10,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_MISSING_CREATOR_PROPERTIES = 11,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_NULL_CREATOR_PROPERTIES = 12,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY = 13,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_FAIL_ON_TRAILING_TOKENS = 14,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_WRAP_EXCEPTIONS = 15,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_ACCEPT_SINGLE_VALUE_AS_ARRAY = 16,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_UNWRAP_SINGLE_VALUE_ARRAYS = 17,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_UNWRAP_ROOT_VALUE = 18,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_ACCEPT_EMPTY_STRING_AS_NULL_OBJECT = 19,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT = 20,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_ACCEPT_FLOAT_AS_INT = 21,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_READ_ENUMS_USING_TO_STRING = 22,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_READ_UNKNOWN_ENUM_VALUES_AS_NULL = 23,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE = 24,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_READ_DATE_TIMESTAMPS_AS_NANOSECONDS = 25,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_ADJUST_DATES_TO_CONTEXT_TIME_ZONE = 26,
  ComFasterxmlJacksonDatabindDeserializationFeature_Enum_EAGER_DESERIALIZER_FETCH = 27,
};

/*!
 @brief Enumeration that defines simple on/off features that affect
  the way Java objects are deserialized from JSON
 <p>
  Note that features can be set both through 
 <code>ObjectMapper</code> (as sort of defaults) and through 
 <code>ObjectReader</code>.
 In first case these defaults must follow "config-then-use" patterns
  (i.e. defined once, not changed afterwards); all per-call
  changes must be done using <code>ObjectReader</code>.
 <p>
  Note that features that do not indicate version of inclusion
  were available in Jackson 2.0 (or earlier); only later additions
  indicate version of inclusion.
 */
@interface ComFasterxmlJacksonDatabindDeserializationFeature : JavaLangEnum < ComFasterxmlJacksonDatabindCfgConfigFeature >

#pragma mark Public

- (jboolean)enabledByDefault;

- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonDatabindDeserializationFeature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindDeserializationFeature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_values_[];

/*!
 @brief Feature that determines whether JSON floating point numbers
  are to be deserialized into <code>java.math.BigDecimal</code>s
  if only generic type description (either <code>Object</code> or 
 <code>Number</code>, or within untyped <code>java.util.Map</code>
  or <code>java.util.Collection</code> context) is available.
 If enabled such values will be deserialized as <code>java.math.BigDecimal</code>s;
  if disabled, will be deserialized as <code>Double</code>s.
  <p>
  Feature is disabled by default, meaning that "untyped" floating
  point numbers will by default be deserialized as <code>Double</code>s
  (choice is for performance reason -- BigDecimals are slower than
  Doubles).
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_USE_BIG_DECIMAL_FOR_FLOATS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, USE_BIG_DECIMAL_FOR_FLOATS)

/*!
 @brief Feature that determines whether JSON integral (non-floating-point)
  numbers are to be deserialized into <code>java.math.BigInteger</code>s
  if only generic type description (either <code>Object</code> or 
 <code>Number</code>, or within untyped <code>java.util.Map</code>
  or <code>java.util.Collection</code> context) is available.
 If enabled such values will be deserialized as 
 <code>java.math.BigInteger</code>s;
  if disabled, will be deserialized as "smallest" available type,
  which is either <code>Integer</code>, <code>Long</code> or 
 <code>java.math.BigInteger</code>, depending on number of digits. 
 <p>
  Feature is disabled by default, meaning that "untyped" integral
  numbers will by default be deserialized using whatever
  is the most compact integral type, to optimize efficiency.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_USE_BIG_INTEGER_FOR_INTS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, USE_BIG_INTEGER_FOR_INTS)

/*!
 @brief Feature that determines how "small" JSON integral (non-floating-point)
  numbers -- ones that fit in 32-bit signed integer (`int`) -- are bound
  when target type is loosely typed as <code>Object</code> or <code>Number</code>
  (or within untyped <code>java.util.Map</code> or <code>java.util.Collection</code> context).
 If enabled, such values will be deserialized as <code>java.lang.Long</code>;
  if disabled, they will be deserialized as "smallest" available type, 
 <code>Integer</code>.
  In addition, if enabled, trying to bind values that do not fit in <code>java.lang.Long</code>
  will throw a <code>com.fasterxml.jackson.core.JsonProcessingException</code>.
 <p>
  Note: if <code>USE_BIG_INTEGER_FOR_INTS</code> is enabled, it has precedence
  over this setting, forcing use of <code>java.math.BigInteger</code> for all
  integral values.
 <p>
  Feature is disabled by default, meaning that "untyped" integral
  numbers will by default be deserialized using <code>java.lang.Integer</code>
  if value fits.
 @since 2.6
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_USE_LONG_FOR_INTS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, USE_LONG_FOR_INTS)

/*!
 @brief Feature that determines whether JSON Array is mapped to 
 <code>Object[]</code> or <code>List&lt;Object></code> when binding
  "untyped" objects (ones with nominal type of <code>java.lang.Object</code>).
 If true, binds as <code>Object[]</code>; if false, as <code>List&lt;Object></code>.
 <p>
  Feature is disabled by default, meaning that JSON arrays are bound as 
 <code>java.util.List</code>s.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_USE_JAVA_ARRAY_FOR_JSON_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, USE_JAVA_ARRAY_FOR_JSON_ARRAY)

/*!
 @brief Feature that determines whether encountering of unknown
  properties (ones that do not map to a property, and there is
  no "any setter" or handler that can handle it)
  should result in a failure (by throwing a 
 <code>JsonMappingException</code>) or not.
 This setting only takes effect after all other handling
  methods for unknown properties have been tried, and
  property remains unhandled.
 <p>
  Feature is enabled by default (meaning that a 
 <code>JsonMappingException</code> will be thrown if an unknown property
  is encountered).
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_UNKNOWN_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_UNKNOWN_PROPERTIES)

/*!
 @brief Feature that determines whether encountering of JSON null
  is an error when deserializing into Java primitive types
  (like 'int' or 'double').If it is, a JsonProcessingException
  is thrown to indicate this; if not, default value is used
  (0 for 'int', 0.0 for double, same defaulting as what JVM uses).
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_NULL_FOR_PRIMITIVES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_NULL_FOR_PRIMITIVES)

/*!
 @brief Feature that determines whether JSON integer numbers are valid
  values to be used for deserializing Java enum values.
 If set to 'false' numbers are acceptable and are used to map to
  ordinal() of matching enumeration value; if 'true', numbers are
  not allowed and a <code>JsonMappingException</code> will be thrown.
  Latter behavior makes sense if there is concern that accidental
  mapping from integer values to enums might happen (and when enums
  are always serialized as JSON Strings)
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_NUMBERS_FOR_ENUMS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_NUMBERS_FOR_ENUMS)

/*!
 @brief Feature that determines what happens when type of a polymorphic
  value (indicated for example by <code>com.fasterxml.jackson.annotation.JsonTypeInfo</code>)
  cannot be found (missing) or resolved (invalid class name, unmappable id);
  if enabled, an exception ir thrown; if false, null value is used instead.
 <p>
  Feature is enabled by default so that exception is thrown for missing or invalid
  type information.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_INVALID_SUBTYPE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_INVALID_SUBTYPE)

/*!
 @brief Feature that determines what happens when reading JSON content into tree
  (<code>com.fasterxml.jackson.core.TreeNode</code>) and a duplicate key
  is encountered (property name that was already seen for the JSON Object).
 If enabled, <code>JsonMappingException</code> will be thrown; if disabled, no exception
  is thrown and the new (later) value overwrites the earlier value.
 <p>
  Note that this property does NOT affect other aspects of data-binding; that is,
  no detection is done with respect to POJO properties or <code>java.util.Map</code>
  keys. New features may be added to control additional cases.
 <p>
  Feature is disabled by default so that no exception is thrown.
 @since 2.3
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_READING_DUP_TREE_KEY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_READING_DUP_TREE_KEY)

/*!
 @brief Feature that determines what happens when a property that has been explicitly
  marked as ignorable is encountered in input: if feature is enabled, 
 <code>JsonMappingException</code> is thrown; if false, property is quietly skipped.
 <p>
  Feature is disabled by default so that no exception is thrown.
 @since 2.3
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_IGNORED_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_IGNORED_PROPERTIES)

/*!
 @brief Feature that determines what happens if an Object Id reference is encountered
  that does not refer to an actual Object with that id ("unresolved Object Id"):
  either an exception is thrown (<code>true</code>), or a null object is used
  instead (<code>false</code>).
 Note that if this is set to <code>false</code>, no further processing is done;
  specifically, if reference is defined via setter method, that method will NOT
  be called.
 <p>
  Feature is enabled by default, so that unknown Object Ids will result in an
  exception being thrown, at the end of deserialization.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_UNRESOLVED_OBJECT_IDS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_UNRESOLVED_OBJECT_IDS)

/*!
 @brief Feature that determines what happens if one or more Creator properties (properties
  bound to parameters of Creator method (constructor or static factory method))
  are missing value to bind to from content.
 If enabled, such missing values result in a <code>JsonMappingException</code> being
  thrown with information on the first one (by index) of missing properties.
  If disabled, and if property is NOT marked as required,
  missing Creator properties are filled
  with <code>null values</code> provided by deserializer for the type of parameter
  (usually null for Object types, and default value for primitives; but redefinable
  via custom deserializers).
 <p>
  Note that having an injectable value counts as "not missing".
 <p>
  Feature is disabled by default, so that no exception is thrown for missing creator
  property values, unless they are explicitly marked as `required`.
 @since 2.6
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_MISSING_CREATOR_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_MISSING_CREATOR_PROPERTIES)

/*!
 @brief Feature that determines what happens if one or more Creator properties (properties
  bound to parameters of Creator method (constructor or static factory method))
  are bound to null values - either from the JSON or as a default value.This
  is useful if you want to avoid nulls in your codebase, and particularly useful
  if you are using Java or Scala optionals for non-mandatory fields.
 Feature is disabled by default, so that no exception is thrown for missing creator
  property values, unless they are explicitly marked as `required`.
 @since 2.8
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_NULL_CREATOR_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_NULL_CREATOR_PROPERTIES)

/*!
 @brief Feature that determines what happens when a property annotated with 
 <code>com.fasterxml.jackson.annotation.JsonTypeInfo.As</code> is missing,
  but associated type id is available.If enabled, <code>JsonMappingException</code> is always
  thrown when property value is missing (if type id does exist);
  if disabled, exception is only thrown if property is marked as `required`.
 <p>
  Feature is enabled by default, so that exception is thrown when a subtype property is
  missing.
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)

/*!
 @brief Feature that determines behaviour for data-binding after binding the root value.
 If feature is enabled, one more call to 
 <code>com.fasterxml.jackson.core.JsonParser</code> is made to ensure that
  no more tokens are found (and if any is found, 
 <code>com.fasterxml.jackson.databind.exc.MismatchedInputException</code> is thrown); if
  disabled, no further checks are made.
 <p>
  Feature could alternatively be called <code>READ_FULL_STREAM</code>, since it
  effectively verifies that input stream contains only as much data as is needed
  for binding the full value, and nothing more (except for possible ignorable
  white space or comments, if supported by data format).
 <p>
  Feature is disabled by default (so that no check is made for possible trailing
  token(s)) for backwards compatibility reasons.
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_FAIL_ON_TRAILING_TOKENS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, FAIL_ON_TRAILING_TOKENS)

/*!
 @brief Feature that determines whether Jackson code should catch
  and wrap <code>Exception</code>s (but never <code>Error</code>s!)
 to add additional information about
  location (within input) of problem or not.If enabled,
  most exceptions will be caught and re-thrown (exception
  specifically being that <code>java.io.IOException</code>s may be passed
  as is, since they are declared as throwable); this can be
  convenient both in that all exceptions will be checked and
  declared, and so there is more contextual information.
  However, sometimes calling application may just want "raw"
  unchecked exceptions passed as is.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_WRAP_EXCEPTIONS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, WRAP_EXCEPTIONS)

/*!
 @brief Feature that determines whether it is acceptable to coerce non-array
  (in JSON) values to work with Java collection (arrays, java.util.Collection)
  types.If enabled, collection deserializers will try to handle non-array
  values as if they had "implicit" surrounding JSON array.
 This feature is meant to be used for compatibility/interoperability reasons,
  to work with packages (such as XML-to-JSON converters) that leave out JSON
  array in cases where there is just a single element in array.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_ACCEPT_SINGLE_VALUE_AS_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, ACCEPT_SINGLE_VALUE_AS_ARRAY)

/*!
 @brief Feature that determines whether it is acceptable to coerce single value array (in JSON)
  values to the corresponding value type.This is basically the opposite of the <code>ACCEPT_SINGLE_VALUE_AS_ARRAY</code>
  feature.
 If more than one value is found in the array, a JsonMappingException is thrown. 
 <p>
  
  Feature is disabled by default
 @since 2.4
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_UNWRAP_SINGLE_VALUE_ARRAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, UNWRAP_SINGLE_VALUE_ARRAYS)

/*!
 @brief Feature to allow "unwrapping" root-level JSON value, to match setting of 
 <code>SerializationFeature.WRAP_ROOT_VALUE</code> used for serialization.
 Will verify that the root JSON value is a JSON Object, and that it has
  a single property with expected root name. If not, a 
 <code>JsonMappingException</code> is thrown; otherwise value of the wrapped property
  will be deserialized as if it was the root value.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_UNWRAP_ROOT_VALUE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, UNWRAP_ROOT_VALUE)

/*!
 @brief Feature that can be enabled to allow JSON empty String
  value ("") to be bound as `null` for POJOs and other structured
  values (<code>java.util.Map</code>s, <code>java.util.Collection</code>s).
 If disabled, standard POJOs can only be bound from JSON `null` or
  JSON Object (standard meaning that no custom deserializers or
  constructors are defined; both of which can add support for other
  kinds of JSON values); if enabled, empty JSON String can be taken
  to be equivalent of JSON null.
 <p>
  NOTE: this does NOT apply to scalar values such as booleans and numbers;
  whether they can be coerced depends on 
 <code>MapperFeature.ALLOW_COERCION_OF_SCALARS</code>.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)

/*!
 @brief Feature that can be enabled to allow empty JSON Array
  value (that is, <code>[ ]</code>) to be bound to POJOs (and
  with 2.9, other values too) as `null`.
 If disabled, standard POJOs can only be bound from JSON `null` or
  JSON Object (standard meaning that no custom deserializers or
  constructors are defined; both of which can add support for other
  kinds of JSON values); if enabled, empty JSON Array will be taken
  to be equivalent of JSON null.
 <p>
  Feature is disabled by default.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)

/*!
 @brief Feature that determines whether coercion from JSON floating point
  number (anything with command (`.`) or exponent portion (`e` / `E'))
  to an expected integral number (`int`, `long`, `java.lang.Integer`, `java.lang.Long`,
  `java.math.BigDecimal`) is allowed or not.
 If enabled, coercion truncates value; if disabled, a <code>JsonMappingException</code>
  will be thrown.
 <p>
  Feature is enabled by default.
 @since 2.6
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_ACCEPT_FLOAT_AS_INT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, ACCEPT_FLOAT_AS_INT)

/*!
 @brief Feature that determines standard deserialization mechanism used for
  Enum values: if enabled, Enums are assumed to have been serialized  using
  return value of <code>Enum.toString()</code>;
  if disabled, return value of <code>Enum.name()</code> is assumed to have been used.
 <p>
  Note: this feature should usually have same value
  as <code>SerializationFeature.WRITE_ENUMS_USING_TO_STRING</code>.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_READ_ENUMS_USING_TO_STRING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, READ_ENUMS_USING_TO_STRING)

/*!
 @brief Feature that allows unknown Enum values to be parsed as null values.
 If disabled, unknown Enum values will throw exceptions.
 <p>
  Note that in some cases this will basically ignore unknown Enum values;
  this is the keys for keys of <code>java.util.EnumMap</code> and values
  of <code>java.util.EnumSet</code> (because nulls are not accepted in these
  cases).
 <p>
  Feature is disabled by default.
 @since 2.0
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_READ_UNKNOWN_ENUM_VALUES_AS_NULL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, READ_UNKNOWN_ENUM_VALUES_AS_NULL)

/*!
 @brief Feature that allows unknown Enum values to be ignored and a predefined value specified through 
 <code>@@JsonEnumDefaultValue</code> annotation.
 If disabled, unknown Enum values will throw exceptions.
  If enabled, but no predefined default Enum value is specified, an exception will be thrown as well.
 <p>
  Feature is disabled by default.
 @since 2.8
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)

/*!
 @brief Feature that controls whether numeric timestamp values are expected
  to be written using nanosecond timestamps (enabled) or not (disabled), 
 <b>if and only if</b> datatype supports such resolution.
 Only newer datatypes (such as Java8 Date/Time) support such resolution --
  older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --
  and this setting <b>has no effect</b> on such types.
 <p>
  If disabled, standard millisecond timestamps are assumed.
  This is the counterpart to <code>SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS</code>.
 <p>
  Feature is enabled by default, to support most accurate time values possible.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_READ_DATE_TIMESTAMPS_AS_NANOSECONDS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, READ_DATE_TIMESTAMPS_AS_NANOSECONDS)

/*!
 @brief Feature that specifies whether context provided <code>java.util.TimeZone</code>
  (<code>DeserializationContext.getTimeZone()</code> should be used to adjust Date/Time
  values on deserialization, even if value itself contains timezone information.
 If enabled, contextual <code>TimeZone</code> will essentially override any other
  TimeZone information; if disabled, it will only be used if value itself does not
  contain any TimeZone information.
 <p>
  Note that exact behavior depends on date/time types in question; and specifically
  JDK type of <code>java.util.Date</code> does NOT have in-built timezone information
  so this setting has no effect.
  Further, while <code>java.util.Calendar</code> does have this information basic
  JDK <code>java.text.SimpleDateFormat</code> is unable to retain parsed zone information,
  and as a result, <code>java.util.Calendar</code> will always get context timezone
  adjustment regardless of this setting.
 <p>
 <p>
  Taking above into account, this feature is supported only by extension modules for
  Joda and Java 8 date/tyime datatypes.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_ADJUST_DATES_TO_CONTEXT_TIME_ZONE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, ADJUST_DATES_TO_CONTEXT_TIME_ZONE)

/*!
 @brief Feature that determines whether <code>ObjectReader</code> should
  try to eagerly fetch necessary <code>JsonDeserializer</code> when
  possible.This improves performance in cases where similarly
  configured <code>ObjectReader</code> instance is used multiple
  times; and should not significantly affect single-use cases.
 <p>
  Note that there should not be any need to normally disable this
  feature: only consider that if there are actual perceived problems.
 <p>
  Feature is enabled by default.
 @since 2.1
 */
inline ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_get_EAGER_DESERIALIZER_FETCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindDeserializationFeature, EAGER_DESERIALIZER_FETCH)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindDeserializationFeature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserializationFeature *ComFasterxmlJacksonDatabindDeserializationFeature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserializationFeature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationFeature")
