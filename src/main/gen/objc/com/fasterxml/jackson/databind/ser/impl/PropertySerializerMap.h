//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap || defined(INCLUDE_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap))
#define ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;

/*!
 @brief Helper container used for resolving serializers for dynamic (possibly but not
  necessarily polymorphic) properties: properties whose type is not forced
  to use dynamic (declared) type and that are not final.
 If so, serializer to use can only be established once actual value type is known.
  Since this happens a lot unless static typing is forced (or types are final)
  this implementation is optimized for efficiency.
  Instances are immutable; new instances are created with factory methods: this
  is important to ensure correct multi-threaded access.
 */
@interface ComFasterxmlJacksonDatabindSerImplPropertySerializerMap : NSObject {
 @public
  /*!
   @brief Configuration setting that determines what happens when maximum
  size (currently 8) is reached: if true, will "start from beginning";
  if false, will simply stop adding new entries.
   @since 2.5
   */
  jboolean _resetWhenFull_;
}

#pragma mark Public

/*!
 @brief Method that can be used to 'register' a serializer that caller has resolved
  without help of this map.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)addSerializerWithIOSClass:(IOSClass *)type
                                                                withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)addSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                           withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.5
 */
+ (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)emptyForProperties;

/*!
 @since 2.5
 */
+ (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)emptyForRootValues;

/*!
 */
+ (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)emptyMap;

/*!
 @brief Method called if initial lookup fails, when looking for a key
  serializer (possible attached indirectly to a property)
  Will both find serializer
  and construct new map instance if warranted, and return both.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddKeySerializerWithIOSClass:(IOSClass *)type
                                                                      withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

/*!
 @brief Method called if initial lookup fails, when looking for a primary
  serializer (one that is directly attached to a property).
 Will both find serializer
  and construct new map instance if warranted, and return both.
 @since 2.3
 @throw JsonMappingException
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddPrimarySerializerWithIOSClass:(IOSClass *)type
                                                                          withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddPrimarySerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                                     withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                                           withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

/*!
 @brief Method called if initial lookup fails, when looking for a root value
  serializer: one that is not directly attached to a property, but needs to
  have <code>com.fasterxml.jackson.databind.jsontype.TypeSerializer</code> wrapped
  around it.Will both find the serializer
  and construct new map instance if warranted, and return both.
 @since 2.5
 @throw JsonMappingException
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddRootValueSerializerWithIOSClass:(IOSClass *)type
                                                                            withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddRootValueSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                                       withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called if initial lookup fails, when looking for a non-primary
  serializer (one that is not directly attached to a property).
 Will both find serializer
  and construct new map instance if warranted, and return both.
 @since 2.3
 @throw JsonMappingException
 */
- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddSecondarySerializerWithIOSClass:(IOSClass *)type
                                                                            withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                  withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *)findAndAddSecondarySerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                                       withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                                                             withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)newWithWithIOSClass:(IOSClass *)type
                                   withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Main lookup method.Takes a "raw" type since usage is always from
  place where parameterization is fixed such that there cannot be
  type-parametric variations.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)serializerForWithIOSClass:(IOSClass *)type;

#pragma mark Protected

/*!
 @since 2.5
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)resetWhenFull;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)base;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_initWithBoolean_(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *self, jboolean resetWhenFull);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_initWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap_(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *self, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *base);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_emptyMap(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_emptyForProperties(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_emptyForRootValues(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap || defined(INCLUDE_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult))
#define ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult_

@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;

/*!
 @brief Value class used for returning tuple that has both serializer
  that was retrieved and new map instance
 */
@interface ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult : NSObject {
 @public
  ComFasterxmlJacksonDatabindJsonSerializer *serializer_;
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *map_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer
                withComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult, serializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult, map_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult_initWithComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindSerImplPropertySerializerMap_(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *self, ComFasterxmlJacksonDatabindJsonSerializer *serializer, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *map);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *new_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult_initWithComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindSerImplPropertySerializerMap_(ComFasterxmlJacksonDatabindJsonSerializer *serializer, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult *create_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult_initWithComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindSerImplPropertySerializerMap_(ComFasterxmlJacksonDatabindJsonSerializer *serializer, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *map);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap_SerializerAndMapResult)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplPropertySerializerMap")
