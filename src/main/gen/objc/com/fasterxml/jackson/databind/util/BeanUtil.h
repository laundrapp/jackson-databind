//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilBeanUtil")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilBeanUtil
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilBeanUtil 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilBeanUtil 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilBeanUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilBeanUtil_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilBeanUtil || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilBeanUtil))
#define ComFasterxmlJacksonDatabindUtilBeanUtil_

@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod;
@class ComFasterxmlJacksonDatabindJavaType;

/*!
 @brief Helper class that contains functionality needed by both serialization
  and deserialization side.
 */
@interface ComFasterxmlJacksonDatabindUtilBeanUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Accessor used to find out "default value" to use for comparing values to
  serialize, to determine whether to exclude value from serialization with
  inclusion type of <code>com.fasterxml.jackson.annotation.JsonInclude.Include</code>.
 <p>
  Default logic is such that for primitives and wrapper types for primitives, expected
  defaults (0 for `int` and `java.lang.Integer`) are returned; for Strings, empty String,
  and for structured (Maps, Collections, arrays) and reference types, criteria 
 <code>com.fasterxml.jackson.annotation.JsonInclude.Include</code>
  is used.
 @since 2.7
 */
+ (id)getDefaultValueWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @since 2.5
 */
+ (NSString *)okNameForGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am
                                                                          withBoolean:(jboolean)stdNaming;

/*!
 @since 2.5
 */
+ (NSString *)okNameForIsGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am
                                                                           withNSString:(NSString *)name
                                                                            withBoolean:(jboolean)stdNaming;

/*!
 @since 2.5
 */
+ (NSString *)okNameForMutatorWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am
                                                                          withNSString:(NSString *)prefix
                                                                           withBoolean:(jboolean)stdNaming;

/*!
 @since 2.5
 */
+ (NSString *)okNameForRegularGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am
                                                                                withNSString:(NSString *)name
                                                                                 withBoolean:(jboolean)stdNaming;

/*!
 @since 2.5
 */
+ (NSString *)okNameForSetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am
                                                                          withBoolean:(jboolean)stdNaming;

#pragma mark Protected

/*!
 @brief This method was added to address the need to weed out
  CGLib-injected "getCallbacks" method.
 At this point caller has detected a potential getter method
  with name "getCallbacks" and we need to determine if it is
  indeed injectect by Cglib. We do this by verifying that the
  result type is "net.sf.cglib.proxy.Callback[]"
 */
+ (jboolean)isCglibGetCallbacksWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Another helper method to deal with Groovy's problematic metadata accessors
 */
+ (jboolean)isGroovyMetaClassGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Similar to <code>isCglibGetCallbacks</code>, need to suppress
  a cyclic reference.
 */
+ (jboolean)isGroovyMetaClassSetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Method called to figure out name of the property, given 
  corresponding suggested name based on a method or field name.
 @param basename Name of accessor/mutator method, not including prefix   ("get"/"is"/"set")
 */
+ (NSString *)legacyManglePropertyNameWithNSString:(NSString *)basename
                                           withInt:(jint)offset;

/*!
 @since 2.5
 */
+ (NSString *)stdManglePropertyNameWithNSString:(NSString *)basename
                                        withInt:(jint)offset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilBeanUtil)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilBeanUtil_init(ComFasterxmlJacksonDatabindUtilBeanUtil *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilBeanUtil *new_ComFasterxmlJacksonDatabindUtilBeanUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilBeanUtil *create_ComFasterxmlJacksonDatabindUtilBeanUtil_init(void);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_okNameForGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_withBoolean_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am, jboolean stdNaming);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_okNameForRegularGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_withNSString_withBoolean_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am, NSString *name, jboolean stdNaming);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_okNameForIsGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_withNSString_withBoolean_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am, NSString *name, jboolean stdNaming);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_okNameForSetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_withBoolean_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am, jboolean stdNaming);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_okNameForMutatorWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_withNSString_withBoolean_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am, NSString *prefix, jboolean stdNaming);

FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindUtilBeanUtil_getDefaultValueWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *type);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindUtilBeanUtil_isCglibGetCallbacksWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindUtilBeanUtil_isGroovyMetaClassSetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindUtilBeanUtil_isGroovyMetaClassGetterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *am);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_legacyManglePropertyNameWithNSString_withInt_(NSString *basename, jint offset);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilBeanUtil_stdManglePropertyNameWithNSString_withInt_(NSString *basename, jint offset);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilBeanUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilBeanUtil")
