//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdKeySerializers
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdKeySerializers

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdKeySerializers))
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_

@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class IOSClass;

@interface ComFasterxmlJacksonDatabindSerStdStdKeySerializers : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 */
+ (ComFasterxmlJacksonDatabindJsonSerializer *)getDefault;

/*!
 @brief Method called if no specified key serializer was located; will return a
  "default" key serializer.
 @since 2.7
 */
+ (ComFasterxmlJacksonDatabindJsonSerializer *)getFallbackKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                                             withIOSClass:(IOSClass *)rawKeyType;

/*!
 @param config Serialization configuration in use, may be needed in choosing     serializer to use
 @param rawKeyType Type of key values to serialize
 @param useDefault If no match is found, should we return fallback deserializer     (true), or null (false)?
 */
+ (ComFasterxmlJacksonDatabindJsonSerializer *)getStdKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                                        withIOSClass:(IOSClass *)rawKeyType
                                                                                                         withBoolean:(jboolean)useDefault;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers)

inline ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_get_DEFAULT_KEY_SERIALIZER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_DEFAULT_KEY_SERIALIZER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdStdKeySerializers, DEFAULT_KEY_SERIALIZER, ComFasterxmlJacksonDatabindJsonSerializer *)

inline ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_get_DEFAULT_STRING_SERIALIZER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_DEFAULT_STRING_SERIALIZER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdStdKeySerializers, DEFAULT_STRING_SERIALIZER, ComFasterxmlJacksonDatabindJsonSerializer *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdKeySerializers_init(ComFasterxmlJacksonDatabindSerStdStdKeySerializers *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_getStdKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig_withIOSClass_withBoolean_(ComFasterxmlJacksonDatabindSerializationConfig *config, IOSClass *rawKeyType, jboolean useDefault);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_getFallbackKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig_withIOSClass_(ComFasterxmlJacksonDatabindSerializationConfig *config, IOSClass *rawKeyType);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJsonSerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_getDefault(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default))
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;

/*!
 @brief This is a "chameleon" style multi-type key serializer for simple
  standard JDK types.
 <p>
  TODO: Should (but does not yet) support re-configuring format used for 
 <code>java.util.Date</code> and <code>java.util.Calendar</code> key serializers,
  as well as alternative configuration of Enum key serializers.
 */
@interface ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default : ComFasterxmlJacksonDatabindSerStdStdSerializer {
 @public
  jint _typeId_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)typeId
                         withIOSClass:(IOSClass *)type;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_DATE(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_DATE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_DATE, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_CALENDAR(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_CALENDAR 2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_CALENDAR, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_CLASS(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_CLASS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_CLASS, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_ENUM(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_ENUM 4
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_ENUM, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_INTEGER(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_INTEGER 5
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_INTEGER, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_LONG(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_LONG 6
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_LONG, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_BYTE_ARRAY(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_BYTE_ARRAY 7
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_BYTE_ARRAY, jint)

inline jint ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_get_TYPE_TO_STRING(void);
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_TYPE_TO_STRING 8
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default, TYPE_TO_STRING, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_initWithInt_withIOSClass_(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default *self, jint typeId, IOSClass *type);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default *new_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_initWithInt_withIOSClass_(jint typeId, IOSClass *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default *create_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default_initWithInt_withIOSClass_(jint typeId, IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Default)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic))
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;

/*!
 @brief Key serializer used when key type is not known statically, and actual key
  serializer needs to be dynamically located.
 */
@interface ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic : ComFasterxmlJacksonDatabindSerStdStdSerializer {
 @public
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *_dynamicSerializers_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

#pragma mark Protected

- (ComFasterxmlJacksonDatabindJsonSerializer *)_findAndAddDynamicWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)map
                                                                                                                withIOSClass:(IOSClass *)type
                                                                           withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

#pragma mark Package-Private

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic, _dynamicSerializers_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic_init(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic *new_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic *create_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_Dynamic)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer))
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;

/*!
 @brief Simple and fast key serializer when keys are Strings.
 */
@interface ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer

#pragma mark Public

- (instancetype __nonnull)init;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer_init(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer *new_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer *create_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_StringKeySerializer)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer))
#define ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindUtilEnumValues;
@class IOSClass;

/*!
 @brief Specialized instance to use for Enum keys, as per [databind#1322]
 @since 2.8
 */
@interface ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer {
 @public
  ComFasterxmlJacksonDatabindUtilEnumValues *_values_;
}

#pragma mark Public

+ (ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer *)constructWithIOSClass:(IOSClass *)enumType
                                                  withComFasterxmlJacksonDatabindUtilEnumValues:(ComFasterxmlJacksonDatabindUtilEnumValues *)enumValues;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers;

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)enumType
withComFasterxmlJacksonDatabindUtilEnumValues:(ComFasterxmlJacksonDatabindUtilEnumValues *)values;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer, _values_, ComFasterxmlJacksonDatabindUtilEnumValues *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_initWithIOSClass_withComFasterxmlJacksonDatabindUtilEnumValues_(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer *self, IOSClass *enumType, ComFasterxmlJacksonDatabindUtilEnumValues *values);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer *new_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_initWithIOSClass_withComFasterxmlJacksonDatabindUtilEnumValues_(IOSClass *enumType, ComFasterxmlJacksonDatabindUtilEnumValues *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer *create_ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_initWithIOSClass_withComFasterxmlJacksonDatabindUtilEnumValues_(IOSClass *enumType, ComFasterxmlJacksonDatabindUtilEnumValues *values);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer *ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer_constructWithIOSClass_withComFasterxmlJacksonDatabindUtilEnumValues_(IOSClass *enumType, ComFasterxmlJacksonDatabindUtilEnumValues *enumValues);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdKeySerializers_EnumKeySerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdKeySerializers")
