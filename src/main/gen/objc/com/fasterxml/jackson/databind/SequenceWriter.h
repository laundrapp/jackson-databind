//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSequenceWriter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSequenceWriter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSequenceWriter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSequenceWriter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSequenceWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSequenceWriter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSequenceWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindSequenceWriter))
#define ComFasterxmlJacksonDatabindSequenceWriter_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

#define RESTRICT_JavaIoFlushable 1
#define INCLUDE_JavaIoFlushable 1
#include "java/io/Flushable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindObjectWriter_Prefetch;
@class ComFasterxmlJacksonDatabindSerDefaultSerializerProvider;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;

/*!
 @brief Writer class similar to <code>ObjectWriter</code>, except that it can be used
  for writing sequences of values, not just a single value.
 The main use case is in writing very long sequences, or sequences where
  values are incrementally produced; cases where it would be impractical
  or at least inconvenient to construct a wrapper container around values
  (or where no JSON array is desired around values).
 <p>
  Differences from <code>ObjectWriter</code> include:
 <ul>
   <li>Instances of <code>SequenceWriter</code> are stateful, and not thread-safe:
     if sharing, external synchronization must be used.  
 <li>Explicit <code>close</code> is needed after all values have been written
      (<code>ObjectWriter</code> can auto-close after individual value writes)
 </ul>
 @since 2.5
 */
@interface ComFasterxmlJacksonDatabindSequenceWriter : NSObject < ComFasterxmlJacksonCoreVersioned, JavaIoCloseable, JavaIoFlushable > {
 @public
  ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *_provider_;
  ComFasterxmlJacksonDatabindSerializationConfig *_config_;
  ComFasterxmlJacksonCoreJsonGenerator *_generator_;
  ComFasterxmlJacksonDatabindJsonSerializer *_rootSerializer_;
  ComFasterxmlJacksonDatabindJsontypeTypeSerializer *_typeSerializer_;
  jboolean _closeGenerator_;
  jboolean _cfgFlush_;
  jboolean _cfgCloseCloseable_;
  /*!
   @brief If <code>_rootSerializer</code> is not defined (no root type
  was used for constructing <code>ObjectWriter</code>), we will
  use simple scheme for keeping track of serializers needed.
   Assumption is that
   */
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *_dynamicSerializers_;
  /*!
   @brief State flag for keeping track of need to write matching END_ARRAY,
  if a START_ARRAY was written during initialization
   */
  jboolean _openArray_;
  jboolean _closed_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)prov
                                                 withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                                              withBoolean:(jboolean)closeGenerator
                                     withComFasterxmlJacksonDatabindObjectWriter_Prefetch:(ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)prefetch;

- (void)close;

- (void)flush;

- (ComFasterxmlJacksonDatabindSequenceWriter *)init__WithBoolean:(jboolean)wrapInArray OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method that will return version information stored in and read from jar
  that contains this class.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

/*!
 @brief Method for writing given value into output, as part of sequence
  to write.If root type was specified for <code>ObjectWriter</code>,
  value must be of compatible type (same or subtype).
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeWithId:(id)value;

/*!
 @brief Method for writing given value into output, as part of sequence
  to write; further, full type (often generic, like <code>java.util.Map</code>
  is passed in case a new 
 <code>JsonSerializer</code> needs to be fetched to handle type 
  If root type was specified for <code>ObjectWriter</code>,
  value must be of compatible type (same or subtype).
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeWithId:(id)value
                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindSequenceWriter *)writeAllWithJavaUtilCollection:(id<JavaUtilCollection>)container;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeAllWithJavaLangIterable:(id<JavaLangIterable>)iterable;

- (ComFasterxmlJacksonDatabindSequenceWriter *)writeAllWithNSObjectArray:(IOSObjectArray *)value;

#pragma mark Protected

- (ComFasterxmlJacksonDatabindSequenceWriter *)_writeCloseableValueWithId:(id)value;

- (ComFasterxmlJacksonDatabindSequenceWriter *)_writeCloseableValueWithId:(id)value
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSequenceWriter)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _provider_, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _config_, ComFasterxmlJacksonDatabindSerializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _generator_, ComFasterxmlJacksonCoreJsonGenerator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _rootSerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _typeSerializer_, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSequenceWriter, _dynamicSerializers_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSequenceWriter_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonCoreJsonGenerator_withBoolean_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindSequenceWriter *self, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *prov, ComFasterxmlJacksonCoreJsonGenerator *gen, jboolean closeGenerator, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSequenceWriter *new_ComFasterxmlJacksonDatabindSequenceWriter_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonCoreJsonGenerator_withBoolean_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *prov, ComFasterxmlJacksonCoreJsonGenerator *gen, jboolean closeGenerator, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSequenceWriter *create_ComFasterxmlJacksonDatabindSequenceWriter_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonCoreJsonGenerator_withBoolean_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *prov, ComFasterxmlJacksonCoreJsonGenerator *gen, jboolean closeGenerator, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSequenceWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSequenceWriter")
