//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer
#ifdef INCLUDE_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std
#define INCLUDE_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer))
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_

#define RESTRICT_ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer 1
#include "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.h"

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class IOSClass;
@class IOSObjectArray;

/*!
 @brief Base class for simple deserializers that serialize values from String
  representation: this includes JSON Strings and other Scalar values that
  can be coerced into text, like Numbers and Booleans).
 Simple JSON String values are trimmed using <code>java.lang.String</code>.
  Partial deserializer implementation will try to first access current token as
  a String, calls <code>_deserialize(String,DeserializationContext)</code> and
  returns return value.
  If this does not work (current token not a simple scalar type), attempts
  are made so that:
 <ul>
  <li>Embedded values (<code>JsonToken.VALUE_EMBEDDED_OBJECT</code>) are returned as-is
     if they are of compatible type  
 </li>
  <li>Arrays may be "unwrapped" if (and only if) <code>DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS</code>
     is enabled, and array contains just a single scalar value that can be deserialized
     (for example, JSON Array with single JSON String element).  
 </li>
  </ul>
 <p>
  Special handling includes: 
 <ul>
  <li>Null values (<code>JsonToken.VALUE_NULL</code>) are handled by returning value
    returned by <code>JsonDeserializer.getNullValue(DeserializationContext)</code>: default
    implementation simply returns Java `null` but this may be overridden.  
 </li>
  <li>Empty String (after trimming) will result in <code>_deserializeFromEmptyString</code>
    getting called, and return value being returned as deserialization: default implementation
    simply returns `null`.  
 </li>
  </ul>
 */
@interface ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer : ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer

#pragma mark Public

- (id)deserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
 withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Factory method for trying to find a deserializer for one of supported
  types that have simple from-String serialization.
 */
+ (ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std *)findDeserializerWithIOSClass:(IOSClass *)rawType;

+ (IOSObjectArray *)types;

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)vc;

- (id)_deserializeWithNSString:(NSString *)value
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)_deserializeEmbeddedWithId:(id)ob
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)_deserializeFromEmptyString;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_types(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_initWithIOSClass_(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer *self, IOSClass *vc);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std *ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_findDeserializerWithIOSClass_(IOSClass *rawType);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer)

#endif

#if !defined (ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std))
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_

@class ComFasterxmlJacksonDatabindDeserializationContext;
@class IOSClass;

/*!
 @brief "Chameleon" deserializer that works on simple types that are deserialized
  from a simple String.
 @since 2.4
 */
@interface ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std : ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer {
 @public
  jint _kind_;
}

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)valueType
                                   withInt:(jint)kind;

- (id)_deserializeWithNSString:(NSString *)value
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)_deserializeFromEmptyString;

- (jint)_firstHyphenOrUnderscoreWithNSString:(NSString *)str;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_FILE(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_FILE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_FILE, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_URL(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_URL 2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_URL, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_URI(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_URI 3
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_URI, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_CLASS(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_CLASS 4
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_CLASS, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_JAVA_TYPE(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_JAVA_TYPE 5
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_JAVA_TYPE, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_CURRENCY(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_CURRENCY 6
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_CURRENCY, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_PATTERN(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_PATTERN 7
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_PATTERN, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_LOCALE(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_LOCALE 8
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_LOCALE, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_CHARSET(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_CHARSET 9
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_CHARSET, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_TIME_ZONE(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_TIME_ZONE 10
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_TIME_ZONE, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_INET_ADDRESS(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_INET_ADDRESS 11
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_INET_ADDRESS, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_INET_SOCKET_ADDRESS(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_INET_SOCKET_ADDRESS 12
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_INET_SOCKET_ADDRESS, jint)

inline jint ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_get_STD_STRING_BUILDER(void);
#define ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_STD_STRING_BUILDER 13
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std, STD_STRING_BUILDER, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_initWithIOSClass_withInt_(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std *self, IOSClass *valueType, jint kind);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std *new_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_initWithIOSClass_withInt_(IOSClass *valueType, jint kind) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std *create_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std_initWithIOSClass_withInt_(IOSClass *valueType, jint kind);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer_Std)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdFromStringDeserializer")
