//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyBuilder")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyBuilder
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyBuilder 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyBuilder 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerPropertyBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyBuilder || defined(INCLUDE_ComFasterxmlJacksonDatabindSerPropertyBuilder))
#define ComFasterxmlJacksonDatabindSerPropertyBuilder_

@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerBeanPropertyWriter;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class JavaLangException;
@protocol ComFasterxmlJacksonDatabindUtilAnnotations;

/*!
 @brief Helper class for <code>BeanSerializerFactory</code> that is used to
  construct <code>BeanPropertyWriter</code> instances.Can be sub-classed
  to change behavior.
 */
@interface ComFasterxmlJacksonDatabindSerPropertyBuilder : NSObject {
 @public
  ComFasterxmlJacksonDatabindSerializationConfig *_config_;
  ComFasterxmlJacksonDatabindBeanDescription *_beanDesc_;
  ComFasterxmlJacksonDatabindAnnotationIntrospector *_annotationIntrospector_;
  /*!
   @brief If a property has serialization inclusion value of 
 <code>com.fasterxml.jackson.annotation.JsonInclude.Include</code>,
  we may need to know the default value of the bean, to know if property value
  equals default one.
   <p>
  NOTE: only used if enclosing class defines NON_DEFAULT, but NOT if it is the
  global default OR per-property override.
   */
  id _defaultBean_;
  /*!
   @brief Default inclusion mode for properties of the POJO for which
  properties are collected; possibly overridden on
  per-property basis.Combines global inclusion defaults and
  per-type (annotation and type-override) inclusion overrides.
   */
  ComFasterxmlJacksonAnnotationJsonInclude_Value *_defaultInclusion_;
  /*!
   @brief Marker flag used to indicate that "real" default values are to be used
  for properties, as per per-type value inclusion of type <code>NON_DEFAULT</code>
   @since 2.8
   */
  jboolean _useRealPropertyDefaults_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                  withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (id<ComFasterxmlJacksonDatabindUtilAnnotations>)getClassAnnotations;

#pragma mark Protected

- (id)_throwWrappedWithJavaLangException:(JavaLangException *)e
                            withNSString:(NSString *)propName
                                  withId:(id)defaultBean;

/*!
 @param contentTypeSer Optional explicit type information serializer     to use for contained values (only used for properties that are
      of container type)
 */
- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)buildWriterWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                   withComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)propDef
                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)declaredType
                                                                     withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                                                             withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer
                                                             withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)contentTypeSer
                                                          withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)am
                                                                                                       withBoolean:(jboolean)defaultUseStaticTyping;

/*!
 @brief Method that will try to determine statically defined type of property
  being serialized, based on annotations (for overrides), and alternatively
  declared type (if static typing for serialization is enabled).
 If neither can be used (no annotations, dynamic typing), returns null.
 */
- (ComFasterxmlJacksonDatabindJavaType *)findSerializationTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                                                     withBoolean:(jboolean)useStaticTyping
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)declaredType;

- (id)getDefaultBean;

/*!
 */
- (id)getDefaultValueWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Accessor used to find out "default value" for given property, to use for
  comparing values to serialize, to determine whether to exclude value from serialization with
  inclusion type of <code>com.fasterxml.jackson.annotation.JsonInclude.Include</code>.
 This method is called when we specifically want to know default value within context
  of a POJO, when annotation is within containing class, and not for property or
  defined as global baseline.
 <p>
  Note that returning of pseudo-type 
 <code>com.fasterxml.jackson.annotation.JsonInclude.Include</code> requires special handling.
 @since 2.7
 */
- (id)getPropertyDefaultValueWithNSString:(NSString *)name
withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member
  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerPropertyBuilder)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerPropertyBuilder, _config_, ComFasterxmlJacksonDatabindSerializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerPropertyBuilder, _beanDesc_, ComFasterxmlJacksonDatabindBeanDescription *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerPropertyBuilder, _annotationIntrospector_, ComFasterxmlJacksonDatabindAnnotationIntrospector *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerPropertyBuilder, _defaultBean_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerPropertyBuilder, _defaultInclusion_, ComFasterxmlJacksonAnnotationJsonInclude_Value *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerPropertyBuilder_initWithComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindBeanDescription_(ComFasterxmlJacksonDatabindSerPropertyBuilder *self, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindBeanDescription *beanDesc);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerPropertyBuilder *new_ComFasterxmlJacksonDatabindSerPropertyBuilder_initWithComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindBeanDescription_(ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindBeanDescription *beanDesc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerPropertyBuilder *create_ComFasterxmlJacksonDatabindSerPropertyBuilder_initWithComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindBeanDescription_(ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindBeanDescription *beanDesc);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerPropertyBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyBuilder")
