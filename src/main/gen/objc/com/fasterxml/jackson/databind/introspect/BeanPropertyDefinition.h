//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition || defined(INCLUDE_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition))
#define ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_

#define RESTRICT_ComFasterxmlJacksonDatabindUtilNamed 1
#define INCLUDE_ComFasterxmlJacksonDatabindUtilNamed 1
#include "com/fasterxml/jackson/databind/util/Named.h"

@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedField;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedParameter;
@class ComFasterxmlJacksonDatabindIntrospectObjectIdInfo;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindPropertyMetadata;
@class ComFasterxmlJacksonDatabindPropertyName;
@class IOSClass;
@class IOSObjectArray;
@protocol JavaUtilIterator;

/*!
 @brief Simple value classes that contain definitions of properties,
  used during introspection of properties to use for
  serialization and deserialization purposes.
 These instances are created before actual <code>BeanProperty</code>
  instances are created, i.e. they are used earlier in the process
  flow, and are typically use to construct actual 
 <code>BeanProperty</code> instances.
 */
@interface ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition : NSObject < ComFasterxmlJacksonDatabindUtilNamed >

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)couldDeserialize;

- (jboolean)couldSerialize;

/*!
 @brief Method used to check if this property has specific inclusion override
  associated with it or not.
 It should NOT check for any default settings (global, per-type, or
  containing POJO settings)
 @since 2.5
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)findInclusion;

/*!
 @brief Method used to check whether this logical property indicates that
  value POJOs should be written using additional Object Identifier
  (or, when multiple references exist, all but first AS Object Identifier).
 */
- (ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)findObjectIdInfo;

/*!
 @since 2.9
 */
- (NSString *)findReferenceName;

/*!
 @brief Method used to find whether property is part of a bi-directional
  reference.
 */
- (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *)findReferenceType;

/*!
 @brief Method used to find View-inclusion definitions for the property.
 */
- (IOSObjectArray *)findViews;

/*!
 @brief Method used to find accessor (getter, field to access) to use for accessing
  value of the property.
 Null if no such member exists.
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)getAccessor;

- (ComFasterxmlJacksonDatabindIntrospectAnnotatedParameter *)getConstructorParameter;

/*!
 @brief Additional method that may be called instead of <code>getConstructorParameter()</code>
  to get access to all constructor parameters, not just the highest priority one.
 @since 2.5
 */
- (id<JavaUtilIterator>)getConstructorParameters;

- (ComFasterxmlJacksonDatabindIntrospectAnnotatedField *)getField;

- (ComFasterxmlJacksonDatabindPropertyName *)getFullName;

- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)getGetter;

/*!
 @brief Accessor that can be used to determine implicit name from underlying
  element(s) before possible renaming.This is the "internal"
  name derived from accessor ("x" from "getX"), and is not based on
  annotations or naming strategy.
 */
- (NSString *)getInternalName;

/*!
 @brief Method for accessing additional metadata.
 NOTE: will never return null, so de-referencing return value
  is safe.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindPropertyMetadata *)getMetadata;

/*!
 @brief Method used to find mutator (constructor parameter, setter, field) to use for
  changing value of the property.
 Null if no such member exists.
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)getMutator;

/*!
 @brief Accessor for name used for external representation (in JSON).
 */
- (NSString *)getName;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)getNonConstructorMutator;

/*!
 @brief Method used to find the property member (getter, setter, field) that has
  the highest precedence in current context (getter method when serializing,
  if available, and so forth), if any.
 <p>
  Note: abstract since 2.5
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)getPrimaryMember;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJavaType *)getPrimaryType;

/*!
 @since 2.9
 */
- (IOSClass *)getRawPrimaryType;

- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)getSetter;

/*!
 @brief Accessor for finding wrapper name to use for property (if any).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindPropertyName *)getWrapperName;

- (jboolean)hasConstructorParameter;

- (jboolean)hasField;

- (jboolean)hasGetter;

/*!
 @since 2.6
 */
- (jboolean)hasNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)name;

- (jboolean)hasSetter;

/*!
 @brief Accessor that can be called to check whether property was included
  due to an explicit marker (usually annotation), or just by naming
  convention.
 @return True if property was explicitly included (usually by having
    one of components being annotated); false if inclusion was purely
    due to naming or visibility definitions (that is, implicit)
 */
- (jboolean)isExplicitlyIncluded;

/*!
 @brief Accessor that can be called to check whether property name was
  due to an explicit marker (usually annotation), or just by naming
  convention or use of "use-default-name" marker (annotation).
 <p>
  Note that entries that return true from this method will always
  return true for <code>isExplicitlyIncluded()</code>, but not necessarily
  vice versa.
 @since 2.4
 */
- (jboolean)isExplicitlyNamed;

/*!
 @brief Method used to check if this property is expected to have a value;
  and if none found, should either be considered invalid (and most likely
  fail deserialization), or handled by other means (by providing default
  value)
 */
- (jboolean)isRequired;

/*!
 @brief Method used to check whether this logical property has a marker
  to indicate it should be used as the type id for polymorphic type
  handling.
 */
- (jboolean)isTypeId;

/*!
 @brief Method that can be used to create a definition with
  same settings as this one, but with different
  (external) name; that is, one for which 
 <code>getName()</code> would return <code>newName</code>.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)withNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)newName;

/*!
 @brief Alternate "mutant factory" that will only change simple name, but
  leave other optional parts (like namespace) as is.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)withSimpleNameWithNSString:(NSString *)newSimpleName;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition)

inline ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_get_EMPTY_INCLUDE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_EMPTY_INCLUDE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition, EMPTY_INCLUDE, ComFasterxmlJacksonAnnotationJsonInclude_Value *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_init(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition")
