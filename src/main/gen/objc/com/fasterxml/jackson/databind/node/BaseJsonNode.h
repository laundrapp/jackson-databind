//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindNodeBaseJsonNode")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindNodeBaseJsonNode
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindNodeBaseJsonNode 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindNodeBaseJsonNode 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindNodeBaseJsonNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindNodeBaseJsonNode_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindNodeBaseJsonNode || defined(INCLUDE_ComFasterxmlJacksonDatabindNodeBaseJsonNode))
#define ComFasterxmlJacksonDatabindNodeBaseJsonNode_

#define RESTRICT_ComFasterxmlJacksonDatabindJsonNode 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonNode 1
#include "com/fasterxml/jackson/databind/JsonNode.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonSerializable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable 1
#include "com/fasterxml/jackson/databind/JsonSerializable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_NumberType;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief Abstract base class common to all standard <code>JsonNode</code>
  implementations.
 The main addition here is that we declare that sub-classes must
  implement <code>JsonSerializable</code>.
  This simplifies object mapping aspects a bit, as no external serializers are needed.
 */
@interface ComFasterxmlJacksonDatabindNodeBaseJsonNode : ComFasterxmlJacksonDatabindJsonNode < ComFasterxmlJacksonDatabindJsonSerializable >

#pragma mark Public

/*!
 @brief Method that can be used for efficient type detection
  when using stream abstraction for traversing nodes.
 Will return the first <code>JsonToken</code> that equivalent
  stream event would produce (for most nodes there is just
  one token but for structured/container types multiple)
 */
- (ComFasterxmlJacksonCoreJsonToken *)asToken;

- (ComFasterxmlJacksonDatabindJsonNode *)findPathWithNSString:(NSString *)fieldName;

- (NSUInteger)hash;

/*!
 @brief Returns code that identifies type of underlying numeric
  value, if (and only if) node is a number node.
 */
- (ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType;

/*!
 @brief Method called to serialize node instances using given generator.
 */
- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Type information is needed, even if JsonNode instances are "plain" JSON,
  since they may be mixed with other types.
 */
- (void)serializeWithTypeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
            withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

- (ComFasterxmlJacksonCoreJsonParser *)traverse;

- (ComFasterxmlJacksonCoreJsonParser *)traverseWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec;

#pragma mark Protected

- (instancetype __nonnull)init;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindNodeBaseJsonNode)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindNodeBaseJsonNode_init(ComFasterxmlJacksonDatabindNodeBaseJsonNode *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindNodeBaseJsonNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindNodeBaseJsonNode")
