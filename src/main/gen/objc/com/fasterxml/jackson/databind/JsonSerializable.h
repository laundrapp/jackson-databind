//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsonSerializable
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsonSerializable
#ifdef INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable_Base
#define INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsonSerializable_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable || defined(INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable))
#define ComFasterxmlJacksonDatabindJsonSerializable_

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief Interface that can be implemented by objects that know how to
  serialize themselves to JSON, using <code>JsonGenerator</code>
  (and <code>SerializerProvider</code> if necessary).
 <p>
  Note that implementing this interface binds implementing object
  closely to Jackson API, and that it is often not necessary to do
  so -- if class is a bean, it can be serialized without
  implementing this interface.
 <p>
  Note that while it is possible to just directly implement <code>JsonSerializable</code>,
  actual implementations are strongly recommended to instead extend 
 <code>JsonSerializable.Base</code>.
 */
@protocol ComFasterxmlJacksonDatabindJsonSerializable < JavaObject >

/*!
 @brief Serialization method called when no additional type information is
  to be included in serialization.
 */
- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers;

/*!
 @brief Serialization method called when additional type information is
  expected to be included in serialization, for deserialization to use.
 <p>
  Usually implementation consists of a call to <code>TypeSerializer.writeTypePrefix</code>
  followed by serialization of contents,
  followed by a call to <code>TypeSerializer.writeTypeSuffix</code>).
  Details of the type id argument to pass depend on shape of JSON Object used
  (Array, Object or scalar like String/Number/Boolean).
 <p>
  Note that some types (most notably, "natural" types: String, Integer,
  Double and Boolean) never include type information.
 */
- (void)serializeWithTypeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers
            withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsonSerializable)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsonSerializable)

#endif

#if !defined (ComFasterxmlJacksonDatabindJsonSerializable_Base_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable || defined(INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable_Base))
#define ComFasterxmlJacksonDatabindJsonSerializable_Base_

@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief Base class with minimal implementation, as well as couple of extension methods
  that core Jackson databinding makes use of.
 Use of this base class is strongly recommended over directly implementing 
 <code>JsonSerializable</code>.
 @since 2.6
 */
@interface ComFasterxmlJacksonDatabindJsonSerializable_Base : NSObject < ComFasterxmlJacksonDatabindJsonSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method that may be called on instance to determine if it is considered
  "empty" for purposes of serialization filtering or not.
 */
- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsonSerializable_Base)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsonSerializable_Base_init(ComFasterxmlJacksonDatabindJsonSerializable_Base *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsonSerializable_Base)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsonSerializable")
