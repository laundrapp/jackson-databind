//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/ObjectBuffer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/util/LinkedNode.h"
#include "com/fasterxml/jackson/databind/util/ObjectBuffer.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/List.h"

@interface ComFasterxmlJacksonDatabindUtilObjectBuffer () {
 @public
  ComFasterxmlJacksonDatabindUtilLinkedNode *_head_;
  ComFasterxmlJacksonDatabindUtilLinkedNode *_tail_;
  /*!
   @brief Number of total buffered entries in this buffer, counting all instances
  within linked list formed by following <code>_head</code>.
   */
  jint _size_;
  /*!
   @brief Reusable Object array, stored here after buffer has been released having
  been used previously.
   */
  IOSObjectArray *_freeBuffer_;
}

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilObjectBuffer, _head_, ComFasterxmlJacksonDatabindUtilLinkedNode *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilObjectBuffer, _tail_, ComFasterxmlJacksonDatabindUtilLinkedNode *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilObjectBuffer, _freeBuffer_, IOSObjectArray *)

/*!
 @brief Also: let's expand by doubling up until 64k chunks (which is 16k entries for
  32-bit machines)
 */
inline jint ComFasterxmlJacksonDatabindUtilObjectBuffer_get_SMALL_CHUNK(void);
#define ComFasterxmlJacksonDatabindUtilObjectBuffer_SMALL_CHUNK 16384
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilObjectBuffer, SMALL_CHUNK, jint)

/*!
 @brief Let's limit maximum size of chunks we use; helps avoid excessive allocation
  overhead for huge data sets.
 For now, let's limit to quarter million entries, 1 meg chunks for 32-bit
  machines.
 */
inline jint ComFasterxmlJacksonDatabindUtilObjectBuffer_get_MAX_CHUNK(void);
#define ComFasterxmlJacksonDatabindUtilObjectBuffer_MAX_CHUNK 262144
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilObjectBuffer, MAX_CHUNK, jint)

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilObjectBuffer__copyToWithId_withInt_withNSObjectArray_withInt_(ComFasterxmlJacksonDatabindUtilObjectBuffer *self, id resultArray, jint totalSize, IOSObjectArray *lastChunk, jint lastChunkEntries);

@implementation ComFasterxmlJacksonDatabindUtilObjectBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindUtilObjectBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)resetAndStart {
  [self _reset];
  if (_freeBuffer_ == nil) {
    return (JreStrongAssignAndConsume(&_freeBuffer_, [IOSObjectArray newArrayWithLength:12 type:NSObject_class_()]));
  }
  return _freeBuffer_;
}

- (IOSObjectArray *)resetAndStartWithNSObjectArray:(IOSObjectArray *)base
                                           withInt:(jint)count {
  [self _reset];
  if ((_freeBuffer_ == nil) || (((IOSObjectArray *) nil_chk(_freeBuffer_))->size_ < count)) {
    JreStrongAssignAndConsume(&_freeBuffer_, [IOSObjectArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(12, count) type:NSObject_class_()]);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(base, 0, _freeBuffer_, 0, count);
  return _freeBuffer_;
}

- (IOSObjectArray *)appendCompletedChunkWithNSObjectArray:(IOSObjectArray *)fullChunk {
  ComFasterxmlJacksonDatabindUtilLinkedNode *next = create_ComFasterxmlJacksonDatabindUtilLinkedNode_initWithId_withComFasterxmlJacksonDatabindUtilLinkedNode_(fullChunk, nil);
  if (_head_ == nil) {
    JreStrongAssign(&_head_, JreStrongAssign(&_tail_, next));
  }
  else {
    [((ComFasterxmlJacksonDatabindUtilLinkedNode *) nil_chk(_tail_)) linkNextWithComFasterxmlJacksonDatabindUtilLinkedNode:next];
    JreStrongAssign(&_tail_, next);
  }
  jint len = ((IOSObjectArray *) nil_chk(fullChunk))->size_;
  _size_ += len;
  if (len < ComFasterxmlJacksonDatabindUtilObjectBuffer_SMALL_CHUNK) {
    len += len;
  }
  else if (len < ComFasterxmlJacksonDatabindUtilObjectBuffer_MAX_CHUNK) {
    len += (JreRShift32(len, 2));
  }
  return [IOSObjectArray arrayWithLength:len type:NSObject_class_()];
}

- (IOSObjectArray *)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                                    withInt:(jint)lastChunkEntries {
  jint totalSize = lastChunkEntries + _size_;
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:totalSize type:NSObject_class_()];
  ComFasterxmlJacksonDatabindUtilObjectBuffer__copyToWithId_withInt_withNSObjectArray_withInt_(self, result, totalSize, lastChunk, lastChunkEntries);
  [self _reset];
  return result;
}

- (IOSObjectArray *)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                                    withInt:(jint)lastChunkEntries
                                               withIOSClass:(IOSClass *)componentType {
  jint totalSize = lastChunkEntries + _size_;
  IOSObjectArray *result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentType, totalSize), IOSClass_arrayType(NSObject_class_(), 1));
  ComFasterxmlJacksonDatabindUtilObjectBuffer__copyToWithId_withInt_withNSObjectArray_withInt_(self, result, totalSize, lastChunk, lastChunkEntries);
  [self _reset];
  return result;
}

- (void)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                        withInt:(jint)lastChunkEntries
                               withJavaUtilList:(id<JavaUtilList>)resultList {
  for (ComFasterxmlJacksonDatabindUtilLinkedNode *n = _head_; n != nil; n = [n next]) {
    IOSObjectArray *curr = [n value];
    for (jint i = 0, len = ((IOSObjectArray *) nil_chk(curr))->size_; i < len; ++i) {
      [((id<JavaUtilList>) nil_chk(resultList)) addWithId:IOSObjectArray_Get(curr, i)];
    }
  }
  for (jint i = 0; i < lastChunkEntries; ++i) {
    [((id<JavaUtilList>) nil_chk(resultList)) addWithId:IOSObjectArray_Get(nil_chk(lastChunk), i)];
  }
  [self _reset];
}

- (jint)initialCapacity {
  return (_freeBuffer_ == nil) ? 0 : ((IOSObjectArray *) nil_chk(_freeBuffer_))->size_;
}

- (jint)bufferedSize {
  return _size_;
}

- (void)_reset {
  if (_tail_ != nil) {
    JreStrongAssign(&_freeBuffer_, [_tail_ value]);
  }
  JreStrongAssign(&_head_, JreStrongAssign(&_tail_, nil));
  _size_ = 0;
}

- (void)_copyToWithId:(id)resultArray
              withInt:(jint)totalSize
    withNSObjectArray:(IOSObjectArray *)lastChunk
              withInt:(jint)lastChunkEntries {
  ComFasterxmlJacksonDatabindUtilObjectBuffer__copyToWithId_withInt_withNSObjectArray_withInt_(self, resultArray, totalSize, lastChunk, lastChunkEntries);
}

- (void)dealloc {
  RELEASE_(_head_);
  RELEASE_(_tail_);
  RELEASE_(_freeBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, 8, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(resetAndStart);
  methods[2].selector = @selector(resetAndStartWithNSObjectArray:withInt:);
  methods[3].selector = @selector(appendCompletedChunkWithNSObjectArray:);
  methods[4].selector = @selector(completeAndClearBufferWithNSObjectArray:withInt:);
  methods[5].selector = @selector(completeAndClearBufferWithNSObjectArray:withInt:withIOSClass:);
  methods[6].selector = @selector(completeAndClearBufferWithNSObjectArray:withInt:withJavaUtilList:);
  methods[7].selector = @selector(initialCapacity);
  methods[8].selector = @selector(bufferedSize);
  methods[9].selector = @selector(_reset);
  methods[10].selector = @selector(_copyToWithId:withInt:withNSObjectArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SMALL_CHUNK", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindUtilObjectBuffer_SMALL_CHUNK, 0x1a, -1, -1, -1, -1 },
    { "MAX_CHUNK", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindUtilObjectBuffer_MAX_CHUNK, 0x1a, -1, -1, -1, -1 },
    { "_head_", "LComFasterxmlJacksonDatabindUtilLinkedNode;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "_tail_", "LComFasterxmlJacksonDatabindUtilLinkedNode;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "_size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_freeBuffer_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "resetAndStart", "[LNSObject;I", "appendCompletedChunk", "[LNSObject;", "completeAndClearBuffer", "[LNSObject;ILIOSClass;", "<T:Ljava/lang/Object;>([Ljava/lang/Object;ILjava/lang/Class<TT;>;)[TT;", "[LNSObject;ILJavaUtilList;", "([Ljava/lang/Object;ILjava/util/List<Ljava/lang/Object;>;)V", "_copyTo", "LNSObject;I[LNSObject;I", "Lcom/fasterxml/jackson/databind/util/LinkedNode<[Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilObjectBuffer = { "ObjectBuffer", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x11, 11, 6, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindUtilObjectBuffer;
}

@end

void ComFasterxmlJacksonDatabindUtilObjectBuffer_init(ComFasterxmlJacksonDatabindUtilObjectBuffer *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonDatabindUtilObjectBuffer *new_ComFasterxmlJacksonDatabindUtilObjectBuffer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilObjectBuffer, init)
}

ComFasterxmlJacksonDatabindUtilObjectBuffer *create_ComFasterxmlJacksonDatabindUtilObjectBuffer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilObjectBuffer, init)
}

void ComFasterxmlJacksonDatabindUtilObjectBuffer__copyToWithId_withInt_withNSObjectArray_withInt_(ComFasterxmlJacksonDatabindUtilObjectBuffer *self, id resultArray, jint totalSize, IOSObjectArray *lastChunk, jint lastChunkEntries) {
  jint ptr = 0;
  for (ComFasterxmlJacksonDatabindUtilLinkedNode *n = self->_head_; n != nil; n = [n next]) {
    IOSObjectArray *curr = [n value];
    jint len = ((IOSObjectArray *) nil_chk(curr))->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(curr, 0, resultArray, ptr, len);
    ptr += len;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastChunk, 0, resultArray, ptr, lastChunkEntries);
  ptr += lastChunkEntries;
  if (ptr != totalSize) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Should have gotten ", totalSize, @" entries, got ", ptr));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilObjectBuffer)
