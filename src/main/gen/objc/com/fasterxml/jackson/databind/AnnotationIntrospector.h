//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindAnnotationIntrospector
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindAnnotationIntrospector

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationIntrospector_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationIntrospector))
#define ComFasterxmlJacksonDatabindAnnotationIntrospector_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJacksonInject_Value;
@class ComFasterxmlJacksonAnnotationJsonCreator_Mode;
@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value;
@class ComFasterxmlJacksonAnnotationJsonInclude_Include;
@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonAnnotationJsonProperty_Access;
@class ComFasterxmlJacksonAnnotationJsonSetter_Value;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty;
@class ComFasterxmlJacksonDatabindAnnotationJsonPOJOBuilder_Value;
@class ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing;
@class ComFasterxmlJacksonDatabindCfgMapperConfig;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedClass;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod;
@class ComFasterxmlJacksonDatabindIntrospectObjectIdInfo;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangEnum;
@class JavaLangInteger;
@protocol ComFasterxmlJacksonDatabindIntrospectVisibilityChecker;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder;
@protocol JavaLangAnnotationAnnotation;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief Abstract class that defines API used for introspecting annotation-based
  configuration for serialization and deserialization.Separated
  so that different sets of annotations can be supported, and support
  plugged-in dynamically.
 <p>
  Although default implementations are based on using annotations as the only
  (or at least main) information source, custom implementations are not limited
  in such a way, and in fact there is no expectation they should be. So the name
  is bit of misnomer; this is a general configuration introspection facility.
 <p>
  NOTE: due to rapid addition of new methods (and changes to existing methods),
  it is <b>strongly</b> recommended that custom implementations should not directly
  extend this class, but rather extend <code>NopAnnotationIntrospector</code>.
  This way added methods will not break backwards compatibility of custom annotation
  introspectors.
 */
@interface ComFasterxmlJacksonDatabindAnnotationIntrospector : NSObject < ComFasterxmlJacksonCoreVersioned, JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method that can be used to collect all "real" introspectors that
  this introspector contains, if any; or this introspector
  if it is not a container.Used to get access to all container
  introspectors in their priority order.
 <p>
  Default implementation returns a Singleton list with this introspector
  as contents.
  This usually works for sub-classes, except for proxy or delegating "container
  introspectors" which need to override implementation.
 */
- (id<JavaUtilCollection>)allIntrospectors;

/*!
 @brief Method that can be used to collect all "real" introspectors that
  this introspector contains, if any; or this introspector
  if it is not a container.Used to get access to all container
  introspectors in their priority order.
 <p>
  Default implementation adds this introspector in result; this usually
  works for sub-classes, except for proxy or delegating "container
  introspectors" which need to override implementation.
 */
- (id<JavaUtilCollection>)allIntrospectorsWithJavaUtilCollection:(id<JavaUtilCollection>)result;

/*!
 @brief Method for adding possible virtual properties to be serialized along
  with regular properties.
 @since 2.5
 */
- (void)findAndAddVirtualPropertiesWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                          withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac
                                                                 withJavaUtilList:(id<JavaUtilList>)properties;

/*!
 @brief Method for checking if annotations indicate changes to minimum visibility levels
  needed for auto-detecting property elements (fields, methods, constructors).
 A baseline checker is given, and introspector is to either return it as is
  (if no annotations are found), or build and return a derived instance (using
  checker's build methods).
 */
- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)findAutoDetectVisibilityWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac
                                                                                   withComFasterxmlJacksonDatabindIntrospectVisibilityChecker:(id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)checker;

/*!
 @brief Method used to check whether specified class defines a human-readable
  description to use for documentation.
 There are no further definitions for contents; for example, whether
  these may be marked up using HTML (or something like wiki format like Markup)
  is not defined.
 @return Human-readable description, if any.
 @since 2.7
 */
- (NSString *)findClassDescriptionWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for getting a deserializer definition for content (values) of
  associated <code>Collection</code>, <code>array</code> or 
 <code>Map</code> property.
 Type of definition is either instance (of type 
 <code>JsonDeserializer</code>) or Class (of type 
 <code>Class&lt;JsonDeserializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findContentDeserializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for getting a serializer definition for content (values) of
  associated <code>Collection</code>, <code>array</code> or <code>Map</code> property.
 Type of definition is either instance (of type 
 <code>JsonSerializer</code>) or Class (of type 
 <code>Class&lt;JsonSerializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findContentSerializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method called to check whether potential Creator (constructor or static factory
  method) has explicit annotation to indicate it as actual Creator; and if so,
  which <code>com.fasterxml.jackson.annotation.JsonCreator.Mode</code> to use.
 <p>
  NOTE: caller needs to consider possibility of both `null` (no annotation found)
  and <code>com.fasterxml.jackson.annotation.JsonCreator.Mode</code> (annotation found,
  but disabled); latter is necessary as marker in case multiple introspectors are chained,
  as well as possibly as when using mix-in annotations.
 @param config Configuration settings in effect (for serialization or deserialization)
 @param a Annotated accessor (usually constructor or static method) to check
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonCreator_Mode *)findCreatorAnnotationWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                    withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for finding indication of creator binding mode for
  a creator (something for which <code>hasCreatorAnnotation</code> returns
  true), for cases where there may be ambiguity (currently: single-argument
  creator with implicit but no explicit name for the argument).
 @since 2.5
 */
- (ComFasterxmlJacksonAnnotationJsonCreator_Mode *)findCreatorBindingWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Finds the Enum value that should be considered the default value, if possible.
 @param enumCls The Enum class to scan for the default value.
 @return null if none found or it's not possible to determine one.
 @since 2.8
 */
- (JavaLangEnum *)findDefaultEnumValueWithIOSClass:(IOSClass *)enumCls;

/*!
 @brief Method for finding <code>Converter</code> that annotated property
  has indicated needs to be used for values of container type
  (this also means that method should only be called for properties
  of container types, List/Map/array properties).
 <p>
  If not null, either has to be actual 
 <code>Converter</code> instance, or class for such converter;
  and resulting converter will be used after Jackson has deserializer
  data into intermediate type (Converter input type), and Converter
  needs to convert this into its target type to be set as property value.
 <p>
  Other notes are same as those for <code>findDeserializationConverter</code>
 @param a Annotated property (field, method) to check.
 @since 2.2
 */
- (id)findDeserializationContentConverterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)a;

/*!
 @brief Method for accessing additional narrowing type definition that a
  method can have, to define more specific content type to use;
  content refers to Map values and Collection/array elements.
 It should be only be used with Map, Collection and array types.
 @param baseContentType Assumed content (value) type before considering annotations
 @return Class specifying more specific type to use instead of
    declared type, if annotation found; null if not
 */
- (IOSClass *)findDeserializationContentTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am
                                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseContentType;

/*!
 @brief Method for finding <code>Converter</code> that annotated entity
  (property or class) has indicated to be used as part of
  deserialization.
 If not null, either has to be actual 
 <code>Converter</code> instance, or class for such converter;
  and resulting converter will be used after Jackson has deserializer
  data into intermediate type (Converter input type), and Converter
  needs to convert this into its target type to be set as property value.
 <p>
  This feature is typically used to convert intermediate Jackson types
  (that default deserializers can produce) into custom type instances.
 <p>
  Note also that this feature does not necessarily work well with polymorphic
  type handling, or object identity handling; if such features are needed
  an explicit deserializer is usually better way to handle deserialization.
 @param a Annotated property (field, method) or class to check for    annotations
 @since 2.2
 */
- (id)findDeserializationConverterWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for accessing additional narrowing type definition that a
  method can have, to define more specific key type to use.
 It should be only be used with <code>java.util.Map</code> types.
 @param baseKeyType Assumed key type before considering annotations
 @return Class specifying more specific type to use instead of
    declared type, if annotation found; null if not
 */
- (IOSClass *)findDeserializationKeyTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am
                                                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseKeyType;

/*!
 @brief Method for accessing annotated type definition that a
  property can have, to be used as the type for deserialization
  instead of the static (declared) type.
 Type is usually narrowing conversion (i.e.subtype of declared type).
  Declared return type of the method is also considered acceptable.
 @param baseType Assumed type before considering annotations
 @return Class to use for deserialization instead of declared type
 */
- (IOSClass *)findDeserializationTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am
                                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for getting a deserializer definition on specified method
  or field.
 Type of definition is either instance (of type 
 <code>JsonDeserializer</code>) or Class (of type 
 <code>Class&lt;JsonDeserializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findDeserializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for determining the String value to use for serializing
  given enumeration entry; used when serializing enumerations
  as Strings (the standard method).
 @return Serialized enum value.
 */
- (NSString *)findEnumValueWithJavaLangEnum:(JavaLangEnum *)value;

/*!
 @brief Method for efficiently figuring out which if given set of <code>Enum</code> values
  have explicitly defined name.Method will overwrite entries in incoming <code>names</code>
  array with explicit names found, if any, leaving other entries unmodified.
 <p>
  Default implementation will simply delegate to <code>findEnumValue</code>, which is close
  enough, although unfortunately NOT 100% equivalent (as it will also consider <code>name()</code>
  to give explicit value).
 @since 2.7
 */
- (IOSObjectArray *)findEnumValuesWithIOSClass:(IOSClass *)enumType
                         withJavaLangEnumArray:(IOSObjectArray *)enumValues
                             withNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Method for finding if annotated class has associated filter; and if so,
  to return id that is used to locate filter.
 @return Id of the filter to use for filtering properties of annotated
     class, if any; or null if none found.
 */
- (id)findFilterIdWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for finding format annotations for property or class.
 Return value is typically used by serializers and/or
  deserializers to customize presentation aspects of the
  serialized value.
 @since 2.1
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)findFormatWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)memberOrClass;

/*!
 @brief Method for checking whether an annotation indicates that all unknown properties
 */
- (JavaLangBoolean *)findIgnoreUnknownPropertiesWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for finding implicit name for a property that given annotated
  member (field, method, creator parameter) may represent.
 This is different from explicit, annotation-based property name, in that
  it is "weak" and does not either proof that a property exists (for example,
  if visibility is not high enough), or override explicit names.
  In practice this method is used to introspect optional names for creator
  parameters (which may or may not be available and cannot be detected
  by standard databind); or to provide alternate name mangling for
  fields, getters and/or setters.
 @since 2.4
 */
- (NSString *)findImplicitPropertyNameWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member;

/*!
 @brief Method called to find out whether given member expectes a value
  to be injected, and if so, what is the identifier of the value
  to use during injection.
 Type if identifier needs to be compatible with provider of
  values (of type <code>InjectableValues</code>); often a simple String
  id is used.
 @param m Member to check
 @return Identifier of value to inject, if any; null if no injection
    indicator is found
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJacksonInject_Value *)findInjectableValueWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)m;

/*!
 */
- (id)findInjectableValueIdWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)m;

/*!
 @brief Method for getting a deserializer definition for keys of
  associated <code>Map</code> property.
 Type of definition is either instance (of type 
 <code>JsonDeserializer</code>) or Class (of type 
 <code>Class&lt;JsonDeserializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findKeyDeserializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for getting a serializer definition for keys of associated <code>Map</code> property.
 Type of definition is either instance (of type 
 <code>JsonSerializer</code>) or Class (of type 
 <code>Class&lt;JsonSerializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findKeySerializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for finding merge settings for property, if any.
 @since 2.9
 */
- (JavaLangBoolean *)findMergeInfoWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for checking whether given property accessors (method,
  field) has an annotation that suggests property name to use
  for deserialization (reading JSON into POJOs).
 Should return null if no annotation
  is found; otherwise a non-null name (possibly 
 <code>PropertyName.USE_DEFAULT</code>, which means "use default heuristics").
 @param a Property accessor to check
 @return Name to use if found; null if not.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findNameForDeserializationWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for checking whether given property accessors (method,
  field) has an annotation that suggests property name to use
  for serialization.
 Should return null if no annotation
  is found; otherwise a non-null name (possibly 
 <code>PropertyName.USE_DEFAULT</code>, which means "use default heuristics").
 @param a Property accessor to check
 @return Name to use if found; null if not.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findNameForSerializationWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for finding <code>PropertyNamingStrategy</code> for given
  class, if any specified by annotations; and if so, either return
  a <code>PropertyNamingStrategy</code> instance, or Class to use for
  creating instance
 @return Sub-class or instance of <code>PropertyNamingStrategy</code>, if one
    is specified for given class; null if not.
 @since 2.1
 */
- (id)findNamingStrategyWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for getting a serializer definition for serializer to use
  for nulls (null values) of associated property or type.
 @since 2.3
 */
- (id)findNullSerializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for checking whether given annotated thing
  (type, or accessor) indicates that values
  referenced (values of type of annotated class, or
  values referenced by annotated property; latter
  having precedence) should include Object Identifier,
  and if so, specify details of Object Identity used.
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)findObjectIdInfoWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for figuring out additional properties of an Object Identity reference
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)findObjectReferenceInfoWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann
                                                                           withComFasterxmlJacksonDatabindIntrospectObjectIdInfo:(ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)objectIdInfo;

/*!
 @brief Method for finding Builder object to use for constructing
  value instance and binding data (sort of combining value
  instantiators that can construct, and deserializers
  that can bind data).
 <p>
  Note that unlike accessors for some helper Objects, this
  method does not allow returning instances: the reason is
  that builders have state, and a separate instance needs
  to be created for each deserialization call.
 @since 2.0
 */
- (IOSClass *)findPOJOBuilderWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindAnnotationJsonPOJOBuilder_Value *)findPOJOBuilderConfigWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 */
- (IOSObjectArray *)findPropertiesToIgnoreWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ac;

/*!
 @param forSerialization True if requesting properties to ignore for serialization;    false if for deserialization
 @since 2.6
 */
- (IOSObjectArray *)findPropertiesToIgnoreWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ac
                                                                                 withBoolean:(jboolean)forSerialization;

/*!
 @brief Method for finding optional access definition for a property, annotated
  on one of its accessors.If a definition for read-only, write-only
  or read-write cases, visibility rules may be modified.
 Note, however,
  that even more specific annotations (like one for ignoring specific accessor)
  may further override behavior of the access definition.
 @since 2.6
 */
- (ComFasterxmlJacksonAnnotationJsonProperty_Access *)findPropertyAccessWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method called to find if given property has alias(es) defined.
 @return `null` if member has no information; otherwise a `List` (possibly
    empty) of aliases to use.
 @since 2.9
 */
- (id<JavaUtilList>)findPropertyAliasesWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for checking if given structured property entity (field or method that
  has nominal value of Map, Collection or array type) has annotations
  that indicate that specific type resolver is to be used for handling type
  information of contained values.
 This includes not only
  instantiating resolver builder, but also configuring it based on
  relevant annotations (not including ones checked with a call to 
 <code>findSubtypes</code>
 @param config Configuration settings in effect (for serialization or deserialization)
 @param am Annotated member (field or method) to check for annotations
 @param containerType Type of property for which resolver is to be found (must be a container type)
 @return Type resolver builder for values contained in properties of given entity,
     if one found; null if none
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)findPropertyContentTypeResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                                   withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)am
                                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)containerType;

/*!
 @brief Method for finding suggested default value (as simple textual serialization)
  for the property.While core databind does not make any use of it, it is exposed
  for extension modules to use: an expected use is generation of schema representations
  and documentation.
 @since 2.5
 */
- (NSString *)findPropertyDefaultValueWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method used to check whether specified property member (accessor
  or mutator) defines human-readable description to use for documentation.
 There are no further definitions for contents; for example, whether
  these may be marked up using HTML is not defined.
 @return Human-readable description, if any.
 @since 2.3
 */
- (NSString *)findPropertyDescriptionWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for finding information about properties to ignore either by
  name, or by more general specification ("ignore all unknown").
 This method combines multiple aspects of ignorals and deprecates
  earlier methods such as 
 <code>boolean)</code> and 
 <code>findIgnoreUnknownProperties(AnnotatedClass)</code>.
 @since 2.8
 */
- (ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value *)findPropertyIgnoralsWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ac;

/*!
 @brief Method for checking inclusion criteria for a type (Class) or property (yes, method
  name is bit unfortunate -- not just for properties!).
 In case of class, acts as the default for properties POJO contains; for properties
  acts as override for class defaults and possible global defaults.
 @since 2.6
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)findPropertyInclusionWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method used to check whether specified property member (accessor
  or mutator) defines numeric index, and if so, what is the index value.
 Possible use cases for index values included use by underlying data format
  (some binary formats mandate use of index instead of name) and ordering
  of properties (for documentation, or during serialization).
 @since 2.4
 @return Explicitly specified index for the property, if any
 */
- (JavaLangInteger *)findPropertyIndexWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for checking if given property entity (field or method) has annotations
  that indicate that specific type resolver is to be used for handling instances.
 This includes not only
  instantiating resolver builder, but also configuring it based on
  relevant annotations (not including ones checked with a call to 
 <code>findSubtypes</code>
 @param config Configuration settings in effect (for serialization or deserialization)
 @param am Annotated member (field or method) to check for annotations
 @param baseType Base java type of property for which resolver is to be found
 @return Type resolver builder for properties of given entity, if one found;
     null if none
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)findPropertyTypeResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                            withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)am
                                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for checking if given member indicates that it is part
  of a reference (parent/child).
 */
- (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *)findReferenceTypeWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member;

/*!
 @brief Method for locating name used as "root name" (for use by
  some serializers when outputting root-level object -- mostly
  for XML compatibility purposes) for given class, if one
  is defined.Returns null if no declaration found; can return
  explicit empty String, which is usually ignored as well as null.
 <p> 
  NOTE: method signature changed in 2.1, to return <code>PropertyName</code>
  instead of String.
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findRootNameWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for finding <code>Converter</code> that annotated property
  has indicated needs to be used for values of container type
  (this also means that method should only be called for properties
  of container types, List/Map/array properties).
 <p>
  If not null, either has to be actual 
 <code>Converter</code> instance, or class for such converter;
  and resulting converter will be used first to convert property
  value to converter target type, and then serializer for that
  type is used for actual serialization.
 <p>
  Other notes are same as those for <code>findSerializationConverter</code>
 @param a Annotated property (field, method) to check.
 @since 2.2
 */
- (id)findSerializationContentConverterWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)a;

/*!
 */
- (IOSClass *)findSerializationContentTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am
                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for finding <code>Converter</code> that annotated entity
  (property or class) has indicated to be used as part of
  serialization.If not null, either has to be actual 
 <code>Converter</code> instance, or class for such converter;
  and resulting converter will be used first to convert property
  value to converter target type, and then serializer for that
  type is used for actual serialization.
 <p>
  This feature is typically used to convert internal values into types
  that Jackson can convert.
 <p>
  Note also that this feature does not necessarily work well with polymorphic
  type handling, or object identity handling; if such features are needed
  an explicit serializer is usually better way to handle serialization.
 @param a Annotated property (field, method) or class to check for    annotations
 @since 2.2
 */
- (id)findSerializationConverterWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for checking whether given annotated entity (class, method,
  field) defines which Bean/Map properties are to be included in
  serialization.
 If no annotation is found, method should return given second
  argument; otherwise value indicated by the annotation.
 <p>
  Note that meaning of inclusion value depends on whether it is for
  a Class or property (field/method/constructor): in former case,
  it is the default for all properties; in latter case it is specific
  override for annotated property.
 @return Enumerated value indicating which properties to include
    in serialization
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Include *)findSerializationInclusionWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                              withComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)defValue;

/*!
 @brief Method for checking whether content (entries) of a <code>java.util.Map</code> property
  are to be included during serialization or not.
 NOTE: this is NOT called for POJO properties, or array/Collection elements.
 @since 2.5
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Include *)findSerializationInclusionForContentWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                                        withComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)defValue;

/*!
 */
- (IOSClass *)findSerializationKeyTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am
                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for accessing defined property serialization order (which may be
  partial).May return null if no ordering is defined.
 */
- (IOSObjectArray *)findSerializationPropertyOrderWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for checking whether an annotation indicates that serialized properties
  for which no explicit is defined should be alphabetically (lexicograpically)
  ordered
 */
- (JavaLangBoolean *)findSerializationSortAlphabeticallyWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 */
- (IOSClass *)findSerializationTypeWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for accessing declared typing mode annotated (if any).
 This is used for type detection, unless more granular settings
  (such as actual exact type; or serializer to use which means
  no type information is needed) take precedence.
 @return Typing mode to use, if annotation is found; null otherwise
 */
- (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *)findSerializationTypingWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for getting a serializer definition on specified method
  or field.Type of definition is either instance (of type 
 <code>JsonSerializer</code>) or Class (of type 
 <code>Class&lt;JsonSerializer></code>); if value of different
  type is returned, a runtime exception may be thrown by caller.
 */
- (id)findSerializerWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)am;

/*!
 @brief Method for finding possible settings for property, given annotations
  on an accessor.
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonSetter_Value *)findSetterInfoWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for locating annotation-specified subtypes related to annotated
  entity (class, method, field).Note that this is only guaranteed to be
  a list of directly
  declared subtypes, no recursive processing is guarantees (i.e. caller
  has to do it if/as necessary)
 @param a Annotated entity (class, field/method) to check for annotations
 */
- (id<JavaUtilList>)findSubtypesWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method for checking if specified type has explicit name.
 @param ac Class to check for type name annotations
 */
- (NSString *)findTypeNameWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for checking if given class has annotations that indicate
  that specific type resolver is to be used for handling instances.
 This includes not only
  instantiating resolver builder, but also configuring it based on
  relevant annotations (not including ones checked with a call to 
 <code>findSubtypes</code>
 @param config Configuration settings in effect (for serialization or deserialization)
 @param ac Annotated class to check for annotations
 @param baseType Base java type of value for which resolver is to be found
 @return Type resolver builder for given type, if one found; null if none
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)findTypeResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                     withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method called to check whether given property is marked to be "unwrapped"
  when being serialized (and appropriately handled in reverse direction,
  i.e.expect unwrapped representation during deserialization).
 Return value is the name transformation to use, if wrapping/unwrapping
  should  be done, or null if not -- note that transformation may simply
  be identity transformation (no changes).
 */
- (ComFasterxmlJacksonDatabindUtilNameTransformer *)findUnwrappingNameTransformerWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member;

/*!
 @brief Method getting <code>ValueInstantiator</code> to use for given
  type (class): return value can either be an instance of
  instantiator, or class of instantiator to create.
 */
- (id)findValueInstantiatorWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for checking if annotated property (represented by a field or
  getter/setter method) has definitions for views it is to be included in.
 If null is returned, no view definitions exist and property is always
  included (or always excluded as per default view inclusion configuration);
  otherwise it will only be included for views included in returned
  array. View matches are checked using class inheritance rules (sub-classes
  inherit inclusions of super-classes)
 <p>
  Since 2.9 this method may also be called to find "default view(s)" for 
 <code>AnnotatedClass</code>
 @param a Annotated property (represented by a method, field or ctor parameter)
 @return Array of views (represented by classes) that the property is included in;
     if null, always included (same as returning array containing <code>Object.class</code>)
 */
- (IOSObjectArray *)findViewsWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method used to check if specified property has annotation that indicates
  that it should be wrapped in an element; and if so, name to use.
 Note that not all serializers and deserializers support use this method:
  currently (2.1) it is only used by XML-backed handlers.
 @return Wrapper name to use, if any, or <code>PropertyName.USE_DEFAULT</code>
    to indicate that no wrapper element should be used.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findWrapperNameWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

/*!
 @brief Method for checking whether given method has an annotation
  that suggests that the method is to serve as "any setter";
  method to be used for accessing set of miscellaneous "extra"
  properties, often bound with matching "any setter" method.
 @return True if such annotation is found (and is not disabled),
    false otherwise
 @since 2.9
 */
- (JavaLangBoolean *)hasAnyGetterWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 */
- (jboolean)hasAnyGetterAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Method for checking whether given method has an annotation
  that suggests that the method is to serve as "any setter";
  method to be used for setting values of any properties for
  which no dedicated setter method is found.
 @return True if such annotation is found (and is not disabled),
    false otherwise
 @since 2.9
 */
- (JavaLangBoolean *)hasAnySetterWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 */
- (jboolean)hasAnySetterAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Method for checking whether given method has an annotation
  that suggests that the return value of annotated method
  should be used as "the value" of the object instance; usually
  serialized as a primitive value such as String or number.
 @return <code>Boolean.TRUE</code> if such annotation is found and is not disabled;
    <code>Boolean.FALSE</code> if disabled annotation (block) is found (to indicate
    accessor is definitely NOT to be used "as value"); or `null` if no
    information found.
 @since 2.9
 */
- (JavaLangBoolean *)hasAsValueWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 */
- (jboolean)hasAsValueAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)am;

/*!
 @brief Method for checking whether given annotated item (method, constructor)
  has an annotation
  that suggests that the method is a "creator" (aka factory)
  method to be used for construct new instances of deserialized
  values.
 @return True if such annotation is found (and is not disabled),
    false otherwise
 */
- (jboolean)hasCreatorAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Method called to check whether given property is marked to
  be ignored.This is used to determine whether to ignore
  properties, on per-property basis, usually combining
  annotations from multiple accessors (getters, setters, fields,
  constructor parameters).
 */
- (jboolean)hasIgnoreMarkerWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)m;

/*!
 @brief Method that can be called to check whether this member has
  an annotation that suggests whether value for matching property
  is required or not.
 */
- (JavaLangBoolean *)hasRequiredMarkerWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)m;

/*!
 @brief Method for checking whether given annotation is considered an
  annotation bundle: if so, all meta-annotations it has will
  be used instead of annotation ("bundle") itself.
 @since 2.0
 */
- (jboolean)isAnnotationBundleWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann;

/*!
 @brief Method for checking whether properties that have specified type
  (class, not generics aware) should be completely ignored for
  serialization and deserialization purposes.
 @param ac Type to check
 @return Boolean.TRUE if properties of type should be ignored;
    Boolean.FALSE if they are not to be ignored, null for default
    handling (which is 'do not ignore')
 */
- (JavaLangBoolean *)isIgnorableTypeWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)ac;

/*!
 @brief Method for checking whether given accessor claims to represent
  type id: if so, its value may be used as an override,
  instead of generated type id.
 */
- (JavaLangBoolean *)isTypeIdWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member;

/*!
 @brief Factory method for accessing "no operation" implementation
  of introspector: instance that will never find any annotation-based
  configuration.
 */
+ (ComFasterxmlJacksonDatabindAnnotationIntrospector *)nopInstance;

+ (ComFasterxmlJacksonDatabindAnnotationIntrospector *)pairWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)a1
                                                           withComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)a2;

/*!
 @brief Method called to find out possible type refinements to use
  for deserialization.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)refineDeserializationTypeWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                              withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method called to find out possible type refinements to use
  for deserialization, including not just value itself but
  key and/or content type, if type has those.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)refineSerializationTypeWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                            withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method called in cases where a class has two methods eligible to be used
  for the same logical property, and default logic is not enough to figure
  out clear precedence.Introspector may try to choose one to use; or, if
  unable, return `null` to indicate it cannot resolve the problem.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)resolveSetterConflictWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                     withComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)setter1
                                                                     withComFasterxmlJacksonDatabindIntrospectAnnotatedMethod:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMethod *)setter2;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

/*!
 @brief Method that should be used by sub-classes for ALL
  annotation access;
  overridable so 
  that sub-classes may, if they choose to, mangle actual access to
  block access ("hide" annotations) or perhaps change it.
 <p>
  Default implementation is simply:
 <code>
   return annotated.getAnnotation(annoClass);
 </code>
 @since 2.5
 */
- (id<JavaLangAnnotationAnnotation>)_findAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                         withIOSClass:(IOSClass *)annoClass;

/*!
 @brief Method that should be used by sub-classes for ALL
  annotation existence access;
  overridable so  that sub-classes may, if they choose to, mangle actual access to
  block access ("hide" annotations) or perhaps change value seen.
 <p>
  Default implementation is simply:
 <code>
   return annotated.hasAnnotation(annoClass);
 </code>
 @since 2.5
 */
- (jboolean)_hasAnnotationWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                withIOSClass:(IOSClass *)annoClass;

/*!
 @brief Alternative lookup method that is used to see if annotation has at least one of
  annotations of types listed in second argument.
 @since 2.7
 */
- (jboolean)_hasOneOfWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                      withIOSClassArray:(IOSObjectArray *)annoClasses;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationIntrospector)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindAnnotationIntrospector_init(ComFasterxmlJacksonDatabindAnnotationIntrospector *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector *ComFasterxmlJacksonDatabindAnnotationIntrospector_nopInstance(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector *ComFasterxmlJacksonDatabindAnnotationIntrospector_pairWithComFasterxmlJacksonDatabindAnnotationIntrospector_withComFasterxmlJacksonDatabindAnnotationIntrospector_(ComFasterxmlJacksonDatabindAnnotationIntrospector *a1, ComFasterxmlJacksonDatabindAnnotationIntrospector *a2);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationIntrospector)

#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty))
#define ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_

@class ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type;

/*!
 @brief Value type used with managed and back references; contains type and
  logic name, used to link related references
 */
@interface ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type:(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *)t
                                                                                              withNSString:(NSString *)n;

+ (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *)backWithNSString:(NSString *)name;

- (NSString *)getName;

- (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *)getType;

- (jboolean)isBackReference;

- (jboolean)isManagedReference;

+ (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *)managedWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_initWithComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_withNSString_(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *self, ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *t, NSString *n);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *new_ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_initWithComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_withNSString_(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *t, NSString *n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *create_ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_initWithComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_withNSString_(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *t, NSString *n);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_managedWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_backWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty)

#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type))
#define ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_Enum) {
  ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_Enum_MANAGED_REFERENCE = 0,
  ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_Enum_BACK_REFERENCE = 1,
};

@interface ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_values_[];

/*!
 @brief Reference property that Jackson manages and that is serialized normally (by serializing
  reference object), but is used for resolving back references during
  deserialization.
 Usually this can be defined by using 
 <code>com.fasterxml.jackson.annotation.JsonManagedReference</code>
 */
inline ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_get_MANAGED_REFERENCE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type, MANAGED_REFERENCE)

inline ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_get_BACK_REFERENCE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type, BACK_REFERENCE)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type *ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationIntrospector_ReferenceProperty_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationIntrospector")
