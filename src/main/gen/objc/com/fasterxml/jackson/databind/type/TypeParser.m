//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/type/TypeBindings.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "com/fasterxml/jackson/databind/type/TypeParser.h"
#include "com/fasterxml/jackson/databind/util/ClassUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"

inline jlong ComFasterxmlJacksonDatabindTypeTypeParser_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindTypeTypeParser_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindTypeTypeParser, serialVersionUID, jlong)

@implementation ComFasterxmlJacksonDatabindTypeTypeParser

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)f {
  ComFasterxmlJacksonDatabindTypeTypeParser_initWithComFasterxmlJacksonDatabindTypeTypeFactory_(self, f);
  return self;
}

- (ComFasterxmlJacksonDatabindTypeTypeParser *)withFactoryWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)f {
  return (f == _factory_) ? self : create_ComFasterxmlJacksonDatabindTypeTypeParser_initWithComFasterxmlJacksonDatabindTypeTypeFactory_(f);
}

- (ComFasterxmlJacksonDatabindJavaType *)parseWithNSString:(NSString *)canonical {
  ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *tokens = create_ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer_initWithNSString_([((NSString *) nil_chk(canonical)) java_trim]);
  ComFasterxmlJacksonDatabindJavaType *type = [self parseTypeWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens];
  if ([tokens hasMoreTokens]) {
    @throw nil_chk([self _problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens withNSString:@"Unexpected tokens after complete type"]);
  }
  return type;
}

- (ComFasterxmlJacksonDatabindJavaType *)parseTypeWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *)tokens {
  if (![((ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *) nil_chk(tokens)) hasMoreTokens]) {
    @throw nil_chk([self _problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens withNSString:@"Unexpected end-of-string"]);
  }
  IOSClass *base = [self findClassWithNSString:[tokens nextToken] withComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens];
  if ([tokens hasMoreTokens]) {
    NSString *token = [tokens nextToken];
    if ([@"<" isEqual:token]) {
      id<JavaUtilList> parameterTypes = [self parseTypesWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens];
      ComFasterxmlJacksonDatabindTypeTypeBindings *b = ComFasterxmlJacksonDatabindTypeTypeBindings_createWithIOSClass_withJavaUtilList_(base, parameterTypes);
      return [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk(_factory_)) _fromClassWithComFasterxmlJacksonDatabindTypeClassStack:nil withIOSClass:base withComFasterxmlJacksonDatabindTypeTypeBindings:b];
    }
    [tokens pushBackWithNSString:token];
  }
  return [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk(_factory_)) _fromClassWithComFasterxmlJacksonDatabindTypeClassStack:nil withIOSClass:base withComFasterxmlJacksonDatabindTypeTypeBindings:nil];
}

- (id<JavaUtilList>)parseTypesWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *)tokens {
  JavaUtilArrayList *types = create_JavaUtilArrayList_init();
  while ([((ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *) nil_chk(tokens)) hasMoreTokens]) {
    [types addWithId:[self parseTypeWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens]];
    if (![tokens hasMoreTokens]) break;
    NSString *token = [tokens nextToken];
    if ([@">" isEqual:token]) return types;
    if (![@"," isEqual:token]) {
      @throw nil_chk([self _problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens withNSString:JreStrcat("$$$", @"Unexpected token '", token, @"', expected ',' or '>')")]);
    }
  }
  @throw nil_chk([self _problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens withNSString:@"Unexpected end-of-string"]);
}

- (IOSClass *)findClassWithNSString:(NSString *)className_
withComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *)tokens {
  @try {
    return [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk(_factory_)) findClassWithNSString:className_];
  }
  @catch (JavaLangException *e) {
    ComFasterxmlJacksonDatabindUtilClassUtil_throwIfRTEWithJavaLangThrowable_(e);
    @throw nil_chk([self _problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:tokens withNSString:JreStrcat("$$$$", @"Cannot locate class '", className_, @"', problem: ", [e getMessage])]);
  }
}

- (JavaLangIllegalArgumentException *)_problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *)tokens
                                                                                           withNSString:(NSString *)msg {
  return create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Failed to parse type '%s' (remaining: '%s'): %s", [IOSObjectArray arrayWithObjects:(id[]){ [((ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *) nil_chk(tokens)) getAllInput], [tokens getRemainingInput], msg } count:3 type:NSObject_class_()]));
}

- (void)dealloc {
  RELEASE_(_factory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindTypeTypeParser;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 7, 6, 4, 8, -1, -1 },
    { NULL, "LIOSClass;", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x4, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonDatabindTypeTypeFactory:);
  methods[1].selector = @selector(withFactoryWithComFasterxmlJacksonDatabindTypeTypeFactory:);
  methods[2].selector = @selector(parseWithNSString:);
  methods[3].selector = @selector(parseTypeWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:);
  methods[4].selector = @selector(parseTypesWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:);
  methods[5].selector = @selector(findClassWithNSString:withComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:);
  methods[6].selector = @selector(_problemWithComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindTypeTypeParser_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_factory_", "LComFasterxmlJacksonDatabindTypeTypeFactory;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonDatabindTypeTypeFactory;", "withFactory", "parse", "LNSString;", "LJavaLangIllegalArgumentException;", "parseType", "LComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer;", "parseTypes", "(Lcom/fasterxml/jackson/databind/type/TypeParser$MyTokenizer;)Ljava/util/List<Lcom/fasterxml/jackson/databind/JavaType;>;", "findClass", "LNSString;LComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer;", "(Ljava/lang/String;Lcom/fasterxml/jackson/databind/type/TypeParser$MyTokenizer;)Ljava/lang/Class<*>;", "_problem", "LComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer;LNSString;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindTypeTypeParser = { "TypeParser", "com.fasterxml.jackson.databind.type", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, 6, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindTypeTypeParser;
}

@end

void ComFasterxmlJacksonDatabindTypeTypeParser_initWithComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindTypeTypeParser *self, ComFasterxmlJacksonDatabindTypeTypeFactory *f) {
  NSObject_init(self);
  JreStrongAssign(&self->_factory_, f);
}

ComFasterxmlJacksonDatabindTypeTypeParser *new_ComFasterxmlJacksonDatabindTypeTypeParser_initWithComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindTypeTypeFactory *f) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindTypeTypeParser, initWithComFasterxmlJacksonDatabindTypeTypeFactory_, f)
}

ComFasterxmlJacksonDatabindTypeTypeParser *create_ComFasterxmlJacksonDatabindTypeTypeParser_initWithComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindTypeTypeFactory *f) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindTypeTypeParser, initWithComFasterxmlJacksonDatabindTypeTypeFactory_, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindTypeTypeParser)

@implementation ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer

- (instancetype __nonnull)initWithNSString:(NSString *)str {
  ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer_initWithNSString_(self, str);
  return self;
}

- (jboolean)hasMoreTokens {
  return (_pushbackToken_ != nil) || [super hasMoreTokens];
}

- (NSString *)nextToken {
  NSString *token;
  if (_pushbackToken_ != nil) {
    token = _pushbackToken_;
    JreStrongAssign(&_pushbackToken_, nil);
  }
  else {
    token = [super nextToken];
    _index_ += [((NSString *) nil_chk(token)) java_length];
    token = [token java_trim];
  }
  return token;
}

- (void)pushBackWithNSString:(NSString *)token {
  JreStrongAssign(&_pushbackToken_, token);
}

- (NSString *)getAllInput {
  return _input_;
}

- (NSString *)getRemainingInput {
  return [((NSString *) nil_chk(_input_)) java_substring:_index_];
}

- (void)dealloc {
  RELEASE_(_input_);
  RELEASE_(_pushbackToken_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(hasMoreTokens);
  methods[2].selector = @selector(nextToken);
  methods[3].selector = @selector(pushBackWithNSString:);
  methods[4].selector = @selector(getAllInput);
  methods[5].selector = @selector(getRemainingInput);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_input_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_index_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_pushbackToken_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "pushBack", "LComFasterxmlJacksonDatabindTypeTypeParser;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer = { "MyTokenizer", "com.fasterxml.jackson.databind.type", ptrTable, methods, fields, 7, 0x18, 6, 3, 2, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer;
}

@end

void ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer_initWithNSString_(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *self, NSString *str) {
  JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(self, str, @"<,>", true);
  JreStrongAssign(&self->_input_, str);
}

ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *new_ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer, initWithNSString_, str)
}

ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer *create_ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindTypeTypeParser_MyTokenizer)
