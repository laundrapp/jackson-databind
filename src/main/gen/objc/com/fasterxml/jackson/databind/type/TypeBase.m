//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/type/WritableTypeId.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeSerializer.h"
#include "com/fasterxml/jackson/databind/type/TypeBase.h"
#include "com/fasterxml/jackson/databind/type/TypeBindings.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

inline jlong ComFasterxmlJacksonDatabindTypeTypeBase_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindTypeTypeBase_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindTypeTypeBase, serialVersionUID, jlong)

inline ComFasterxmlJacksonDatabindTypeTypeBindings *ComFasterxmlJacksonDatabindTypeTypeBase_get_NO_BINDINGS(void);
static ComFasterxmlJacksonDatabindTypeTypeBindings *ComFasterxmlJacksonDatabindTypeTypeBase_NO_BINDINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeBase, NO_BINDINGS, ComFasterxmlJacksonDatabindTypeTypeBindings *)

inline IOSObjectArray *ComFasterxmlJacksonDatabindTypeTypeBase_get_NO_TYPES(void);
static IOSObjectArray *ComFasterxmlJacksonDatabindTypeTypeBase_NO_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindTypeTypeBase, NO_TYPES, IOSObjectArray *)

__attribute__((unused)) static ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindTypeTypeBase_findSuperTypeWithIOSClass_(ComFasterxmlJacksonDatabindTypeTypeBase *self, IOSClass *rawTarget);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonDatabindTypeTypeBase__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindTypeTypeBase)

@implementation ComFasterxmlJacksonDatabindTypeTypeBase

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)raw
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInts
                                   withInt:(jint)hash_
                                    withId:(id)valueHandler
                                    withId:(id)typeHandler
                               withBoolean:(jboolean)asStatic {
  ComFasterxmlJacksonDatabindTypeTypeBase_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withInt_withId_withId_withBoolean_(self, raw, bindings, superClass, superInts, hash_, valueHandler, typeHandler, asStatic);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeTypeBase:(ComFasterxmlJacksonDatabindTypeTypeBase *)base {
  ComFasterxmlJacksonDatabindTypeTypeBase_initWithComFasterxmlJacksonDatabindTypeTypeBase_(self, base);
  return self;
}

- (NSString *)toCanonical {
  NSString *str = JreLoadVolatileId(&_canonicalName_);
  if (str == nil) {
    str = [self buildCanonicalName];
  }
  return str;
}

- (NSString *)buildCanonicalName {
  return [((IOSClass *) nil_chk(_class_)) getName];
}

- (JavaLangStringBuilder *)getGenericSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaLangStringBuilder *)getErasedSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindTypeTypeBindings *)getBindings {
  return _bindings_;
}

- (jint)containedTypeCount {
  return [((ComFasterxmlJacksonDatabindTypeTypeBindings *) nil_chk(_bindings_)) size];
}

- (ComFasterxmlJacksonDatabindJavaType *)containedTypeWithInt:(jint)index {
  return [((ComFasterxmlJacksonDatabindTypeTypeBindings *) nil_chk(_bindings_)) getBoundTypeWithInt:index];
}

- (NSString *)containedTypeNameWithInt:(jint)index {
  return [((ComFasterxmlJacksonDatabindTypeTypeBindings *) nil_chk(_bindings_)) getBoundNameWithInt:index];
}

- (ComFasterxmlJacksonDatabindJavaType *)getSuperClass {
  return _superClass_;
}

- (id<JavaUtilList>)getInterfaces {
  if (_superInterfaces_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  switch (_superInterfaces_->size_) {
    case 0:
    return JavaUtilCollections_emptyList();
    case 1:
    return JavaUtilCollections_singletonListWithId_(IOSObjectArray_Get(_superInterfaces_, 0));
  }
  return JavaUtilArrays_asListWithNSObjectArray_(_superInterfaces_);
}

- (ComFasterxmlJacksonDatabindJavaType *)findSuperTypeWithIOSClass:(IOSClass *)rawTarget {
  return ComFasterxmlJacksonDatabindTypeTypeBase_findSuperTypeWithIOSClass_(self, rawTarget);
}

- (IOSObjectArray *)findTypeParametersWithIOSClass:(IOSClass *)expType {
  ComFasterxmlJacksonDatabindJavaType *match = ComFasterxmlJacksonDatabindTypeTypeBase_findSuperTypeWithIOSClass_(self, expType);
  if (match == nil) {
    return ComFasterxmlJacksonDatabindTypeTypeBase_NO_TYPES;
  }
  return [((ComFasterxmlJacksonDatabindTypeTypeBindings *) nil_chk([match getBindings])) typeParameterArray];
}

- (void)serializeWithTypeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
            withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer {
  ComFasterxmlJacksonCoreTypeWritableTypeId *typeIdDef = create_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_(self, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
  [((ComFasterxmlJacksonDatabindJsontypeTypeSerializer *) nil_chk(typeSer)) writeTypePrefixWithComFasterxmlJacksonCoreJsonGenerator:g withComFasterxmlJacksonCoreTypeWritableTypeId:typeIdDef];
  [self serializeWithComFasterxmlJacksonCoreJsonGenerator:g withComFasterxmlJacksonDatabindSerializerProvider:provider];
  [typeSer writeTypeSuffixWithComFasterxmlJacksonCoreJsonGenerator:g withComFasterxmlJacksonCoreTypeWritableTypeId:typeIdDef];
}

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeStringWithNSString:[self toCanonical]];
}

+ (JavaLangStringBuilder *)_classSignatureWithIOSClass:(IOSClass *)cls
                             withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withBoolean:(jboolean)trailingSemicolon {
  return ComFasterxmlJacksonDatabindTypeTypeBase__classSignatureWithIOSClass_withJavaLangStringBuilder_withBoolean_(cls, sb, trailingSemicolon);
}

+ (ComFasterxmlJacksonDatabindJavaType *)_bogusSuperClassWithIOSClass:(IOSClass *)cls {
  return ComFasterxmlJacksonDatabindTypeTypeBase__bogusSuperClassWithIOSClass_(cls);
}

- (void)__javaClone:(ComFasterxmlJacksonDatabindTypeTypeBase *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_canonicalName_, &original->_canonicalName_);
}

- (void)dealloc {
  RELEASE_(_superClass_);
  RELEASE_(_superInterfaces_);
  RELEASE_(_bindings_);
  JreReleaseVolatile(&_canonicalName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x401, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindTypeTypeBindings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 7, -1, -1, 9, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x11, 11, 12, -1, 13, -1, -1 },
    { NULL, "[LComFasterxmlJacksonDatabindJavaType;", 0x1, 14, 12, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 21, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0xc, 22, 23, -1, 24, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0xc, 25, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withComFasterxmlJacksonDatabindTypeTypeBindings:withComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindJavaTypeArray:withInt:withId:withId:withBoolean:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonDatabindTypeTypeBase:);
  methods[2].selector = @selector(toCanonical);
  methods[3].selector = @selector(buildCanonicalName);
  methods[4].selector = @selector(getGenericSignatureWithJavaLangStringBuilder:);
  methods[5].selector = @selector(getErasedSignatureWithJavaLangStringBuilder:);
  methods[6].selector = @selector(getBindings);
  methods[7].selector = @selector(containedTypeCount);
  methods[8].selector = @selector(containedTypeWithInt:);
  methods[9].selector = @selector(containedTypeNameWithInt:);
  methods[10].selector = @selector(getSuperClass);
  methods[11].selector = @selector(getInterfaces);
  methods[12].selector = @selector(findSuperTypeWithIOSClass:);
  methods[13].selector = @selector(findTypeParametersWithIOSClass:);
  methods[14].selector = @selector(serializeWithTypeWithComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:withComFasterxmlJacksonDatabindJsontypeTypeSerializer:);
  methods[15].selector = @selector(serializeWithComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[16].selector = @selector(_classSignatureWithIOSClass:withJavaLangStringBuilder:withBoolean:);
  methods[17].selector = @selector(_bogusSuperClassWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindTypeTypeBase_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NO_BINDINGS", "LComFasterxmlJacksonDatabindTypeTypeBindings;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "NO_TYPES", "[LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "_superClass_", "LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_superInterfaces_", "[LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_bindings_", "LComFasterxmlJacksonDatabindTypeTypeBindings;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_canonicalName_", "LNSString;", .constantValue.asLong = 0, 0xc0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LComFasterxmlJacksonDatabindTypeTypeBindings;LComFasterxmlJacksonDatabindJavaType;[LComFasterxmlJacksonDatabindJavaType;ILNSObject;LNSObject;Z", "(Ljava/lang/Class<*>;Lcom/fasterxml/jackson/databind/type/TypeBindings;Lcom/fasterxml/jackson/databind/JavaType;[Lcom/fasterxml/jackson/databind/JavaType;ILjava/lang/Object;Ljava/lang/Object;Z)V", "LComFasterxmlJacksonDatabindTypeTypeBase;", "getGenericSignature", "LJavaLangStringBuilder;", "getErasedSignature", "containedType", "I", "containedTypeName", (void *)&ComFasterxmlJacksonDatabindTypeTypeBase__Annotations$0, "()Ljava/util/List<Lcom/fasterxml/jackson/databind/JavaType;>;", "findSuperType", "LIOSClass;", "(Ljava/lang/Class<*>;)Lcom/fasterxml/jackson/databind/JavaType;", "findTypeParameters", "(Ljava/lang/Class<*>;)[Lcom/fasterxml/jackson/databind/JavaType;", "serializeWithType", "LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;LComFasterxmlJacksonDatabindJsontypeTypeSerializer;", "LJavaIoIOException;", "serialize", "LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonProcessingException;", "_classSignature", "LIOSClass;LJavaLangStringBuilder;Z", "(Ljava/lang/Class<*>;Ljava/lang/StringBuilder;Z)Ljava/lang/StringBuilder;", "_bogusSuperClass", &ComFasterxmlJacksonDatabindTypeTypeBase_NO_BINDINGS, &ComFasterxmlJacksonDatabindTypeTypeBase_NO_TYPES };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindTypeTypeBase = { "TypeBase", "com.fasterxml.jackson.databind.type", ptrTable, methods, fields, 7, 0x401, 18, 7, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindTypeTypeBase;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindTypeTypeBase class]) {
    JreStrongAssign(&ComFasterxmlJacksonDatabindTypeTypeBase_NO_BINDINGS, ComFasterxmlJacksonDatabindTypeTypeBindings_emptyBindings());
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindTypeTypeBase_NO_TYPES, [IOSObjectArray newArrayWithLength:0 type:ComFasterxmlJacksonDatabindJavaType_class_()]);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindTypeTypeBase)
  }
}

@end

void ComFasterxmlJacksonDatabindTypeTypeBase_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withInt_withId_withId_withBoolean_(ComFasterxmlJacksonDatabindTypeTypeBase *self, IOSClass *raw, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, jint hash_, id valueHandler, id typeHandler, jboolean asStatic) {
  ComFasterxmlJacksonDatabindJavaType_initWithIOSClass_withInt_withId_withId_withBoolean_(self, raw, hash_, valueHandler, typeHandler, asStatic);
  JreStrongAssign(&self->_bindings_, (bindings == nil) ? ComFasterxmlJacksonDatabindTypeTypeBase_NO_BINDINGS : bindings);
  JreStrongAssign(&self->_superClass_, superClass);
  JreStrongAssign(&self->_superInterfaces_, superInts);
}

void ComFasterxmlJacksonDatabindTypeTypeBase_initWithComFasterxmlJacksonDatabindTypeTypeBase_(ComFasterxmlJacksonDatabindTypeTypeBase *self, ComFasterxmlJacksonDatabindTypeTypeBase *base) {
  ComFasterxmlJacksonDatabindJavaType_initWithComFasterxmlJacksonDatabindJavaType_(self, base);
  JreStrongAssign(&self->_superClass_, ((ComFasterxmlJacksonDatabindTypeTypeBase *) nil_chk(base))->_superClass_);
  JreStrongAssign(&self->_superInterfaces_, base->_superInterfaces_);
  JreStrongAssign(&self->_bindings_, base->_bindings_);
}

ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindTypeTypeBase_findSuperTypeWithIOSClass_(ComFasterxmlJacksonDatabindTypeTypeBase *self, IOSClass *rawTarget) {
  if (rawTarget == self->_class_) {
    return self;
  }
  if ([((IOSClass *) nil_chk(rawTarget)) isInterface] && (self->_superInterfaces_ != nil)) {
    for (jint i = 0, count = ((IOSObjectArray *) nil_chk(self->_superInterfaces_))->size_; i < count; ++i) {
      ComFasterxmlJacksonDatabindJavaType *type = [((ComFasterxmlJacksonDatabindJavaType *) nil_chk(IOSObjectArray_Get(self->_superInterfaces_, i))) findSuperTypeWithIOSClass:rawTarget];
      if (type != nil) {
        return type;
      }
    }
  }
  if (self->_superClass_ != nil) {
    ComFasterxmlJacksonDatabindJavaType *type = [self->_superClass_ findSuperTypeWithIOSClass:rawTarget];
    if (type != nil) {
      return type;
    }
  }
  return nil;
}

JavaLangStringBuilder *ComFasterxmlJacksonDatabindTypeTypeBase__classSignatureWithIOSClass_withJavaLangStringBuilder_withBoolean_(IOSClass *cls, JavaLangStringBuilder *sb, jboolean trailingSemicolon) {
  ComFasterxmlJacksonDatabindTypeTypeBase_initialize();
  if ([((IOSClass *) nil_chk(cls)) isPrimitive]) {
    if (cls == JreLoadStatic(JavaLangBoolean, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'Z'];
    }
    else if (cls == JreLoadStatic(JavaLangByte, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'B'];
    }
    else if (cls == JreLoadStatic(JavaLangShort, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'S'];
    }
    else if (cls == JreLoadStatic(JavaLangCharacter, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'C'];
    }
    else if (cls == JreLoadStatic(JavaLangInteger, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'I'];
    }
    else if (cls == JreLoadStatic(JavaLangLong, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'J'];
    }
    else if (cls == JreLoadStatic(JavaLangFloat, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'F'];
    }
    else if (cls == JreLoadStatic(JavaLangDouble, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'D'];
    }
    else if (cls == JreLoadStatic(JavaLangVoid, TYPE)) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'V'];
    }
    else {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unrecognized primitive type: ", [cls getName]));
    }
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'L'];
    NSString *name = [cls getName];
    for (jint i = 0, len = [((NSString *) nil_chk(name)) java_length]; i < len; ++i) {
      jchar c = [name charAtWithInt:i];
      if (c == '.') c = '/';
      [sb appendWithChar:c];
    }
    if (trailingSemicolon) {
      [sb appendWithChar:';'];
    }
  }
  return sb;
}

ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindTypeTypeBase__bogusSuperClassWithIOSClass_(IOSClass *cls) {
  ComFasterxmlJacksonDatabindTypeTypeBase_initialize();
  IOSClass *parent = [((IOSClass *) nil_chk(cls)) getSuperclass];
  if (parent == nil) {
    return nil;
  }
  return ComFasterxmlJacksonDatabindTypeTypeFactory_unknownType();
}

IOSObjectArray *ComFasterxmlJacksonDatabindTypeTypeBase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindTypeTypeBase)
