//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfigBase")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindCfgMapperConfigBase
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfigBase 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfigBase 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindCfgMapperConfigBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindCfgMapperConfigBase_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfigBase || defined(INCLUDE_ComFasterxmlJacksonDatabindCfgMapperConfigBase))
#define ComFasterxmlJacksonDatabindCfgMapperConfigBase_

#define RESTRICT_ComFasterxmlJacksonDatabindCfgMapperConfig 1
#define INCLUDE_ComFasterxmlJacksonDatabindCfgMapperConfig 1
#include "com/fasterxml/jackson/databind/cfg/MapperConfig.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value;
@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonAnnotationJsonSetter_Value;
@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgBaseSettings;
@class ComFasterxmlJacksonDatabindCfgConfigOverride;
@class ComFasterxmlJacksonDatabindCfgConfigOverrides;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindCfgHandlerInstantiator;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedClass;
@class ComFasterxmlJacksonDatabindIntrospectClassIntrospector;
@class ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsontypeSubtypeResolver;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class ComFasterxmlJacksonDatabindUtilRootNameLookup;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaTextDateFormat;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver;
@protocol ComFasterxmlJacksonDatabindIntrospectVisibilityChecker;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder;
@protocol JavaUtilMap;

@interface ComFasterxmlJacksonDatabindCfgMapperConfigBase : ComFasterxmlJacksonDatabindCfgMapperConfig < JavaIoSerializable > {
 @public
  /*!
   @brief Mix-in annotation mappings to use, if any: immutable,
  cannot be changed once defined.
   @since 2.6
   */
  ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *_mixIns_;
  /*!
   @brief Registered concrete subtypes that can be used instead of (or
  in addition to) ones declared using annotations.
   <p>
  Note that instances are stateful and as such may need to be copied,
  and may NOT be demoted down to <code>BaseSettings</code>.
   */
  ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *_subtypeResolver_;
  /*!
   @brief Explicitly defined root name to use, if any; if empty
  String, will disable root-name wrapping; if null, will
  use defaults
   */
  ComFasterxmlJacksonDatabindPropertyName *_rootName_;
  /*!
   @brief View to use for filtering out properties to serialize
  or deserialize.
   Null if none (will also be assigned null if <code>Object.class</code>
  is defined), meaning that all properties are to be included.
   */
  IOSClass *_view_;
  /*!
   @brief Contextual attributes accessible (get and set) during processing,
  on per-call basis.
   @since 2.3
   */
  ComFasterxmlJacksonDatabindCfgContextAttributes *_attributes_;
  /*!
   @brief Simple cache used for finding out possible root name for root name
  wrapping.
   <p>
  Note that instances are stateful (for caching) and as such may need to be copied,
  and may NOT be demoted down to <code>BaseSettings</code>.
   @since 2.6
   */
  ComFasterxmlJacksonDatabindUtilRootNameLookup *_rootNames_;
  /*!
   @brief Configuration overrides to apply, keyed by type of property.
   @since 2.8
   */
  ComFasterxmlJacksonDatabindCfgConfigOverrides *_configOverrides_;
}

#pragma mark Public

- (id<ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver>)copy__ OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonDatabindCfgConfigOverride *)findConfigOverrideWithIOSClass:(IOSClass *)type;

/*!
 @brief Method that will check if there are "mix-in" classes (with mix-in
  annotations) for given class
 */
- (IOSClass *)findMixInClassForWithIOSClass:(IOSClass *)cls;

- (ComFasterxmlJacksonDatabindPropertyName *)findRootNameWithIOSClass:(IOSClass *)rawRootType;

- (ComFasterxmlJacksonDatabindPropertyName *)findRootNameWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

- (IOSClass *)getActiveView;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)getAttributes;

- (ComFasterxmlJacksonDatabindCfgConfigOverride *)getConfigOverrideWithIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultInclusionWithIOSClass:(IOSClass *)baseType
                                                                       withIOSClass:(IOSClass *)propertyType;

- (JavaLangBoolean *)getDefaultMergeable;

- (JavaLangBoolean *)getDefaultMergeableWithIOSClass:(IOSClass *)baseType;

- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)getDefaultPropertyFormatWithIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value *)getDefaultPropertyIgnoralsWithIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value *)getDefaultPropertyIgnoralsWithIOSClass:(IOSClass *)baseType
                                            withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)actualClass;

- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultPropertyInclusion;

- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultPropertyInclusionWithIOSClass:(IOSClass *)baseType;

- (ComFasterxmlJacksonAnnotationJsonSetter_Value *)getDefaultSetterInfo;

- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)getDefaultVisibilityChecker;

- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)getDefaultVisibilityCheckerWithIOSClass:(IOSClass *)baseType
                                              withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)actualClass;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindPropertyName *)getFullRootName;

/*!
 */
- (NSString *)getRootName;

/*!
 @brief Accessor for object used for finding out all reachable subtypes
  for supertypes; needed when a logical type name is used instead
  of class name (or custom scheme).
 */
- (ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)getSubtypeResolver;

/*!
 @brief Test-only method -- does not reflect possibly open-ended set that external
  mix-in resolver might provide.
 */
- (jint)mixInCount;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>AnnotationIntrospector</code> to use (replacing old one).
 <p>
  NOTE: make sure to register new instance with <code>ObjectMapper</code>
  if directly calling this method.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Method for constructing and returning a new instance with different
  default <code>Base64Variant</code> to use with base64-encoded binary values.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)base64;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>ClassIntrospector</code>
  to use.
 <p>
  NOTE: make sure to register new instance with <code>ObjectMapper</code>
  if directly calling this method.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindIntrospectClassIntrospector:(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)ci;

/*!
 @brief Method for constructing an instance that has specified
  contextual attributes.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attrs;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>DateFormat</code>
  to use.
 <p>
  NOTE: non-final since <code>SerializationConfig</code> needs to override this
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithJavaTextDateFormat:(JavaTextDateFormat *)df;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>HandlerInstantiator</code>
  to use.
 <p>
  NOTE: make sure to register new instance with <code>ObjectMapper</code>
  if directly calling this method.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindCfgHandlerInstantiator:(ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)hi;

/*!
 @brief Method for constructing and returning a new instance with different
  default <code>java.util.Locale</code> to use for formatting.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Fluent factory method that will construct and return a new configuration
  object instance with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)features;

- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)feature
                                                                                         withBoolean:(jboolean)state;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>PropertyNamingStrategy</code>
  to use.
 <p>
  NOTE: make sure to register new instance with <code>ObjectMapper</code>
  if directly calling this method.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)pns;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>SubtypeResolver</code>
  to use.
 <p>
  NOTE: make sure to register new instance with <code>ObjectMapper</code>
  if directly calling this method.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindJsontypeSubtypeResolver:(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)str;

/*!
 @brief Method for constructing and returning a new instance with different
  default <code>java.util.TimeZone</code> to use for formatting of date values.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>TypeFactory</code>
  to use.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)tf;

/*!
 @brief Method for constructing and returning a new instance with different 
 <code>TypeResolverBuilder</code> to use.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withWithComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder:(id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)trb;

/*!
 @brief Method for constructing and returning a new instance with additional 
 <code>AnnotationIntrospector</code> appended (as the lowest priority one)
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withAppendedAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Method for constructing an instance that has specified
  value for attribute for given key.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withAttributeWithId:(id)key
                                                                 withId:(id)value;

/*!
 @brief Method for constructing an instance that has only specified
  attributes, removing any attributes that exist before the call.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes;

/*!
 @brief Method for constructing and returning a new instance with additional 
 <code>AnnotationIntrospector</code> inserted (as the highest priority one)
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withInsertedAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Fluent factory method that will construct and return a new configuration
  object instance with specified features disabled.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withoutWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing an instance that has no
  value for attribute for given key.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withoutAttributeWithId:(id)key;

/*!
 @brief Method for constructing and returning a new instance with different
  root name to use (none, if null).
 <p>
  Note that when a root name is set to a non-Empty String, this will automatically force use
  of root element wrapping with given name. If empty String passed, will
  disable root name wrapping; and if null used, will instead use 
 <code>SerializationFeature</code> to determine if to use wrapping, and annotation
  (or default name) for actual root name to use.
 @param rootName to use: if null, means "use default" (clear setting);    if empty String ("") means that no root name wrapping is used;
     otherwise defines root name to use.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withRootNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)rootName;

- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withRootNameWithNSString:(NSString *)rootName;

/*!
 @brief Method for constructing and returning a new instance with different
  view to use.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)withViewWithIOSClass:(IOSClass *)view;

#pragma mark Protected

/*!
 @brief Constructor used when creating a new instance (compared to
  that of creating fluent copies)
 @since 2.8
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgBaseSettings:(ComFasterxmlJacksonDatabindCfgBaseSettings *)base
                      withComFasterxmlJacksonDatabindJsontypeSubtypeResolver:(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)str
                withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver:(ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *)mixins
                           withComFasterxmlJacksonDatabindUtilRootNameLookup:(ComFasterxmlJacksonDatabindUtilRootNameLookup *)rootNames
                           withComFasterxmlJacksonDatabindCfgConfigOverrides:(ComFasterxmlJacksonDatabindCfgConfigOverrides *)configOverrides;

/*!
 @brief Pass-through constructor used when no changes are needed to the
  base class.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                                  withComFasterxmlJacksonDatabindCfgBaseSettings:(ComFasterxmlJacksonDatabindCfgBaseSettings *)base;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                                                                    withIOSClass:(IOSClass *)view;

/*!
 @since 2.3
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                             withComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attr;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                                                                         withInt:(jint)mapperFeatures;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                                     withComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)rootName;

/*!
 @since 2.1
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                    withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver:(ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *)mixins;

/*!
 @since 2.8
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                    withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver:(ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *)mixins
                               withComFasterxmlJacksonDatabindUtilRootNameLookup:(ComFasterxmlJacksonDatabindUtilRootNameLookup *)rootNames
                               withComFasterxmlJacksonDatabindCfgConfigOverrides:(ComFasterxmlJacksonDatabindCfgConfigOverrides *)configOverrides;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfigBase:(ComFasterxmlJacksonDatabindCfgMapperConfigBase *)src
                          withComFasterxmlJacksonDatabindJsontypeSubtypeResolver:(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)str;

/*!
 @since 2.9 (in this case, demoted from sub-classes)
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)_withBaseWithComFasterxmlJacksonDatabindCfgBaseSettings:(ComFasterxmlJacksonDatabindCfgBaseSettings *)newBase;

/*!
 @since 2.9 (in this case, demoted from sub-classes)
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfigBase *)_withMapperFeaturesWithInt:(jint)mapperFeatures;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindCfgMapperConfigBase)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _mixIns_, ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _subtypeResolver_, ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _rootName_, ComFasterxmlJacksonDatabindPropertyName *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _view_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _attributes_, ComFasterxmlJacksonDatabindCfgContextAttributes *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _rootNames_, ComFasterxmlJacksonDatabindUtilRootNameLookup *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfigBase, _configOverrides_, ComFasterxmlJacksonDatabindCfgConfigOverrides *)

/*!
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindCfgConfigOverride *ComFasterxmlJacksonDatabindCfgMapperConfigBase_get_EMPTY_OVERRIDE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgConfigOverride *ComFasterxmlJacksonDatabindCfgMapperConfigBase_EMPTY_OVERRIDE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindCfgMapperConfigBase, EMPTY_OVERRIDE, ComFasterxmlJacksonDatabindCfgConfigOverride *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgBaseSettings_withComFasterxmlJacksonDatabindJsontypeSubtypeResolver_withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver_withComFasterxmlJacksonDatabindUtilRootNameLookup_withComFasterxmlJacksonDatabindCfgConfigOverrides_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgBaseSettings *base, ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *str, ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *mixins, ComFasterxmlJacksonDatabindUtilRootNameLookup *rootNames, ComFasterxmlJacksonDatabindCfgConfigOverrides *configOverrides);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver_withComFasterxmlJacksonDatabindUtilRootNameLookup_withComFasterxmlJacksonDatabindCfgConfigOverrides_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *mixins, ComFasterxmlJacksonDatabindUtilRootNameLookup *rootNames, ComFasterxmlJacksonDatabindCfgConfigOverrides *configOverrides);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindCfgBaseSettings_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindCfgBaseSettings *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withInt_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, jint mapperFeatures);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindJsontypeSubtypeResolver_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *str);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindPropertyName_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindPropertyName *rootName);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withIOSClass_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, IOSClass *view);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *mixins);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfigBase_initWithComFasterxmlJacksonDatabindCfgMapperConfigBase_withComFasterxmlJacksonDatabindCfgContextAttributes_(ComFasterxmlJacksonDatabindCfgMapperConfigBase *self, ComFasterxmlJacksonDatabindCfgMapperConfigBase *src, ComFasterxmlJacksonDatabindCfgContextAttributes *attr);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindCfgMapperConfigBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfigBase")
