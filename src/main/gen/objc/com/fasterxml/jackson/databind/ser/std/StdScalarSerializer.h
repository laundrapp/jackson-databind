//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer))
#define ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;

@interface ComFasterxmlJacksonDatabindSerStdStdScalarSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer

#pragma mark Public

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

/*!
 @brief Default implementation will write type prefix, call regular serialization
  method (since assumption is that value itself does not need JSON
  Array or Object start/end markers), and then write type suffix.
 This should work for most cases; some sub-classes may want to
  change this behavior.
 */
- (void)serializeWithTypeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)t;

/*!
 @brief Alternate constructor that is (alas!)
 needed to work
  around kinks of generic type handling
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)t
                               withBoolean:(jboolean)dummy;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdStdScalarSerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_(ComFasterxmlJacksonDatabindSerStdStdScalarSerializer *self, IOSClass *t);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_withBoolean_(ComFasterxmlJacksonDatabindSerStdStdScalarSerializer *self, IOSClass *t, jboolean dummy);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdStdScalarSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer")
