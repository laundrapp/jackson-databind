//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler))
#define ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler_

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonDatabindDeserValueInstantiator;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class IOSClass;
@class JavaLangThrowable;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;

/*!
 @brief This is the class that can be registered (via 
 <code>DeserializationConfig</code> object owner by 
 <code>ObjectMapper</code>) to get called when a potentially
  recoverable problem is encountered during deserialization
  process.Handlers can try to resolve the problem, throw
  an exception or just skip the content.
 <p>
  Default implementations for all methods implemented minimal
  "do nothing" functionality, which is roughly equivalent to
  not having a registered listener at all. This allows for
  only implemented handler methods one is interested in, without
  handling other cases.
 <p>
  NOTE: it is typically <b>NOT</b> acceptable to simply do nothing,
  because this will result in unprocessed tokens being left in
  token stream (read via <code>JsonParser</code>, in case a structured
  (JSON Object or JSON Array) value is being pointed to by parser.
 */
@interface ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called when instance creation for a type fails due to an exception.
 Handler may choose to do one of following things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual instantiated value (of type <code>targetType</code>) to use as
     replacement, and continue processing.  
 </li>
  <li>Return <code>null</code> to use null as value but not to try further
    processing (in cases where properties would otherwise be bound)  
 </li>
  </ul>
 @param instClass Type that was to be instantiated
 @param argument (optional) Additional argument that was passed to creator, if any
 @param t Exception that caused instantiation failure
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use (possibly    
 <code>null</code>
 @since 2.8
 */
- (id)handleInstantiationProblemWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                         withIOSClass:(IOSClass *)instClass
                                                                               withId:(id)argument
                                                                withJavaLangThrowable:(JavaLangThrowable *)t;

/*!
 @since 2.8
 */
- (id)handleMissingInstantiatorWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                        withIOSClass:(IOSClass *)instClass
                                               withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                        withNSString:(NSString *)msg;

/*!
 @brief Method called when instance creation for a type fails due to lack of an
  instantiator.Method is called before actual deserialization from input
  is attempted, so handler may do one of following things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Handle content to match (by consuming or skipping it), and return actual
     instantiated value (of type <code>targetType</code>) to use as replacement;
     value may be `null` as well as expected target type.
 </li>
  </ul>
 @param instClass Type that was to be instantiated
 @param p Parser to use for accessing content that needs handling, to either    use it or skip it (latter with 
 <code>JsonParser.skipChildren()</code> .
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use (possibly    
 <code>null</code>
 @since 2.9
 */
- (id)handleMissingInstantiatorWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                        withIOSClass:(IOSClass *)instClass
                               withComFasterxmlJacksonDatabindDeserValueInstantiator:(ComFasterxmlJacksonDatabindDeserValueInstantiator *)valueInsta
                                               withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                        withNSString:(NSString *)msg;

/*!
 @brief Handler method called if an expected type id for a polymorphic value is
  not found and no "default type" is specified or allowed.
 Handler may choose to do one of following things:
 <ul>
  <li>Indicate it does not know what to do by returning `null`
   </li>
  <li>Indicate that nothing should be deserialized, by return `Void.class`
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual resolved type to use for this particular case.
   </li>
  </ul>
 @param ctxt Deserialization context to use for accessing information or     constructing exception to throw
 @param baseType Base type to use for resolving subtype id
 @param failureMsg Informational message that would be thrown as part of     exception, if resolution still fails
 @return Actual type to use, if resolved; `null` if handler does not know what
      to do; or `Void.class` to indicate that nothing should be deserialized for
      type with the id (which caller may choose to do... or not)
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJavaType *)handleMissingTypeIdWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                            withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idResolver
                                                                                                     withNSString:(NSString *)failureMsg;

/*!
 @brief Method that deserializers should call if the first token of the value to
  deserialize is of unexpected type (that is, type of token that deserializer
  cannot handle).This could occur, for example, if a Number deserializer
  encounter <code>JsonToken.START_ARRAY</code> instead of 
 <code>JsonToken.VALUE_NUMBER_INT</code> or <code>JsonToken.VALUE_NUMBER_FLOAT</code>.
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Handle content to match (by consuming or skipping it), and return actual
     instantiated value (of type <code>targetType</code>) to use as replacement;
     value may be `null` as well as expected target type.  
 </li>
  </ul>
 @param failureMsg Message that will be used by caller     to indicate type of failure unless handler produces value to use
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use (possibly    
 <code>null</code>
 @since 2.8
 */
- (id)handleUnexpectedTokenWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                    withIOSClass:(IOSClass *)targetType
                                            withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t
                                           withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                    withNSString:(NSString *)failureMsg;

/*!
 @brief Method called when a JSON Object property with an unrecognized
  name is encountered.
 Content (supposedly) matching the property are accessible via
  parser that can be obtained from passed deserialization context.
  Handler can also choose to skip the content; if so, it MUST return
  true to indicate it did handle property successfully.
  Skipping is usually done like so:
 @code

   parser.skipChildren();
 
@endcode
 <p>
  Note: <code>com.fasterxml.jackson.databind.DeserializationFeature</code>)
  takes effect only <b>after</b> handler is called, and only
  if handler did <b>not</b> handle the problem.
 @param beanOrClass Either bean instance being deserialized (if one    has been instantiated so far); or Class that indicates type that
     will be instantiated (if no instantiation done yet: for example
     when bean uses non-default constructors)
 @param p Parser to use for handling problematic content
 @return True if the problem is resolved (and content available used or skipped);
   false if the handler did not anything and the problem is unresolved. Note that in
   latter case caller will either throw an exception or explicitly skip the content,
   depending on configuration.
 */
- (jboolean)handleUnknownPropertyWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                 withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                       withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer
                                                                                withId:(id)beanOrClass
                                                                          withNSString:(NSString *)propertyName;

/*!
 @brief Handler method called if resolution of type id from given String failed
  to produce a subtype; usually because logical id is not mapped to actual
  implementation class.
 Handler may choose to do one of following things:
 <ul>
  <li>Indicate it does not know what to do by returning `null`
   </li>
  <li>Indicate that nothing should be deserialized, by return `Void.class`
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual resolved type to use for type id.
   </li>
  </ul>
 @param ctxt Deserialization context to use for accessing information or     constructing exception to throw
 @param baseType Base type to use for resolving subtype id
 @param subTypeId Subtype id that failed to resolve
 @param failureMsg Informational message that would be thrown as part of     exception, if resolution still fails
 @return Actual type to use, if resolved; `null` if handler does not know what
      to do; or `Void.class` to indicate that nothing should be deserialized for
      type with the id (which caller may choose to do... or not)
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindJavaType *)handleUnknownTypeIdWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                     withNSString:(NSString *)subTypeId
                                                            withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idResolver
                                                                                                     withNSString:(NSString *)failureMsg;

/*!
 @brief Method called when a property name from input cannot be converted to a
  non-Java-String key type (passed as <code>rawKeyType</code>) due to format problem.
 Handler may choose to do one of 3 things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual key value to use as replacement, and continue processing.
   </li>
  </ul>
 @param failureMsg Message that will be used by caller (by calling     
 <code>String, String)</code> )     to indicate type of failure unless handler produces key to use
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use as key (possibly    
 <code>null</code>
 @since 2.8
 */
- (id)handleWeirdKeyWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                             withIOSClass:(IOSClass *)rawKeyType
                                                             withNSString:(NSString *)keyValue
                                                             withNSString:(NSString *)failureMsg;

/*!
 @brief Method called when an embedded (native) value (<code>JsonToken.VALUE_EMBEDDED_OBJECT</code>)
  cannot be converted directly into expected value type (usually POJO).
 Handler may choose to do one of 3 things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual converted value (of type <code>targetType</code>) to use as
     replacement, and continue processing.  
 </li>
  </ul>
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use (possibly    
 <code>null</code>)
 @since 2.9
 */
- (id)handleWeirdNativeValueWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType
                                                                           withId:(id)valueToConvert
                                            withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method called when a numeric value (integral or floating-point from input
  cannot be converted to a non-numeric value type due to specific problem
  (as opposed to numeric values never being usable).
 Handler may choose to do one of 3 things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual converted value (of type <code>targetType</code>) to use as
     replacement, and continue processing.  
 </li>
  </ul>
 @param failureMsg Message that will be used by caller (by calling     
 <code>DeserializationContext.weirdNumberException</code> )     to indicate type of failure unless handler produces key to use
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use as (possibly    
 <code>null</code>)
 @since 2.8
 */
- (id)handleWeirdNumberValueWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                     withIOSClass:(IOSClass *)targetType
                                                                     withNSNumber:(NSNumber *)valueToConvert
                                                                     withNSString:(NSString *)failureMsg;

/*!
 @brief Method called when a String value
  cannot be converted to a non-String value type due to specific problem
  (as opposed to String values never being usable).
 Handler may choose to do one of 3 things:
 <ul>
  <li>Indicate it does not know what to do by returning <code>NOT_HANDLED</code>
   </li>
  <li>Throw a <code>IOException</code> to indicate specific fail message (instead of
     standard exception caller would throw  
 </li>
  <li>Return actual converted value (of type <code>targetType</code>) to use as
     replacement, and continue processing.  
 </li>
  </ul>
 @param failureMsg Message that will be used by caller (by calling     
 <code>DeserializationContext.weirdNumberException</code> )     to indicate type of failure unless handler produces key to use
 @return Either <code>NOT_HANDLED</code> to indicate that handler does not know
     what to do (and exception may be thrown), or value to use as (possibly    
 <code>null</code>)
 @since 2.8
 */
- (id)handleWeirdStringValueWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                     withIOSClass:(IOSClass *)targetType
                                                                     withNSString:(NSString *)valueToConvert
                                                                     withNSString:(NSString *)failureMsg;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler)

/*!
 @brief Marker value returned by some handler methods to indicate that
  they could not handle problem and produce replacement value.
 @since 2.7
 */
inline id ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler_get_NOT_HANDLED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler_NOT_HANDLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler, NOT_HANDLED, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler_init(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler")
