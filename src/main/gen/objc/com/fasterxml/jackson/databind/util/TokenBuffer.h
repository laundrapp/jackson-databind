//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilTokenBuffer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilTokenBuffer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilTokenBuffer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilTokenBuffer))
#define ComFasterxmlJacksonDatabindUtilTokenBuffer_

#define RESTRICT_ComFasterxmlJacksonCoreJsonGenerator 1
#define INCLUDE_ComFasterxmlJacksonCoreJsonGenerator 1
#include "com/fasterxml/jackson/core/JsonGenerator.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonJsonWriteContext;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonStreamContext;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment;
@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol ComFasterxmlJacksonCoreTreeNode;

/*!
 @brief Utility class used for efficient storage of <code>JsonToken</code>
  sequences, needed for temporary buffering.
 Space efficient for different sequence lengths (especially so for smaller
  ones; but not significantly less efficient for larger), highly efficient
  for linear iteration and appending. Implemented as segmented/chunked
  linked list of tokens; only modifications are via appends.
 <p>
  Note that before version 2.0, this class was located in the "core"
  bundle, not data-binding; but since it was only used by data binding,
  was moved here to reduce size of core package
 */
@interface ComFasterxmlJacksonDatabindUtilTokenBuffer : ComFasterxmlJacksonCoreJsonGenerator {
 @public
  /*!
   @brief Object codec to use for stream-based object
  conversion through parser/generator interfaces.If null,
  such methods cannot be used.
   */
  ComFasterxmlJacksonCoreObjectCodec *_objectCodec_;
  /*!
   @brief Parse context from "parent" parser (one from which content to buffer is read,
  if specified).Used, if available, when reading content, to present full
  context as if content was read from the original parser: this is useful
  in error reporting and sometimes processing as well.
   */
  ComFasterxmlJacksonCoreJsonStreamContext *_parentContext_;
  /*!
   @brief Bit flag composed of bits that indicate which 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>s
  are enabled.
   <p>
  NOTE: most features have no effect on this class
   */
  jint _generatorFeatures_;
  jboolean _closed_;
  /*!
   @since 2.3
   */
  jboolean _hasNativeTypeIds_;
  /*!
   @since 2.3
   */
  jboolean _hasNativeObjectIds_;
  /*!
   @since 2.3
   */
  jboolean _mayHaveNativeIds_;
  /*!
   @brief Flag set during construction, if use of <code>BigDecimal</code> is to be forced
  on all floating-point values.
   @since 2.7
   */
  jboolean _forceBigDecimal_;
  /*!
   @brief First segment, for contents this buffer has
   */
  ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *_first_;
  /*!
   @brief Last segment of this buffer, one that is used
  for appending more tokens
   */
  ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *_last_;
  /*!
   @brief Offset within last segment,
   */
  jint _appendAt_;
  /*!
   @brief If native type ids supported, this is the id for following
  value (or first token of one) to be written.
   */
  id _typeId_;
  /*!
   @brief If native object ids supported, this is the id for following
  value (or first token of one) to be written.
   */
  id _objectId_;
  /*!
   @brief Do we currently have a native type or object id buffered?
   */
  jboolean _hasNativeId_;
  ComFasterxmlJacksonCoreJsonJsonWriteContext *_writeContext_;
}

#pragma mark Public

/*!
 @since 2.3
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @since 2.7
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
              withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @param codec Object codec to use for stream-based object    conversion through parser/generator interfaces. If null,
     such methods cannot be used.
 @param hasNativeIds Whether resulting <code>JsonParser</code>  (if created)
     is considered to support native type and object ids
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                                                         withBoolean:(jboolean)hasNativeIds;

/*!
 @brief Helper method that will append contents of given buffer into this
  buffer.
 Not particularly optimized; can be made faster if there is need.
 @return This buffer
 */
- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)appendWithComFasterxmlJacksonDatabindUtilTokenBuffer:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)other;

/*!
 @brief Convenience method, equivalent to:
 @code

  TokenBuffer b = new TokenBuffer(p);
  b.copyCurrentStructure(p);
  return b;
 
@endcode
 @since 2.9
 */
+ (ComFasterxmlJacksonDatabindUtilTokenBuffer *)asCopyOfValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method used to create a <code>JsonParser</code> that can read contents
  stored in this buffer.Will use default <code>_objectCodec</code> for
  object conversions.
 <p>
  Note: instances are not synchronized, that is, they are not thread-safe
  if there are concurrent appends to the underlying buffer.
 @return Parser that can be used for reading contents stored in this buffer
 */
- (ComFasterxmlJacksonCoreJsonParser *)asParser;

/*!
 @param src Parser to use for accessing source information     like location, configured codec
 */
- (ComFasterxmlJacksonCoreJsonParser *)asParserWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)src;

/*!
 @brief Method used to create a <code>JsonParser</code> that can read contents
  stored in this buffer.
 <p>
  Note: instances are not synchronized, that is, they are not thread-safe
  if there are concurrent appends to the underlying buffer.
 @param codec Object codec to use for stream-based object    conversion through parser/generator interfaces. If null,
     such methods cannot be used.
 @return Parser that can be used for reading contents stored in this buffer
 */
- (ComFasterxmlJacksonCoreJsonParser *)asParserWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec;

/*!
 @brief Same as:
 @code

   JsonParser p = asParser();
   p.nextToken();
   return p;
 
@endcode
 @since 2.9
 */
- (ComFasterxmlJacksonCoreJsonParser *)asParserOnFirstToken;

/*!
 @brief Since we can efficiently store <code>byte[]</code>, yes.
 */
- (jboolean)canWriteBinaryNatively;

- (jboolean)canWriteObjectId;

- (jboolean)canWriteTypeId;

- (void)close;

- (void)copyCurrentEventWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

- (void)copyCurrentStructureWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Helper method used by standard deserializer.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)deserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (ComFasterxmlJacksonCoreJsonGenerator *)disableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

- (ComFasterxmlJacksonCoreJsonGenerator *)enableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

- (ComFasterxmlJacksonCoreJsonToken *)firstToken;

- (void)flush;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)forceUseOfBigDecimalWithBoolean:(jboolean)b;

- (ComFasterxmlJacksonCoreObjectCodec *)getCodec;

- (jint)getFeatureMask;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)getOutputContext;

- (jboolean)isClosed;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method that allows explicitly specifying parent parse context to associate
  with contents of this buffer.Usually context is assigned at construction,
  based on given parser; but it is not always available, and may not contain
  intended context.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)overrideParentContextWithComFasterxmlJacksonCoreJsonStreamContext:(ComFasterxmlJacksonCoreJsonStreamContext *)ctxt;

- (ComFasterxmlJacksonCoreJsonGenerator *)overrideStdFeaturesWithInt:(jint)values
                                                             withInt:(jint)mask;

/*!
 @brief Helper method that will write all contents of this buffer
  using given <code>JsonGenerator</code>.
 <p>
  Note: this method would be enough to implement 
 <code>JsonSerializer</code>  for <code>TokenBuffer</code> type;
  but we cannot have upwards
  references (from core to mapper package); and as such we also
  cannot take second argument.
 */
- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (ComFasterxmlJacksonCoreJsonGenerator *)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)oc;

- (ComFasterxmlJacksonCoreJsonGenerator *)setFeatureMaskWithInt:(jint)mask;

- (NSString *)description;

- (ComFasterxmlJacksonCoreJsonGenerator *)useDefaultPrettyPrinter;

- (ComFasterxmlJacksonCoreVersion *)version__;

- (void)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                              withByteArray:(IOSByteArray *)data
                                                    withInt:(jint)offset
                                                    withInt:(jint)len;

/*!
 @brief Although we could support this method, it does not necessarily make
  sense: we cannot make good use of streaming because buffer must
  hold all the data.Because of this, currently this will simply
  throw <code>UnsupportedOperationException</code>
 */
- (jint)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                      withJavaIoInputStream:(JavaIoInputStream *)data
                                                    withInt:(jint)dataLength;

- (void)writeBooleanWithBoolean:(jboolean)state;

- (void)writeEmbeddedObjectWithId:(id)object;

- (void)writeEndArray;

- (void)writeEndObject;

- (void)writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name;

- (void)writeFieldNameWithNSString:(NSString *)name;

- (void)writeNull;

- (void)writeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)dec;

- (void)writeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)v;

- (void)writeNumberWithDouble:(jdouble)d;

- (void)writeNumberWithFloat:(jfloat)f;

- (void)writeNumberWithInt:(jint)i;

- (void)writeNumberWithLong:(jlong)l;

- (void)writeNumberWithShort:(jshort)i;

- (void)writeNumberWithNSString:(NSString *)encodedValue;

- (void)writeObjectWithId:(id)value;

- (void)writeObjectIdWithId:(id)id_;

- (void)writeRawWithChar:(jchar)c;

- (void)writeRawWithCharArray:(IOSCharArray *)text
                      withInt:(jint)offset
                      withInt:(jint)len;

- (void)writeRawWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text;

- (void)writeRawWithNSString:(NSString *)text;

- (void)writeRawWithNSString:(NSString *)text
                     withInt:(jint)offset
                     withInt:(jint)len;

- (void)writeRawUTF8StringWithByteArray:(IOSByteArray *)text
                                withInt:(jint)offset
                                withInt:(jint)length;

- (void)writeRawValueWithCharArray:(IOSCharArray *)text
                           withInt:(jint)offset
                           withInt:(jint)len;

- (void)writeRawValueWithNSString:(NSString *)text;

- (void)writeRawValueWithNSString:(NSString *)text
                          withInt:(jint)offset
                          withInt:(jint)len;

- (void)writeStartArray;

- (void)writeStartObject;

- (void)writeStartObjectWithId:(id)forValue;

- (void)writeStringWithCharArray:(IOSCharArray *)text
                         withInt:(jint)offset
                         withInt:(jint)len;

- (void)writeStringWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text;

- (void)writeStringWithNSString:(NSString *)text;

- (void)writeTreeWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)node;

- (void)writeTypeIdWithId:(id)id_;

- (void)writeUTF8StringWithByteArray:(IOSByteArray *)text
                             withInt:(jint)offset
                             withInt:(jint)length;

#pragma mark Protected

- (void)_appendWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)type;

- (void)_appendWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)type
                                             withId:(id)value;

/*!
 @brief Similar to <code>_append(JsonToken)</code> but also updates context with
  knowledge that a scalar value was written
 @since 2.6.4
 */
- (void)_appendValueWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)type;

/*!
 @brief Similar to <code>_append(JsonToken,Object)</code> but also updates context with
  knowledge that a scalar value was written
 @since 2.6.4
 */
- (void)_appendValueWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)type
                                                  withId:(id)value;

- (void)_reportUnsupportedOperation;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindUtilTokenBuffer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _objectCodec_, ComFasterxmlJacksonCoreObjectCodec *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _parentContext_, ComFasterxmlJacksonCoreJsonStreamContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _first_, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _last_, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _typeId_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _objectId_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer, _writeContext_, ComFasterxmlJacksonCoreJsonJsonWriteContext *)

inline jint ComFasterxmlJacksonDatabindUtilTokenBuffer_get_DEFAULT_GENERATOR_FEATURES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonDatabindUtilTokenBuffer_DEFAULT_GENERATOR_FEATURES;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonDatabindUtilTokenBuffer, DEFAULT_GENERATOR_FEATURES, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreObjectCodec_withBoolean_(ComFasterxmlJacksonDatabindUtilTokenBuffer *self, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeIds);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreObjectCodec_withBoolean_(ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeIds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreObjectCodec_withBoolean_(ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeIds);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_(ComFasterxmlJacksonDatabindUtilTokenBuffer *self, ComFasterxmlJacksonCoreJsonParser *p);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_(ComFasterxmlJacksonCoreJsonParser *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_(ComFasterxmlJacksonCoreJsonParser *p);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_(ComFasterxmlJacksonDatabindUtilTokenBuffer *self, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer *ComFasterxmlJacksonDatabindUtilTokenBuffer_asCopyOfValueWithComFasterxmlJacksonCoreJsonParser_(ComFasterxmlJacksonCoreJsonParser *p);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilTokenBuffer)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser))
#define ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_

#define RESTRICT_ComFasterxmlJacksonCoreBaseParserMinimalBase 1
#define INCLUDE_ComFasterxmlJacksonCoreBaseParserMinimalBase 1
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonParser_NumberType;
@class ComFasterxmlJacksonCoreJsonStreamContext;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreUtilByteArrayBuilder;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindUtilTokenBufferReadContext;
@class ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment;
@class IOSByteArray;
@class IOSCharArray;
@class JavaIoOutputStream;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;

@interface ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser : ComFasterxmlJacksonCoreBaseParserMinimalBase {
 @public
  ComFasterxmlJacksonCoreObjectCodec *_codec_;
  /*!
   @since 2.3
   */
  jboolean _hasNativeTypeIds_;
  /*!
   @since 2.3
   */
  jboolean _hasNativeObjectIds_;
  jboolean _hasNativeIds_;
  /*!
   @brief Currently active segment
   */
  ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *_segment_;
  /*!
   @brief Pointer to current token within current segment
   */
  jint _segmentPtr_;
  /*!
   @brief Information about parser context, context in which
  the next token is to be parsed (root, array, object).
   */
  ComFasterxmlJacksonDatabindUtilTokenBufferReadContext *_parsingContext_;
  jboolean _closed_;
  ComFasterxmlJacksonCoreUtilByteArrayBuilder *_byteBuilder_;
  ComFasterxmlJacksonCoreJsonLocation *_location_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment:(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)firstSeg
                                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                                                                         withBoolean:(jboolean)hasNativeTypeIds
                                                                         withBoolean:(jboolean)hasNativeObjectIds;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment:(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)firstSeg
                                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                                                                         withBoolean:(jboolean)hasNativeTypeIds
                                                                         withBoolean:(jboolean)hasNativeObjectIds
                                        withComFasterxmlJacksonCoreJsonStreamContext:(ComFasterxmlJacksonCoreJsonStreamContext *)parentContext;

- (jboolean)canReadObjectId;

- (jboolean)canReadTypeId;

- (void)close;

- (JavaMathBigInteger *)getBigIntegerValue;

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

- (ComFasterxmlJacksonCoreObjectCodec *)getCodec;

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation;

- (NSString *)getCurrentName;

- (JavaMathBigDecimal *)getDecimalValue;

- (jdouble)getDoubleValue;

- (id)getEmbeddedObject;

- (jfloat)getFloatValue;

- (jint)getIntValue;

- (jlong)getLongValue;

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)getNumberType;

- (NSNumber *)getNumberValue;

- (id)getObjectId;

- (ComFasterxmlJacksonCoreJsonStreamContext *)getParsingContext;

- (NSString *)getText;

- (IOSCharArray *)getTextCharacters;

- (jint)getTextLength;

- (jint)getTextOffset;

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation;

- (id)getTypeId;

- (jboolean)hasTextCharacters;

- (jboolean)isClosed;

- (jboolean)isNaN;

- (NSString *)nextFieldName;

- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

- (void)overrideCurrentNameWithNSString:(NSString *)name;

- (ComFasterxmlJacksonCoreJsonToken *)peekNextToken;

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (void)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)c;

- (void)setLocationWithComFasterxmlJacksonCoreJsonLocation:(ComFasterxmlJacksonCoreJsonLocation *)l;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

- (void)_checkIsNumber;

- (id)_currentObject;

- (void)_handleEOF;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser, _codec_, ComFasterxmlJacksonCoreObjectCodec *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser, _segment_, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser, _parsingContext_, ComFasterxmlJacksonDatabindUtilTokenBufferReadContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser, _byteBuilder_, ComFasterxmlJacksonCoreUtilByteArrayBuilder *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser, _location_, ComFasterxmlJacksonCoreJsonLocation *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *self, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_withComFasterxmlJacksonCoreJsonStreamContext_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *self, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds, ComFasterxmlJacksonCoreJsonStreamContext *parentContext);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_withComFasterxmlJacksonCoreJsonStreamContext_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds, ComFasterxmlJacksonCoreJsonStreamContext *parentContext) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser_initWithComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_withComFasterxmlJacksonCoreObjectCodec_withBoolean_withBoolean_withComFasterxmlJacksonCoreJsonStreamContext_(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *firstSeg, ComFasterxmlJacksonCoreObjectCodec *codec, jboolean hasNativeTypeIds, jboolean hasNativeObjectIds, ComFasterxmlJacksonCoreJsonStreamContext *parentContext);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Parser)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment))
#define ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_

@class ComFasterxmlJacksonCoreJsonToken;
@class IOSObjectArray;
@class JavaUtilTreeMap;

/*!
 @brief Individual segment of TokenBuffer that can store up to 16 tokens
  (limited by 4 bits per token type marker requirement).
 Current implementation uses fixed length array; could alternatively
  use 16 distinct fields and switch statement (slightly more efficient
  storage, slightly slower access)
 */
@interface ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment : NSObject {
 @public
  ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *_next_;
  /*!
   @brief Bit field used to store types of buffered tokens; 4 bits per token.
   Value 0 is reserved for "not in use"
   */
  jlong _tokenTypes_;
  IOSObjectArray *_tokens_;
  /*!
   @brief Lazily constructed Map for storing native type and object ids, if any
   */
  JavaUtilTreeMap *_nativeIds_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)appendWithInt:(jint)index
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)tokenType;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)appendWithInt:(jint)index
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)tokenType
                                                               withId:(id)value;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)appendWithInt:(jint)index
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)tokenType
                                                               withId:(id)objectId
                                                               withId:(id)typeId;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)appendWithInt:(jint)index
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)tokenType
                                                               withId:(id)value
                                                               withId:(id)objectId
                                                               withId:(id)typeId;

- (id)getWithInt:(jint)index;

/*!
 @brief Accessor for checking whether this segment may have native
  type or object ids.
 */
- (jboolean)hasIds;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)next;

- (jint)rawTypeWithInt:(jint)index;

- (ComFasterxmlJacksonCoreJsonToken *)typeWithInt:(jint)index;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment, _next_, ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment, _tokens_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment, _nativeIds_, JavaUtilTreeMap *)

inline jint ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_get_TOKENS_PER_SEGMENT(void);
#define ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_TOKENS_PER_SEGMENT 16
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment, TOKENS_PER_SEGMENT, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_init(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *new_ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment *create_ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilTokenBuffer_Segment)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilTokenBuffer")
