//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdUUIDSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdUUIDSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdUUIDSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdUUIDSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdUUIDSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdUUIDSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdUUIDSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdUUIDSerializer))
#define ComFasterxmlJacksonDatabindSerStdUUIDSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSCharArray;
@class IOSClass;
@class JavaUtilUUID;

/*!
 @brief Specialized <code>JsonSerializer</code> to output <code>java.util.UUID</code>s.
 Beyond optimized access and writing of textual representation (which
  is the default handling in most cases), it will alternatively
  allow serialization using raw binary output (as 16-byte block)
  if underlying data format has efficient means to access that.
 */
@interface ComFasterxmlJacksonDatabindSerStdUUIDSerializer : ComFasterxmlJacksonDatabindSerStdStdScalarSerializer

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                              withId:(JavaUtilUUID *)value;

- (void)serializeWithId:(JavaUtilUUID *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdUUIDSerializer)

inline IOSCharArray *ComFasterxmlJacksonDatabindSerStdUUIDSerializer_get_HEX_CHARS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdUUIDSerializer, HEX_CHARS, IOSCharArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init(ComFasterxmlJacksonDatabindSerStdUUIDSerializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdUUIDSerializer *new_ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdUUIDSerializer *create_ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdUUIDSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdUUIDSerializer")
