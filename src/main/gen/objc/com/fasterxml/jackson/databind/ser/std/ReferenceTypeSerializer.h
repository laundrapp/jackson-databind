//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer))
#define ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContextualSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;

/*!
 @brief Base implementation for values of <code>ReferenceType</code>.
 Implements most of functionality, only leaving couple of abstract
  methods for sub-classes to implement
 @since 2.8
 */
@interface ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer < ComFasterxmlJacksonDatabindSerContextualSerializer > {
 @public
  /*!
   @brief Value type
   */
  ComFasterxmlJacksonDatabindJavaType *_referredType_;
  id<ComFasterxmlJacksonDatabindBeanProperty> _property_;
  /*!
   @brief Type serializer used for values, if any.
   */
  ComFasterxmlJacksonDatabindJsontypeTypeSerializer *_valueTypeSerializer_;
  /*!
   @brief Serializer for content values, if statically known.
   */
  ComFasterxmlJacksonDatabindJsonSerializer *_valueSerializer_;
  /*!
   @brief In case of unwrapping, need name transformer.
   */
  ComFasterxmlJacksonDatabindUtilNameTransformer *_unwrapper_;
  /*!
   @brief If element type cannot be statically determined, mapping from
  runtime type to serializer is handled using this object
   */
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *_dynamicSerializers_;
  /*!
   @brief Value that indicates suppression mechanism to use for <b>values contained</b>;
  either "filter" (of which <code>equals()</code> is called), or marker
  value of <code>MARKER_FOR_EMPTY</code>, or null to indicate no filtering for
  non-null values.
   Note that inclusion value for Map instance itself is handled by caller (POJO
  property that refers to the Map value).
   @since 2.9
   */
  id _suppressableValue_;
  /*!
   @brief Flag that indicates what to do with `null` values, distinct from
  handling of <code>_suppressableValue</code>
   @since 2.9
   */
  jboolean _suppressNulls_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)fullType
                                                                   withBoolean:(jboolean)staticTyping
                         withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createContextualWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJavaType *)getReferredType;

- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                              withId:(id)value;

- (jboolean)isUnwrappingSerializer;

- (void)serializeWithId:(id)ref
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)serializeWithTypeWithId:(id)ref
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)unwrappingSerializerWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)transformer;

/*!
 @brief Mutant factory method called to create a differently constructed instance,
  specifically with different exclusion rules for contained value.
 <p>
  NOTE: caller has verified that there are changes, so implementations
  need NOT check if a new instance is needed.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *)withContentInclusionWithId:(id)suppressableValue
                                                                             withBoolean:(jboolean)suppressNulls;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer:(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *)base
                                               withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                     withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                             withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSer
                                        withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper
                                                                                    withId:(id)suppressableValue
                                                                               withBoolean:(jboolean)suppressNulls;

- (id)_getReferencedWithId:(id)value;

- (id)_getReferencedIfPresentWithId:(id)value;

/*!
 @brief Method called to see if there is a value present or not.
 Note that value itself may still be `null`, even if present,
  if referential type allows three states (absent, present-null,
  present-non-null); some only allow two (absent, present-non-null).
 */
- (jboolean)_isValuePresentWithId:(id)value;

- (jboolean)_useStaticWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                            withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)referredType;

/*!
 @brief Mutant factory method called when changes are needed; should construct
  newly configured instance with new values as indicated.
 <p>
  NOTE: caller has verified that there are changes, so implementations
  need NOT check if a new instance is needed.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *)withResolvedWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                                                        withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSer
                                                                   withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _referredType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _property_, id<ComFasterxmlJacksonDatabindBeanProperty>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _valueTypeSerializer_, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _valueSerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _unwrapper_, ComFasterxmlJacksonDatabindUtilNameTransformer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _dynamicSerializers_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, _suppressableValue_, id)

/*!
 @since 2.9
 */
inline id ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_get_MARKER_FOR_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_MARKER_FOR_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer, MARKER_FOR_EMPTY, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_initWithComFasterxmlJacksonDatabindTypeReferenceType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *self, ComFasterxmlJacksonDatabindTypeReferenceType *fullType, jboolean staticTyping, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *ser);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_initWithComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindUtilNameTransformer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *self, ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer *base, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *valueSer, ComFasterxmlJacksonDatabindUtilNameTransformer *unwrapper, id suppressableValue, jboolean suppressNulls);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdReferenceTypeSerializer")
