//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyWriter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyWriter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyWriter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyWriter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerPropertyWriter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindSerPropertyWriter))
#define ComFasterxmlJacksonDatabindSerPropertyWriter_

#define RESTRICT_ComFasterxmlJacksonDatabindIntrospectConcreteBeanPropertyBase 1
#define INCLUDE_ComFasterxmlJacksonDatabindIntrospectConcreteBeanPropertyBase 1
#include "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindPropertyMetadata;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor;
@protocol JavaLangAnnotationAnnotation;

/*!
 @brief Base class for writers used to output property values (name-value pairs)
  as key/value pairs via streaming API.This is the most generic abstraction
  implemented by both POJO and <code>java.util.Map</code> serializers, and invoked
  by filtering functionality.
 @since 2.3
 */
@interface ComFasterxmlJacksonDatabindSerPropertyWriter : ComFasterxmlJacksonDatabindIntrospectConcreteBeanPropertyBase < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Traversal method used for things like JSON Schema generation, or
  POJO introspection.
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor>)objectVisitor
                                                    withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Legacy method called for JSON Schema generation; should not be called by new code
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindNodeObjectNode:(ComFasterxmlJacksonDatabindNodeObjectNode *)propertiesNode
                         withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Convenience method for accessing annotation that may be associated
  either directly on property, or, if not, via enclosing class (context).
 This allows adding baseline contextual annotations, for example, by adding
  an annotation for a given class and making that apply to all properties
  unless overridden by per-property annotations.
 <p>
  This method is functionally equivalent to:
 @code

   MyAnnotation ann = propWriter.getAnnotation(MyAnnotation.class);
   if (ann == null) {
     ann = propWriter.getContextAnnotation(MyAnnotation.class);
   }
 
@endcode
  that is, tries to find a property annotation first, but if one is not
  found, tries to find context-annotation (from enclosing class) of
  same type.
 @since 2.5
 */
- (id<JavaLangAnnotationAnnotation>)findAnnotationWithIOSClass:(IOSClass *)acls;

/*!
 @brief Method for accessing annotations directly declared for property that this
  writer is associated with.
 @since 2.5
 */
- (id<JavaLangAnnotationAnnotation>)getAnnotationWithIOSClass:(IOSClass *)acls;

/*!
 @brief Method for accessing annotations declared in context of the property that this
  writer is associated with; usually this means annotations on enclosing class
  for property.
 @since 2.5
 */
- (id<JavaLangAnnotationAnnotation>)getContextAnnotationWithIOSClass:(IOSClass *)acls;

- (ComFasterxmlJacksonDatabindPropertyName *)getFullName;

- (NSString *)getName;

/*!
 @brief Serialization method called when output is to be done as an array,
  that is, not using property names.This is needed when serializing
  container (<code>java.util.Collection</code>, array) types,
  or POJOs using <code>tabular</code> ("as array") output format.
 <p>
  Note that this mode of operation is independent of underlying
  data format; so it is typically NOT called for fully tabular formats such as CSV,
  where logical output is still as form of POJOs.
 */
- (void)serializeAsElementWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief The main serialization method called by filter when property is to be written normally.
 */
- (void)serializeAsFieldWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Serialization method that filter needs to call in cases where property is to be
  filtered, but the underlying data format requires a placeholder of some kind.
 This is usually the case for tabular (positional) data formats such as CSV.
 */
- (void)serializeAsOmittedFieldWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Serialization method called when doing tabular (positional) output from databind,
  but then value is to be omitted.This requires output of a placeholder value
  of some sort; often similar to <code>serializeAsOmittedField</code>.
 */
- (void)serializeAsPlaceholderWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)propDef;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindPropertyMetadata:(ComFasterxmlJacksonDatabindPropertyMetadata *)md;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)base;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerPropertyWriter)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerPropertyWriter_initWithComFasterxmlJacksonDatabindPropertyMetadata_(ComFasterxmlJacksonDatabindSerPropertyWriter *self, ComFasterxmlJacksonDatabindPropertyMetadata *md);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_(ComFasterxmlJacksonDatabindSerPropertyWriter *self, ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerPropertyWriter_initWithComFasterxmlJacksonDatabindSerPropertyWriter_(ComFasterxmlJacksonDatabindSerPropertyWriter *self, ComFasterxmlJacksonDatabindSerPropertyWriter *base);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerPropertyWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyWriter")
