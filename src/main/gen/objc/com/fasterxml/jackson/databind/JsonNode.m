//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonPointer.h"
#include "com/fasterxml/jackson/databind/JsonNode.h"
#include "com/fasterxml/jackson/databind/JsonSerializable.h"
#include "com/fasterxml/jackson/databind/node/JsonNodeType.h"
#include "com/fasterxml/jackson/databind/node/MissingNode.h"
#include "com/fasterxml/jackson/databind/util/ClassUtil.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static ComFasterxmlJacksonDatabindJsonNode *ComFasterxmlJacksonDatabindJsonNode_atWithComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonDatabindJsonNode *self, ComFasterxmlJacksonCoreJsonPointer *ptr);

__attribute__((unused)) static jboolean ComFasterxmlJacksonDatabindJsonNode_isNull(ComFasterxmlJacksonDatabindJsonNode *self);

@implementation ComFasterxmlJacksonDatabindJsonNode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindJsonNode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComFasterxmlJacksonDatabindJsonNode *)deepCopy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)size {
  return 0;
}

- (jboolean)isValueNode {
  switch ([[self getNodeType] ordinal]) {
    case ComFasterxmlJacksonDatabindNodeJsonNodeType_Enum_ARRAY:
    case ComFasterxmlJacksonDatabindNodeJsonNodeType_Enum_OBJECT:
    case ComFasterxmlJacksonDatabindNodeJsonNodeType_Enum_MISSING:
    return false;
    default:
    return true;
  }
}

- (jboolean)isContainerNode {
  ComFasterxmlJacksonDatabindNodeJsonNodeType *type = [self getNodeType];
  return type == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, OBJECT) || type == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, ARRAY);
}

- (jboolean)isMissingNode {
  return false;
}

- (jboolean)isArray {
  return false;
}

- (jboolean)isObject {
  return false;
}

- (ComFasterxmlJacksonDatabindJsonNode *)getWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindJsonNode *)getWithNSString:(NSString *)fieldName {
  return nil;
}

- (ComFasterxmlJacksonDatabindJsonNode *)pathWithNSString:(NSString *)fieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindJsonNode *)pathWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilIterator>)fieldNames {
  return ComFasterxmlJacksonDatabindUtilClassUtil_emptyIterator();
}

- (ComFasterxmlJacksonDatabindJsonNode *)atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)ptr {
  return ComFasterxmlJacksonDatabindJsonNode_atWithComFasterxmlJacksonCoreJsonPointer_(self, ptr);
}

- (ComFasterxmlJacksonDatabindJsonNode *)atWithNSString:(NSString *)jsonPtrExpr {
  return ComFasterxmlJacksonDatabindJsonNode_atWithComFasterxmlJacksonCoreJsonPointer_(self, ComFasterxmlJacksonCoreJsonPointer_compileWithNSString_(jsonPtrExpr));
}

- (ComFasterxmlJacksonDatabindJsonNode *)_atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)ptr {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindNodeJsonNodeType *)getNodeType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isPojo {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, POJO);
}

- (jboolean)isNumber {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, NUMBER);
}

- (jboolean)isIntegralNumber {
  return false;
}

- (jboolean)isFloatingPointNumber {
  return false;
}

- (jboolean)isShort {
  return false;
}

- (jboolean)isInt {
  return false;
}

- (jboolean)isLong {
  return false;
}

- (jboolean)isFloat {
  return false;
}

- (jboolean)isDouble {
  return false;
}

- (jboolean)isBigDecimal {
  return false;
}

- (jboolean)isBigInteger {
  return false;
}

- (jboolean)isTextual {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, STRING);
}

- (jboolean)isBoolean {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, BOOLEAN);
}

- (jboolean)isNull {
  return ComFasterxmlJacksonDatabindJsonNode_isNull(self);
}

- (jboolean)isBinary {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, BINARY);
}

- (jboolean)canConvertToInt {
  return false;
}

- (jboolean)canConvertToLong {
  return false;
}

- (NSString *)textValue {
  return nil;
}

- (IOSByteArray *)binaryValue {
  return nil;
}

- (jboolean)booleanValue {
  return false;
}

- (NSNumber *)numberValue {
  return nil;
}

- (jshort)shortValue {
  return 0;
}

- (jint)intValue {
  return 0;
}

- (jlong)longValue {
  return 0LL;
}

- (jfloat)floatValue {
  return 0.0f;
}

- (jdouble)doubleValue {
  return 0.0;
}

- (JavaMathBigDecimal *)decimalValue {
  return JreLoadStatic(JavaMathBigDecimal, ZERO);
}

- (JavaMathBigInteger *)bigIntegerValue {
  return JreLoadStatic(JavaMathBigInteger, ZERO);
}

- (NSString *)asText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)asTextWithNSString:(NSString *)defaultValue {
  NSString *str = [self asText];
  return (str == nil) ? defaultValue : str;
}

- (jint)asInt {
  return [self asIntWithInt:0];
}

- (jint)asIntWithInt:(jint)defaultValue {
  return defaultValue;
}

- (jlong)asLong {
  return [self asLongWithLong:0LL];
}

- (jlong)asLongWithLong:(jlong)defaultValue {
  return defaultValue;
}

- (jdouble)asDouble {
  return [self asDoubleWithDouble:0.0];
}

- (jdouble)asDoubleWithDouble:(jdouble)defaultValue {
  return defaultValue;
}

- (jboolean)asBoolean {
  return [self asBooleanWithBoolean:false];
}

- (jboolean)asBooleanWithBoolean:(jboolean)defaultValue {
  return defaultValue;
}

- (jboolean)hasWithNSString:(NSString *)fieldName {
  return [self getWithNSString:fieldName] != nil;
}

- (jboolean)hasWithInt:(jint)index {
  return [self getWithInt:index] != nil;
}

- (jboolean)hasNonNullWithNSString:(NSString *)fieldName {
  ComFasterxmlJacksonDatabindJsonNode *n = [self getWithNSString:fieldName];
  return (n != nil) && !ComFasterxmlJacksonDatabindJsonNode_isNull(nil_chk(n));
}

- (jboolean)hasNonNullWithInt:(jint)index {
  ComFasterxmlJacksonDatabindJsonNode *n = [self getWithInt:index];
  return (n != nil) && !ComFasterxmlJacksonDatabindJsonNode_isNull(nil_chk(n));
}

- (id<JavaUtilIterator>)iterator {
  return [self elements];
}

- (id<JavaUtilIterator>)elements {
  return ComFasterxmlJacksonDatabindUtilClassUtil_emptyIterator();
}

- (id<JavaUtilIterator>)fields {
  return ComFasterxmlJacksonDatabindUtilClassUtil_emptyIterator();
}

- (ComFasterxmlJacksonDatabindJsonNode *)findValueWithNSString:(NSString *)fieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)findValuesWithNSString:(NSString *)fieldName {
  id<JavaUtilList> result = [self findValuesWithNSString:fieldName withJavaUtilList:nil];
  if (result == nil) {
    return JavaUtilCollections_emptyList();
  }
  return result;
}

- (id<JavaUtilList>)findValuesAsTextWithNSString:(NSString *)fieldName {
  id<JavaUtilList> result = [self findValuesAsTextWithNSString:fieldName withJavaUtilList:nil];
  if (result == nil) {
    return JavaUtilCollections_emptyList();
  }
  return result;
}

- (ComFasterxmlJacksonDatabindJsonNode *)findPathWithNSString:(NSString *)fieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindJsonNode *)findParentWithNSString:(NSString *)fieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)findParentsWithNSString:(NSString *)fieldName {
  id<JavaUtilList> result = [self findParentsWithNSString:fieldName withJavaUtilList:nil];
  if (result == nil) {
    return JavaUtilCollections_emptyList();
  }
  return result;
}

- (id<JavaUtilList>)findValuesWithNSString:(NSString *)fieldName
                          withJavaUtilList:(id<JavaUtilList>)foundSoFar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)findValuesAsTextWithNSString:(NSString *)fieldName
                                withJavaUtilList:(id<JavaUtilList>)foundSoFar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)findParentsWithNSString:(NSString *)fieldName
                           withJavaUtilList:(id<JavaUtilList>)foundSoFar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindJsonNode *)withWithNSString:(NSString *)propertyName {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$", @"JsonNode not of type ObjectNode (but ", [[self java_getClass] getName], @"), cannot call with() on it"));
}

- (ComFasterxmlJacksonDatabindJsonNode *)withArrayWithNSString:(NSString *)propertyName {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$", @"JsonNode not of type ObjectNode (but ", [[self java_getClass] getName], @"), cannot call withArray() on it"));
}

- (jboolean)equalsWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
 withComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)other {
  return [((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:self withId:other] == 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x11, 6, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x404, 8, 7, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeJsonNodeType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x11, -1, -1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 21, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 22, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 23, 3, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 25, 3, -1, 26, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 27, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x401, 28, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 29, 3, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 23, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 25, 30, -1, 32, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 29, 30, -1, 31, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 33, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 34, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 36, -1, 37, -1, -1 },
    { NULL, "LNSString;", 0x401, 38, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 35, 39, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(deepCopy);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(isValueNode);
  methods[4].selector = @selector(isContainerNode);
  methods[5].selector = @selector(isMissingNode);
  methods[6].selector = @selector(isArray);
  methods[7].selector = @selector(isObject);
  methods[8].selector = @selector(getWithInt:);
  methods[9].selector = @selector(getWithNSString:);
  methods[10].selector = @selector(pathWithNSString:);
  methods[11].selector = @selector(pathWithInt:);
  methods[12].selector = @selector(fieldNames);
  methods[13].selector = @selector(atWithComFasterxmlJacksonCoreJsonPointer:);
  methods[14].selector = @selector(atWithNSString:);
  methods[15].selector = @selector(_atWithComFasterxmlJacksonCoreJsonPointer:);
  methods[16].selector = @selector(getNodeType);
  methods[17].selector = @selector(isPojo);
  methods[18].selector = @selector(isNumber);
  methods[19].selector = @selector(isIntegralNumber);
  methods[20].selector = @selector(isFloatingPointNumber);
  methods[21].selector = @selector(isShort);
  methods[22].selector = @selector(isInt);
  methods[23].selector = @selector(isLong);
  methods[24].selector = @selector(isFloat);
  methods[25].selector = @selector(isDouble);
  methods[26].selector = @selector(isBigDecimal);
  methods[27].selector = @selector(isBigInteger);
  methods[28].selector = @selector(isTextual);
  methods[29].selector = @selector(isBoolean);
  methods[30].selector = @selector(isNull);
  methods[31].selector = @selector(isBinary);
  methods[32].selector = @selector(canConvertToInt);
  methods[33].selector = @selector(canConvertToLong);
  methods[34].selector = @selector(textValue);
  methods[35].selector = @selector(binaryValue);
  methods[36].selector = @selector(booleanValue);
  methods[37].selector = @selector(numberValue);
  methods[38].selector = @selector(shortValue);
  methods[39].selector = @selector(intValue);
  methods[40].selector = @selector(longValue);
  methods[41].selector = @selector(floatValue);
  methods[42].selector = @selector(doubleValue);
  methods[43].selector = @selector(decimalValue);
  methods[44].selector = @selector(bigIntegerValue);
  methods[45].selector = @selector(asText);
  methods[46].selector = @selector(asTextWithNSString:);
  methods[47].selector = @selector(asInt);
  methods[48].selector = @selector(asIntWithInt:);
  methods[49].selector = @selector(asLong);
  methods[50].selector = @selector(asLongWithLong:);
  methods[51].selector = @selector(asDouble);
  methods[52].selector = @selector(asDoubleWithDouble:);
  methods[53].selector = @selector(asBoolean);
  methods[54].selector = @selector(asBooleanWithBoolean:);
  methods[55].selector = @selector(hasWithNSString:);
  methods[56].selector = @selector(hasWithInt:);
  methods[57].selector = @selector(hasNonNullWithNSString:);
  methods[58].selector = @selector(hasNonNullWithInt:);
  methods[59].selector = @selector(iterator);
  methods[60].selector = @selector(elements);
  methods[61].selector = @selector(fields);
  methods[62].selector = @selector(findValueWithNSString:);
  methods[63].selector = @selector(findValuesWithNSString:);
  methods[64].selector = @selector(findValuesAsTextWithNSString:);
  methods[65].selector = @selector(findPathWithNSString:);
  methods[66].selector = @selector(findParentWithNSString:);
  methods[67].selector = @selector(findParentsWithNSString:);
  methods[68].selector = @selector(findValuesWithNSString:withJavaUtilList:);
  methods[69].selector = @selector(findValuesAsTextWithNSString:withJavaUtilList:);
  methods[70].selector = @selector(findParentsWithNSString:withJavaUtilList:);
  methods[71].selector = @selector(withWithNSString:);
  methods[72].selector = @selector(withArrayWithNSString:);
  methods[73].selector = @selector(equalsWithJavaUtilComparator:withComFasterxmlJacksonDatabindJsonNode:);
  methods[74].selector = @selector(description);
  methods[75].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "<T:Lcom/fasterxml/jackson/databind/JsonNode;>()TT;", "get", "I", "LNSString;", "path", "()Ljava/util/Iterator<Ljava/lang/String;>;", "at", "LComFasterxmlJacksonCoreJsonPointer;", "_at", "LJavaIoIOException;", "asText", "asInt", "asLong", "J", "asDouble", "D", "asBoolean", "Z", "has", "hasNonNull", "()Ljava/util/Iterator<Lcom/fasterxml/jackson/databind/JsonNode;>;", "()Ljava/util/Iterator<Ljava/util/Map$Entry<Ljava/lang/String;Lcom/fasterxml/jackson/databind/JsonNode;>;>;", "findValue", "findValues", "(Ljava/lang/String;)Ljava/util/List<Lcom/fasterxml/jackson/databind/JsonNode;>;", "findValuesAsText", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "findPath", "findParent", "findParents", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Lcom/fasterxml/jackson/databind/JsonNode;>;)Ljava/util/List<Lcom/fasterxml/jackson/databind/JsonNode;>;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/String;>;", "with", "withArray", "equals", "LJavaUtilComparator;LComFasterxmlJacksonDatabindJsonNode;", "(Ljava/util/Comparator<Lcom/fasterxml/jackson/databind/JsonNode;>;Lcom/fasterxml/jackson/databind/JsonNode;)Z", "toString", "LNSObject;", "Lcom/fasterxml/jackson/databind/JsonSerializable$Base;Lcom/fasterxml/jackson/core/TreeNode;Ljava/lang/Iterable<Lcom/fasterxml/jackson/databind/JsonNode;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindJsonNode = { "JsonNode", "com.fasterxml.jackson.databind", ptrTable, methods, NULL, 7, 0x401, 76, 0, -1, -1, -1, 40, -1 };
  return &_ComFasterxmlJacksonDatabindJsonNode;
}

@end

void ComFasterxmlJacksonDatabindJsonNode_init(ComFasterxmlJacksonDatabindJsonNode *self) {
  ComFasterxmlJacksonDatabindJsonSerializable_Base_init(self);
}

ComFasterxmlJacksonDatabindJsonNode *ComFasterxmlJacksonDatabindJsonNode_atWithComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonDatabindJsonNode *self, ComFasterxmlJacksonCoreJsonPointer *ptr) {
  if ([((ComFasterxmlJacksonCoreJsonPointer *) nil_chk(ptr)) matches]) {
    return self;
  }
  ComFasterxmlJacksonDatabindJsonNode *n = [self _atWithComFasterxmlJacksonCoreJsonPointer:ptr];
  if (n == nil) {
    return ComFasterxmlJacksonDatabindNodeMissingNode_getInstance();
  }
  return ComFasterxmlJacksonDatabindJsonNode_atWithComFasterxmlJacksonCoreJsonPointer_(n, [ptr tail]);
}

jboolean ComFasterxmlJacksonDatabindJsonNode_isNull(ComFasterxmlJacksonDatabindJsonNode *self) {
  return [self getNodeType] == JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, NULL);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindJsonNode)
