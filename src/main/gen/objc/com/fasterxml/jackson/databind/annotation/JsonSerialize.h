//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindAnnotationJsonSerialize
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindAnnotationJsonSerialize

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationJsonSerialize))
#define ComFasterxmlJacksonDatabindAnnotationJsonSerialize_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion;
@class ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing;
@class IOSClass;

/*!
 @brief Annotation used for configuring serialization aspects, by attaching
  to "getter" methods or fields, or to value classes.
 When annotating value classes, configuration is used for instances
  of the value class but can be overridden by more specific annotations
  (ones that attach to methods or fields).
 <p>
  An example annotation would be:
 @code

    &#64;JsonSerialize(using=MySerializer.class,
     as=MySubClass.class,
     typing=JsonSerialize.Typing.STATIC
   )
 
@endcode
  (which would be redundant, since some properties block others:
  specifically, 'using' has precedence over 'as', which has precedence
  over 'typing' setting)
 */
@protocol ComFasterxmlJacksonDatabindAnnotationJsonSerialize < JavaLangAnnotationAnnotation >

@property (readonly) IOSClass *using__;
@property (readonly) IOSClass *contentUsing;
@property (readonly) IOSClass *keyUsing;
@property (readonly) IOSClass *nullsUsing;
@property (readonly) IOSClass *as;
@property (readonly) IOSClass *keyAs;
@property (readonly) IOSClass *contentAs;
@property (readonly) ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *typing;
@property (readonly) IOSClass *converter;
@property (readonly) IOSClass *contentConverter;
@property (readonly) ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *include;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonDatabindAnnotationJsonSerialize : NSObject < ComFasterxmlJacksonDatabindAnnotationJsonSerialize > {
 @public
  IOSClass *using___;
  IOSClass *contentUsing_;
  IOSClass *keyUsing_;
  IOSClass *nullsUsing_;
  IOSClass *as_;
  IOSClass *keyAs_;
  IOSClass *contentAs_;
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *typing_;
  IOSClass *converter_;
  IOSClass *contentConverter_;
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *include_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize)

FOUNDATION_EXPORT id<ComFasterxmlJacksonDatabindAnnotationJsonSerialize> create_ComFasterxmlJacksonDatabindAnnotationJsonSerialize(IOSClass *as, IOSClass *contentAs, IOSClass *contentConverter, IOSClass *contentUsing, IOSClass *converter, ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *include, IOSClass *keyAs, IOSClass *keyUsing, IOSClass *nullsUsing, ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *typing, IOSClass *using__);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationJsonSerialize)

#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion))
#define ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum) {
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum_ALWAYS = 0,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum_NON_NULL = 1,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum_NON_DEFAULT = 2,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum_NON_EMPTY = 3,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_Enum_DEFAULT_INCLUSION = 4,
};

/*!
 @brief Enumeration used with <code>JsonSerialize.include</code> property
  to define which properties
  of Java Beans are to be included in serialization
 */
@interface ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_values_[];

/*!
 @brief Value that indicates that properties are to be always included,
  independent of value
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_get_ALWAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion, ALWAYS)

/*!
 @brief Value that indicates that only properties with non-null
  values are to be included.
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_get_NON_NULL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion, NON_NULL)

/*!
 @brief Value that indicates that only properties that have values
  that differ from default settings (meaning values they have
  when Bean is constructed with its no-arguments constructor)
  are to be included.Value is generally not useful with 
 <code>java.util.Map</code>s, since they have no default values;
  and if used, works same as <code>ALWAYS</code>.
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_get_NON_DEFAULT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion, NON_DEFAULT)

/*!
 @brief Value that indicates that only properties that have values
  that values that are null or what is considered empty are
  not to be included.
 Emptiness is defined for following type:
 <ul>
  <li>For <code>java.util.Collection</code>s and <code>java.util.Map</code>s,
     method <code>isEmpty()</code> is called;
    </li>
  <li>For Java arrays, empty arrays are ones with length of 0
    </li>
  <li>For Java <code>java.lang.String</code>s, <code>length()</code> is called,
    and return value of 0 indicates empty String   
 </li>
  </ul>
   For other types, non-null values are to be included.
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_get_NON_EMPTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion, NON_EMPTY)

/*!
 @brief Pseudo-value that is used to indicate
  "use whatever is default used at higher level".
 @since 2.3
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_get_DEFAULT_INCLUSION(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion, DEFAULT_INCLUSION)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Inclusion)

#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing))
#define ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_Enum) {
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_Enum_DYNAMIC = 0,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_Enum_STATIC = 1,
  ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_Enum_DEFAULT_TYPING = 2,
};

/*!
 @brief Enumeration used with <code>JsonSerialize.typing</code> property
  to define whether type detection is based on dynamic runtime
  type (DYNAMIC) or declared type (STATIC).
 */
@interface ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_values_[];

/*!
 @brief Value that indicates that the actual dynamic runtime type is to
  be used.
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_get_DYNAMIC(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing, DYNAMIC)

/*!
 @brief Value that indicates that the static declared type is to
  be used.
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_get_STATIC(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing, STATIC)

/*!
 @brief Pseudo-value that is used to indicate
  "use whatever is default used at higher level".
 @since 2.3
 */
inline ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_get_DEFAULT_TYPING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing, DEFAULT_TYPING)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing *ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationJsonSerialize_Typing)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonSerialize")
