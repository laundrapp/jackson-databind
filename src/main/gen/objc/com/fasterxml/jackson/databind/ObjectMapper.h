//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindObjectMapper
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindObjectMapper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindObjectMapper_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectMapper))
#define ComFasterxmlJacksonDatabindObjectMapper_

#define RESTRICT_ComFasterxmlJacksonCoreObjectCodec 1
#define INCLUDE_ComFasterxmlJacksonCoreObjectCodec 1
#include "com/fasterxml/jackson/core/ObjectCodec.h"

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonAutoDetect_Value;
@class ComFasterxmlJacksonAnnotationJsonAutoDetect_Visibility;
@class ComFasterxmlJacksonAnnotationJsonInclude_Include;
@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonAnnotationJsonSetter_Value;
@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonAnnotationPropertyAccessor;
@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoCharacterEscapes;
@class ComFasterxmlJacksonCoreJsonFactory;
@class ComFasterxmlJacksonCoreJsonFactory_Feature;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreTypeResolvedType;
@class ComFasterxmlJacksonCoreTypeTypeReference;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgBaseSettings;
@class ComFasterxmlJacksonDatabindCfgConfigOverrides;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindCfgHandlerInstantiator;
@class ComFasterxmlJacksonDatabindCfgMutableConfigOverride;
@class ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext;
@class ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindDeserializationFeature;
@class ComFasterxmlJacksonDatabindInjectableValues;
@class ComFasterxmlJacksonDatabindIntrospectClassIntrospector;
@class ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsonschemaJsonSchema;
@class ComFasterxmlJacksonDatabindJsontypeSubtypeResolver;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindMappingIterator;
@class ComFasterxmlJacksonDatabindModule;
@class ComFasterxmlJacksonDatabindNodeArrayNode;
@class ComFasterxmlJacksonDatabindNodeJsonNodeFactory;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping;
@class ComFasterxmlJacksonDatabindObjectReader;
@class ComFasterxmlJacksonDatabindObjectWriter;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindSerDefaultSerializerProvider;
@class ComFasterxmlJacksonDatabindSerFilterProvider;
@class ComFasterxmlJacksonDatabindSerSerializerFactory;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializationFeature;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangBoolean;
@class JavaLangClassLoader;
@class JavaNetURL;
@class JavaTextDateFormat;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentConcurrentHashMap;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCorePrettyPrinter;
@protocol ComFasterxmlJacksonCoreTreeNode;
@protocol ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver;
@protocol ComFasterxmlJacksonDatabindIntrospectVisibilityChecker;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangIterable;
@protocol JavaLangReflectType;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief ObjectMapper provides functionality for reading and writing JSON,
  either to and from basic POJOs (Plain Old Java Objects), or to and from
  a general-purpose JSON Tree Model (<code>JsonNode</code>), as well as
  related functionality for performing conversions.
 It is also highly customizable to work both with different styles of JSON
  content, and to support more advanced Object concepts such as
  polymorphism and Object identity. 
 <code>ObjectMapper</code> also acts as a factory for more advanced <code>ObjectReader</code>
  and <code>ObjectWriter</code> classes.
  Mapper (and <code>ObjectReader</code>s, <code>ObjectWriter</code>s it constructs) will
  use instances of <code>JsonParser</code> and <code>JsonGenerator</code>
  for implementing actual reading/writing of JSON.
  Note that although most read and write methods are exposed through this class,
  some of the functionality is only exposed via <code>ObjectReader</code> and 
 <code>ObjectWriter</code>: specifically, reading/writing of longer sequences of
  values is only available through <code>ObjectReader.readValues(InputStream)</code>
  and <code>ObjectWriter.writeValues(OutputStream)</code>.
 <p>
 Simplest usage is of form:
 @code

   final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!
   MyValue value = new MyValue();
   // ... and configure
   File newState = new File("my-stuff.json");
   mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance
   // or, read
   MyValue older = mapper.readValue(new File("my-older-stuff.json"), MyValue.class);
   // Or if you prefer JSON Tree representation:
   JsonNode root = mapper.readTree(newState);
   // and find values by, for example, using a <code>com.fasterxml.jackson.core.JsonPointer</code> expression:
   int age = root.at("/personal/age").getValueAsInt(); 
 
@endcode
 <p>
  The main conversion API is defined in <code>ObjectCodec</code>, so that
  implementation details of this class need not be exposed to
  streaming parser and generator classes. Usage via <code>ObjectCodec</code> is,
  however, usually only for cases where dependency to <code>ObjectMapper</code> is
  either not possible (from Streaming API), or undesireable (when only relying
  on Streaming API).
 <p> 
  Mapper instances are fully thread-safe provided that ALL configuration of the
  instance occurs before ANY read or write calls. If configuration of a mapper instance
  is modified after first usage, changes may or may not take effect, and configuration
  calls themselves may fail.
  If you need to use different configuration, you have two main possibilities:
 <ul>
  <li>Construct and use <code>ObjectReader</code> for reading, <code>ObjectWriter</code> for writing.
     Both types are fully immutable and you can freely create new instances with different
     configuration using either factory methods of <code>ObjectMapper</code>, or readers/writers
     themselves. Construction of new <code>ObjectReader</code>s and <code>ObjectWriter</code>s is
     a very light-weight operation so it is usually appropriate to create these on per-call
     basis, as needed, for configuring things like optional indentation of JSON.  
 </li>
  <li>If the specific kind of configurability is not available via <code>ObjectReader</code> and
    <code>ObjectWriter</code>, you may need to use multiple <code>ObjectMapper</code> instead (for example:
    you cannot change mix-in annotations on-the-fly; or, set of custom (de)serializers).
    To help with this usage, you may want to use method <code>copy()</code> which creates a clone
    of the mapper with specific configuration, and allows configuration of the copied instance
    before it gets used. Note that <code>copy</code> operation is as expensive as constructing
    a new <code>ObjectMapper</code> instance: if possible, you should still pool and reuse mappers
    if you intend to use them for multiple operations.  
 </li>
  </ul>
 <p>
  Note on caching: root-level deserializers are always cached, and accessed
  using full (generics-aware) type information. This is different from
  caching of referenced types, which is more limited and is done only
  for a subset of all deserializer types. The main reason for difference
  is that at root-level there is no incoming reference (and hence no
  referencing property, no referral information or annotations to
  produce differing deserializers), and that the performance impact
  greatest at root level (since it'll essentially cache the full
  graph of deserializers involved).
 <p>
  Notes on security: use "default typing" feature (see <code>enableDefaultTyping()</code>)
  is a potential security risk, if used with untrusted content (content generated by
  untrusted external parties). If so, you may want to construct a custom  
 <code>TypeResolverBuilder</code> implementation to limit possible types to instantiate,
  (using <code>setDefaultTyping</code>).
 */
@interface ComFasterxmlJacksonDatabindObjectMapper : ComFasterxmlJacksonCoreObjectCodec < ComFasterxmlJacksonCoreVersioned, JavaIoSerializable > {
 @public
  /*!
   @brief Factory used to create <code>JsonParser</code> and <code>JsonGenerator</code>
  instances as necessary.
   */
  ComFasterxmlJacksonCoreJsonFactory *_jsonFactory_;
  /*!
   @brief Specific factory used for creating <code>JavaType</code> instances;
  needed to allow modules to add more custom type handling
  (mostly to support types of non-Java JVM languages)
   */
  ComFasterxmlJacksonDatabindTypeTypeFactory *_typeFactory_;
  /*!
   @brief Provider for values to inject in deserialized POJOs.
   */
  ComFasterxmlJacksonDatabindInjectableValues *_injectableValues_;
  /*!
   @brief Thing used for registering sub-types, resolving them to
  super/sub-types as needed.
   */
  ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *_subtypeResolver_;
  /*!
   @brief Currently active per-type configuration overrides, accessed by
  declared type of property.
   @since 2.9
   */
  ComFasterxmlJacksonDatabindCfgConfigOverrides *_configOverrides_;
  /*!
   @brief Mapping that defines how to apply mix-in annotations: key is
  the type to received additional annotations, and value is the
  type that has annotations to "mix in".
   <p>
  Annotations associated with the value classes will be used to
  override annotations of the key class, associated with the
  same field or method. They can be further masked by sub-classes:
  you can think of it as injecting annotations between the target
  class and its sub-classes (or interfaces)
   @since 2.6 (earlier was a simple <code>java.util.Map</code>
   */
  ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *_mixIns_;
  /*!
   @brief Configuration object that defines basic global
  settings for the serialization process
   */
  ComFasterxmlJacksonDatabindSerializationConfig *_serializationConfig_;
  /*!
   @brief Object that manages access to serializers used for serialization,
  including caching.
   It is configured with <code>_serializerFactory</code> to allow
  for constructing custom serializers.
 <p>
  Note: while serializers are only exposed <code>SerializerProvider</code>,
  mappers and readers need to access additional API defined by 
 <code>DefaultSerializerProvider</code>
   */
  ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *_serializerProvider_;
  /*!
   @brief Serializer factory used for constructing serializers.
   */
  ComFasterxmlJacksonDatabindSerSerializerFactory *_serializerFactory_;
  /*!
   @brief Configuration object that defines basic global
  settings for the serialization process
   */
  ComFasterxmlJacksonDatabindDeserializationConfig *_deserializationConfig_;
  /*!
   @brief Blueprint context object; stored here to allow custom
  sub-classes.Contains references to objects needed for
  deserialization construction (cache, factory).
   */
  ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *_deserializationContext_;
  /*!
   @brief Set of module types (as per <code>Module.getTypeId()</code> that have been
  registered; kept track of iff <code>MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS</code>
  is enabled, so that duplicate registration calls can be ignored
  (to avoid adding same handlers multiple times, mostly).
   @since 2.5
   */
  id<JavaUtilSet> _registeredModuleTypes_;
  /*!
   @brief We will use a separate main-level Map for keeping track
  of root-level deserializers.This is where most successful
  cache lookups get resolved.
   Map will contain resolvers for all kinds of types, including
  container types: this is different from the component cache
  which will only cache bean deserializers.
 <p>
  Given that we don't expect much concurrency for additions
  (should very quickly converge to zero after startup), let's
  explicitly define a low concurrency setting.
 <p>
  Since version 1.5, these may are either "raw" deserializers (when
  no type information is needed for base type), or type-wrapped
  deserializers (if it is needed)
   */
  JavaUtilConcurrentConcurrentHashMap *_rootDeserializers_;
}

#pragma mark Public

/*!
 @brief Default constructor, which will construct the default 
 <code>JsonFactory</code> as necessary, use 
 <code>SerializerProvider</code> as its 
 <code>SerializerProvider</code>, and 
 <code>BeanSerializerFactory</code> as its 
 <code>SerializerFactory</code>.
 This means that it
  can serialize all standard JDK types, as well as regular
  Java Beans (based on method names and Jackson-specific annotations),
  but does not support JAXB annotations.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs instance that uses specified <code>JsonFactory</code>
  for constructing necessary <code>JsonParser</code>s and/or 
 <code>JsonGenerator</code>s.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)jf;

/*!
 @brief Constructs instance that uses specified <code>JsonFactory</code>
  for constructing necessary <code>JsonParser</code>s and/or 
 <code>JsonGenerator</code>s, and uses given providers for accessing
  serializers and deserializers.
 @param jf JsonFactory to use: if null, a new <code>MappingJsonFactory</code>  will be constructed
 @param sp SerializerProvider to use: if null, a <code>SerializerProvider</code>  will be constructed
 @param dc Blueprint deserialization context instance to use for creating     actual context objects; if null, will construct standard
      <code>DeserializationContext</code>
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)jf
         withComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)sp
   withComFasterxmlJacksonDatabindDeserDefaultDeserializationContext:(ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *)dc;

/*!
 @brief Method for visiting type hierarchy for given type, using specified visitor.
 <p>
  This method can be used for things like
  generating <a href="http://json-schema.org/">JSON Schema</a>
  instance for specified type.
 @param type Type to generate schema for (possibly with generic signature)
 @since 2.1
 */
- (void)acceptJsonFormatVisitorWithIOSClass:(IOSClass *)type
withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor;

/*!
 @brief Method for visiting type hierarchy for given type, using specified visitor.
 Visitation uses <code>Serializer</code> hierarchy and related properties
 <p>
  This method can be used for things like
  generating <a href="http://json-schema.org/">JSON Schema</a>
  instance for specified type.
 @param type Type to generate schema for (possibly with generic signature)
 @since 2.1
 */
- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor;

/*!
 @brief Method for adding specified <code>DeserializationProblemHandler</code>
  to be used for handling specific problems during deserialization.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)addHandlerWithComFasterxmlJacksonDatabindDeserDeserializationProblemHandler:(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler *)h;

/*!
 @brief Method to use for adding mix-in annotations to use for augmenting
  specified class or interface.All annotations from 
 <code>mixinSource</code> are taken to override annotations
  that <code>target</code> (or its supertypes) has.
 @param target Class (or interface) whose annotations to effectively override
 @param mixinSource Class (or interface) whose annotations are to    be "added" to target's annotations, overriding as necessary
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)addMixInWithIOSClass:(IOSClass *)target
                                                     withIOSClass:(IOSClass *)mixinSource;

/*!
 */
- (void)addMixInAnnotationsWithIOSClass:(IOSClass *)target
                           withIOSClass:(IOSClass *)mixinSource;

/*!
 @brief Method that can be called to check whether mapper thinks
  it could deserialize an Object of given type.
 Check is done by checking whether a registered deserializer can
  be found or built for the type; if not (either by no mapping being
  found, or through an <code>Exception</code> being thrown, false
  is returned.
 <p>
  <b>NOTE</b>: in case an exception is thrown during course of trying
  co construct matching deserializer, it will be effectively swallowed.
  If you want access to that exception, call 
 <code>AtomicReference)</code> instead.
 @return True if mapper can find a serializer for instances of
   given class (potentially serializable), false otherwise (not
   serializable)
 */
- (jboolean)canDeserializeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method similar to <code>canDeserialize(JavaType)</code> but that can return
  actual <code>Throwable</code> that was thrown when trying to construct
  serializer: this may be useful in figuring out what the actual problem is.
 @since 2.3
 */
- (jboolean)canDeserializeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                      withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)cause;

/*!
 @brief Method that can be called to check whether mapper thinks
  it could serialize an instance of given Class.
 Check is done
  by checking whether a serializer can be found for the type.
 <p>
  NOTE: since this method does NOT throw exceptions, but internal
  processing may, caller usually has little information as to why
  serialization would fail. If you want access to internal <code>Exception</code>,
  call <code>AtomicReference)</code> instead.
 @return True if mapper can find a serializer for instances of
   given class (potentially serializable), false otherwise (not
   serializable)
 */
- (jboolean)canSerializeWithIOSClass:(IOSClass *)type;

/*!
 @brief Method similar to <code>canSerialize(Class)</code> but that can return
  actual <code>Throwable</code> that was thrown when trying to construct
  serializer: this may be useful in figuring out what the actual problem is.
 @since 2.3
 */
- (jboolean)canSerializeWithIOSClass:(IOSClass *)type
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)cause;

/*!
 @brief Method for removing all registered <code>DeserializationProblemHandler</code>s
  instances from this mapper.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)clearProblemHandlers;

/*!
@brief Accessor for getting a mutable configuration override object for
  given type, needed to add or change per-type overrides applied
  to properties of given type.
Usage is through returned object by colling "setter" methods, which
  directly modify override object and take effect directly.
  For example you can do
 @code

    mapper.configOverride(java.util.Date.class)
        .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
 @code

  to change the default format to use for properties of type 
 <code>java.util.Date</code> (possibly further overridden by per-property
  annotations)
@since 2.8
 */
- (ComFasterxmlJacksonDatabindCfgMutableConfigOverride *)configOverrideWithIOSClass:(IOSClass *)type;

/*!
 @brief Method for changing state of an on/off deserialization feature for
  this object mapper.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)configureWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)f
                                                                                                withBoolean:(jboolean)state;

/*!
 @brief Method for changing state of specified <code>com.fasterxml.jackson.core.JsonParser.Feature</code>s
  for parser instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method
  on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectReader</code>s as well -- to avoid
  this, use <code>ObjectReader.with(JsonParser.Feature)</code> instead.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)configureWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f
                                                                                        withBoolean:(jboolean)state;

/*!
 @brief Method for changing state of an on/off <code>JsonGenerator</code> feature for
  generator instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method
  on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectWriter</code>s as well -- to avoid
  this, use <code>ObjectWriter.with(JsonGenerator.Feature)</code> instead.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)configureWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f
                                                                                           withBoolean:(jboolean)state;

/*!
 @brief Method for changing state of an on/off mapper feature for
  this mapper instance.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)configureWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f
                                                                                       withBoolean:(jboolean)state;

/*!
 @brief Method for changing state of an on/off serialization feature for
  this object mapper.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)configureWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f
                                                                                              withBoolean:(jboolean)state;

/*!
 @brief Convenience method for constructing <code>JavaType</code> out of given
  type (typically <code>java.lang.Class</code>), but without explicit
  context.
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)t;

/*!
 @brief Convenience method for doing two-step conversion from given value, into
  instance of given value type, if (but only if!)
 conversion is needed.
 If given value is already of requested type, value is returned as is.
 <p>
  This method is functionally similar to first
  serializing given value into JSON, and then binding JSON data into value
  of given type, but should be more efficient since full serialization does
  not (need to) occur.
  However, same converters (serializers, deserializers) will be used as for
  data binding, meaning same object mapper configuration works.
 <p>
  Note that it is possible that in some cases behavior does differ from
  full serialize-then-deserialize cycle: in most case differences are
  unintentional (that is, flaws to fix) and should be reported.
  It is not guaranteed, however, that the behavior is 100% the same:
  the goal is just to allow efficient value conversions for structurally
  compatible Objects, according to standard Jackson configuration.
 <p>
  Further note that functianality is not designed to support "advanced" use
  cases, such as conversion of polymorphic values, or cases where Object Identity
  is used.
 @throw IllegalArgumentExceptionIf conversion fails due to incompatible type;
     if so, root cause will contain underlying checked exception data binding
     functionality threw
 */
- (id)convertValueWithId:(id)fromValue
            withIOSClass:(IOSClass *)toValueType;

/*!
 @brief See <code>Class)</code>
 */
- (id)convertValueWithId:(id)fromValue
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)toValueType;

/*!
 @brief See <code>Class)</code>
 */
- (id)convertValueWithId:(id)fromValue
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)toValueTypeRef;

/*!
 @brief Method for creating a new <code>ObjectMapper</code> instance that
  has same initial configuration as this instance.Note that this
  also requires making a copy of the underlying <code>JsonFactory</code>
  instance.
 <p>
  Method is typically
  used when multiple, differently configured mappers are needed.
  Although configuration is shared, cached serializers and deserializers
  are NOT shared, which means that the new instance may be re-configured
  before use; meaning that it behaves the same way as if an instance
  was constructed from scratch.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)copy__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>
  Note: return type is co-variant, as basic ObjectCodec
  abstraction cannot refer to concrete node types (as it's
  part of core package, whereas impls are part of mapper
  package)
 */
- (ComFasterxmlJacksonDatabindNodeArrayNode *)createArrayNode;

/*!
 @brief <p>
  Note: return type is co-variant, as basic ObjectCodec
  abstraction cannot refer to concrete node types (as it's
  part of core package, whereas impls are part of mapper
  package)
 */
- (ComFasterxmlJacksonDatabindNodeObjectNode *)createObjectNode;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feature;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)first
                                               withComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Method for disabling specified <code>com.fasterxml.jackson.core.JsonParser.Feature</code>s
  for parser instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectReader</code>s as well -- to avoid
  this, use <code>ObjectReader.without(JsonParser.Feature)</code> instead.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for disabling specified <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>s
  for parser instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectWriter</code>s as well -- to avoid
  this, use <code>ObjectWriter.without(JsonGenerator.Feature)</code> instead.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)first
                                               withComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Method for disabling automatic inclusion of type information; if so, only
  explicitly annotated types (ones with 
 <code>com.fasterxml.jackson.annotation.JsonTypeInfo</code>) will have
  additional embedded type information.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)disableDefaultTyping;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feature;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)first
                                              withComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Method for enabling specified <code>com.fasterxml.jackson.core.JsonParser.Feature</code>s
  for parser instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectReader</code>s as well -- to avoid
  this, use <code>ObjectReader.with(JsonParser.Feature)</code> instead.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for enabling specified <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>s
  for parser instances this object mapper creates.
 <p>
  Note that this is equivalent to directly calling same method on <code>getFactory</code>.
 <p>
  WARNING: since this method directly modifies state of underlying <code>JsonFactory</code>,
  it will change observed configuration by <code>ObjectWriter</code>s as well -- to avoid
  this, use <code>ObjectWriter.with(JsonGenerator.Feature)</code> instead.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for enabling specified <code>MapperConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> feature.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f;

/*!
 @brief Method for enabling specified <code>DeserializationConfig</code> features.
 Modifies and returns this instance; no new object is created.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)first
                                              withComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)f;

/*!
 @brief Convenience method that is equivalent to calling
 @code

   enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
 
@endcode
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, and it is recommended that this
  is either not done, or, if enabled, use <code>setDefaultTyping</code>
  passing a custom <code>TypeResolverBuilder</code> implementation that white-lists
  legal types to use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableDefaultTyping;

/*!
 @brief Convenience method that is equivalent to calling
 @code

   enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
 
@endcode
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, and it is recommended that this
  is either not done, or, if enabled, use <code>setDefaultTyping</code>
  passing a custom <code>TypeResolverBuilder</code> implementation that white-lists
  legal types to use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableDefaultTypingWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping:(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)dti;

/*!
 @brief Method for enabling automatic inclusion of type information, needed
  for proper deserialization of polymorphic types (unless types
  have been annotated with <code>com.fasterxml.jackson.annotation.JsonTypeInfo</code>).
 <P>
  NOTE: use of <code>JsonTypeInfo.As#EXTERNAL_PROPERTY</code> <b>NOT SUPPORTED</b>;
  and attempts of do so will throw an <code>IllegalArgumentException</code> to make
  this limitation explicit.
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, and it is recommended that this
  is either not done, or, if enabled, use <code>setDefaultTyping</code>
  passing a custom <code>TypeResolverBuilder</code> implementation that white-lists
  legal types to use.
 @param applicability Defines kinds of types for which additional type information     is added; see 
 <code>DefaultTyping</code>  for more information.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableDefaultTypingWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping:(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)applicability
                                                                         withComFasterxmlJacksonAnnotationJsonTypeInfo_As:(ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)includeAs;

/*!
 @brief Method for enabling automatic inclusion of type information -- needed
  for proper deserialization of polymorphic types (unless types
  have been annotated with <code>com.fasterxml.jackson.annotation.JsonTypeInfo</code>) --
  using "As.PROPERTY" inclusion mechanism and specified property name
  to use for inclusion (default being "@@class" since default type information
  always uses class name as type identifier)
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, and it is recommended that this
  is either not done, or, if enabled, use <code>setDefaultTyping</code>
  passing a custom <code>TypeResolverBuilder</code> implementation that white-lists
  legal types to use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)enableDefaultTypingAsPropertyWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping:(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)applicability
                                                                                                                       withNSString:(NSString *)propertyName;

/*!
 @brief Convenience method that is functionally equivalent to:
 <code>
    mapper.registerModules(mapper.findModules());
 </code>
 <p>
  As with <code>findModules()</code>, no caching is done for modules, so care
  needs to be taken to either create and share a single mapper instance;
  or to cache introspected set of modules.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)findAndRegisterModules;

- (IOSClass *)findMixInClassForWithIOSClass:(IOSClass *)cls;

/*!
 @brief Method for locating available methods, using JDK <code>ServiceLoader</code>
  facility, along with module-provided SPI.
 <p>
  Note that method does not do any caching, so calls should be considered
  potentially expensive.
 @since 2.2
 */
+ (id<JavaUtilList>)findModules;

/*!
 @brief Method for locating available methods, using JDK <code>ServiceLoader</code>
  facility, along with module-provided SPI.
 <p>
  Note that method does not do any caching, so calls should be considered
  potentially expensive.
 @since 2.2
 */
+ (id<JavaUtilList>)findModulesWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

/*!
 @brief Generate <a href="http://json-schema.org/">Json-schema</a>
  instance for specified class.
 @param t The class to generate schema for
 @return Constructed JSON schema.
 */
- (ComFasterxmlJacksonDatabindJsonschemaJsonSchema *)generateJsonSchemaWithIOSClass:(IOSClass *)t;

/*!
 @since 2.5
 */
- (JavaTextDateFormat *)getDateFormat;

/*!
 @brief Method that returns
  the shared default <code>DeserializationConfig</code> object
  that defines configuration settings for deserialization.
 <p>
  Note that since instances are immutable, you can NOT change settings
  by accessing an instance and calling methods: this will simply create
  new instance of config object.
 */
- (ComFasterxmlJacksonDatabindDeserializationConfig *)getDeserializationConfig;

/*!
 @brief Method for getting current <code>DeserializationContext</code>.
 <p>
  Note that since instances are immutable, you can NOT change settings
  by accessing an instance and calling methods: this will simply create
  new instance of context object.
 */
- (ComFasterxmlJacksonDatabindDeserializationContext *)getDeserializationContext;

/*!
 @brief Method that can be used to get hold of <code>JsonFactory</code> that this
  mapper uses if it needs to construct <code>JsonParser</code>s
  and/or <code>JsonGenerator</code>s.
 <p>
  WARNING: note that all <code>ObjectReader</code> and <code>ObjectWriter</code>
  instances created by this mapper usually share the same configured 
 <code>JsonFactory</code>, so changes to its configuration will "leak".
  To avoid such observed changes you should always use "with()" and
  "without()" method of <code>ObjectReader</code> and <code>ObjectWriter</code>
  for changing <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  and <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  settings to use on per-call basis.
 @return <code>JsonFactory</code> that this mapper uses when it needs to
    construct Json parser and generators
 */
- (ComFasterxmlJacksonCoreJsonFactory *)getFactory;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindInjectableValues *)getInjectableValues;

/*!
 */
- (ComFasterxmlJacksonCoreJsonFactory *)getJsonFactory;

/*!
 @brief Method that can be used to get hold of <code>JsonNodeFactory</code>
  that this mapper will use when directly constructing
  root <code>JsonNode</code> instances for Trees.
 <p>
  Note: this is just a shortcut for calling
 @code

    getDeserializationConfig().getNodeFactory()
 
@endcode
 */
- (ComFasterxmlJacksonDatabindNodeJsonNodeFactory *)getNodeFactory;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindPropertyNamingStrategy *)getPropertyNamingStrategy;

/*!
 @brief Method that returns the shared default <code>SerializationConfig</code>
  object that defines configuration settings for serialization.
 <p>
  Note that since instances are immutable, you can NOT change settings
  by accessing an instance and calling methods: this will simply create
  new instance of config object.
 */
- (ComFasterxmlJacksonDatabindSerializationConfig *)getSerializationConfig;

/*!
 @brief Method for getting current <code>SerializerFactory</code>.
 <p>
  Note that since instances are immutable, you can NOT change settings
  by accessing an instance and calling methods: this will simply create
  new instance of factory object.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)getSerializerFactory;

/*!
 @brief Accessor for the "blueprint" (or, factory) instance, from which instances
  are created by calling <code>DefaultSerializerProvider.createInstance</code>.
 Note that returned instance cannot be directly used as it is not properly
  configured: to get a properly configured instance to call, use 
 <code>getSerializerProviderInstance()</code> instead.
 */
- (ComFasterxmlJacksonDatabindSerializerProvider *)getSerializerProvider;

/*!
 @brief Accessor for constructing and returning a <code>SerializerProvider</code>
  instance that may be used for accessing serializers.This is same as
  calling <code>getSerializerProvider</code>, and calling <code>createInstance</code>
  on it.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindSerializerProvider *)getSerializerProviderInstance;

/*!
 @brief Method for accessing subtype resolver in use.
 */
- (ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)getSubtypeResolver;

/*!
 @brief Accessor for getting currently configured <code>TypeFactory</code> instance.
 */
- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

/*!
 @brief Method for accessing currently configured visibility checker;
  object used for determining whether given property element
  (method, field, constructor) can be auto-detected or not.
 */
- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)getVisibilityChecker;

/*!
 @brief Method for checking whether given deserialization-specific
  feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Convenience method, equivalent to:
 @code

   getJsonFactory().isEnabled(f);
 
@endcode
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f;

/*!
 @brief Method for checking whether given <code>MapperFeature</code> is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f;

/*!
 @brief Method for checking whether given serialization-specific
  feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f;

- (jint)mixInCount;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> with
  default settings.Note that the resulting instance is NOT usable as is,
  without defining expected value type.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)reader;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  use specified Base64 encoding variant for Base64-encoded binary data.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)defaultBase64;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithIOSClass:(IOSClass *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  use specified default attributes.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attrs;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> with
  specified feature enabled (compared to settings that this
  mapper instance has).
 Note that the resulting instance is NOT usable as is,
  without defining expected value type.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feature;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> with
  specified features enabled (compared to settings that this
  mapper instance has).
 Note that the resulting instance is NOT usable as is,
  without defining expected value type.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)first
                                              withComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)other;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  pass specific schema object to <code>JsonParser</code> used for
  reading content.
 @param schema Schema to pass to parser
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  use specified injectable values.
 @param injectableValues Injectable values to use
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  use specified <code>JsonNodeFactory</code> for constructing JSON trees.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonDatabindNodeJsonNodeFactory:(ComFasterxmlJacksonDatabindNodeJsonNodeFactory *)f;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  read or update instances of specified type
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerForWithIOSClass:(IOSClass *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  read or update instances of specified type
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerForWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  read or update instances of specified type
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerForWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)type;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  update given Object (usually Bean, but can be a Collection or Map
  as well, but NOT an array) with JSON data.Deserialization occurs
  normally except that the root-level value in JSON is not used for
  instantiating a new object; instead give updateable object is used
  as root.
 Runtime type of value object is used for locating deserializer,
  unless overridden by other factory methods of <code>ObjectReader</code>
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerForUpdatingWithId:(id)valueToUpdate;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  deserialize objects using specified JSON View (filter).
 */
- (ComFasterxmlJacksonDatabindObjectReader *)readerWithViewWithIOSClass:(IOSClass *)view;

/*!
 @brief Method to deserialize JSON content as tree expressed using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist of just a single node if the current
  event is a value event, not container).
 @param content JSON content to parse to build the JSON tree.
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithByteArray:(IOSByteArray *)content;

/*!
 @brief Method to deserialize JSON content as tree expressed using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist of just a single node if the current
  event is a value event, not container).
 @param file File of which contents to parse as JSON for building a tree instance
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Method to deserialize JSON content as tree expressed
  using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist
  of just a single node if the current event is a
  value event, not container).
 <p>
  If a low-level I/O problem (missing input, network error) occurs, a 
 <code>IOException</code> will be thrown.
  If a parsing problem occurs (invalid JSON), 
 <code>JsonParseException</code> will be thrown.
  If no content is found from input (end-of-input), Java 
 <code>null</code> will be returned.
 @param inArg Input stream used to read JSON content    for building the JSON tree.
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method to deserialize JSON content as tree expressed
  using set of <code>JsonNode</code> instances.Returns
  root of the resulting tree (where root can consist
  of just a single node if the current event is a
  value event, not container).
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)readTreeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method to deserialize JSON content as tree expressed
  using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist
  of just a single node if the current event is a
  value event, not container).
 <p>
  If a low-level I/O problem (missing input, network error) occurs, a 
 <code>IOException</code> will be thrown.
  If a parsing problem occurs (invalid JSON), 
 <code>JsonParseException</code> will be thrown.
  If no content is found from input (end-of-input), Java 
 <code>null</code> will be returned.
 @param r Reader used to read JSON content    for building the JSON tree.
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoReader:(JavaIoReader *)r;

/*!
 @brief Method to deserialize JSON content as tree expressed using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist of just a single node if the current
  event is a value event, not container).
 <p>
  If a low-level I/O problem (missing input, network error) occurs, a 
 <code>IOException</code> will be thrown.
  If a parsing problem occurs (invalid JSON), 
 <code>JsonParseException</code> will be thrown.
  If no content is found from input (end-of-input), Java 
 <code>null</code> will be returned.
 @param content JSON content to parse to build the JSON tree.
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithNSString:(NSString *)content;

/*!
 @brief Method to deserialize JSON content as tree expressed using set of <code>JsonNode</code> instances.
 Returns root of the resulting tree (where root can consist of just a single node if the current
  event is a value event, not container).
 @param source URL to use for fetching contents to parse as JSON for building a tree instance
 @return a <code>JsonNode</code>, if valid JSON content found; null
    if input has no content to bind -- note, however, that if
    JSON <code>null</code> token is found, it will be represented
    as a non-null <code>JsonNode</code> (one that returns <code>true</code>
    for <code>JsonNode.isNull()</code>
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaNetURL:(JavaNetURL *)source;

- (id)readValueWithByteArray:(IOSByteArray *)src
                withIOSClass:(IOSClass *)valueType;

- (id)readValueWithByteArray:(IOSByteArray *)src
                     withInt:(jint)offset
                     withInt:(jint)len
                withIOSClass:(IOSClass *)valueType;

- (id)readValueWithByteArray:(IOSByteArray *)src
                     withInt:(jint)offset
                     withInt:(jint)len
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (id)readValueWithByteArray:(IOSByteArray *)src
                     withInt:(jint)offset
                     withInt:(jint)len
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

- (id)readValueWithByteArray:(IOSByteArray *)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (id)readValueWithByteArray:(IOSByteArray *)src
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

- (id)readValueWithJavaIoDataInput:(id<JavaIoDataInput>)src
                      withIOSClass:(IOSClass *)valueType;

- (id)readValueWithJavaIoDataInput:(id<JavaIoDataInput>)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method to deserialize JSON content from given file into given Java type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithJavaIoFile:(JavaIoFile *)src
                 withIOSClass:(IOSClass *)valueType;

/*!
 @brief Method to deserialize JSON content from given file into given Java type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithJavaIoFile:(JavaIoFile *)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method to deserialize JSON content from given file into given Java type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithJavaIoFile:(JavaIoFile *)src
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

- (id)readValueWithJavaIoInputStream:(JavaIoInputStream *)src
                        withIOSClass:(IOSClass *)valueType;

- (id)readValueWithJavaIoInputStream:(JavaIoInputStream *)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (id)readValueWithJavaIoInputStream:(JavaIoInputStream *)src
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method to deserialize JSON content into a non-container
  type (it can be an array type, however): typically a bean, array
  or a wrapper type (like <code>java.lang.Boolean</code>).
 <p>
  Note: this method should NOT be used if the result type is a
  container (<code>java.util.Collection</code> or <code>java.util.Map</code>.
  The reason is that due to type erasure, key and value types
  cannot be introspected when using this method.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                        withIOSClass:(IOSClass *)valueType;

/*!
 @brief Type-safe overloaded method, basically alias for <code>Class)</code>.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method to deserialize JSON content into a Java type, reference
  to which is passed as argument.Type is passed using 
  Jackson specific type; instance of which can be constructed using 
 <code>TypeFactory</code>.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
         withComFasterxmlJacksonCoreTypeResolvedType:(ComFasterxmlJacksonCoreTypeResolvedType *)valueType;

/*!
 @brief Method to deserialize JSON content into a Java type, reference
  to which is passed as argument.Type is passed using so-called
  "super type token" (see )
  and specifically needs to be used if the root type is a 
  parameterized (generic) container type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
        withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

- (id)readValueWithJavaIoReader:(JavaIoReader *)src
                   withIOSClass:(IOSClass *)valueType;

- (id)readValueWithJavaIoReader:(JavaIoReader *)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (id)readValueWithJavaIoReader:(JavaIoReader *)src
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method to deserialize JSON content from given JSON content String.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithNSString:(NSString *)content
               withIOSClass:(IOSClass *)valueType;

/*!
 @brief Method to deserialize JSON content from given JSON content String.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithNSString:(NSString *)content
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method to deserialize JSON content from given JSON content String.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithNSString:(NSString *)content
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method to deserialize JSON content from given resource into given Java type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithJavaNetURL:(JavaNetURL *)src
                 withIOSClass:(IOSClass *)valueType;

- (id)readValueWithJavaNetURL:(JavaNetURL *)src
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method to deserialize JSON content from given resource into given Java type.
 @throw IOExceptionif a low-level I/O problem (unexpected end-of-input,
    network error) occurs (passed through as-is without additional wrapping -- note
    that this is one case where <code>DeserializationFeature.WRAP_EXCEPTIONS</code>
    does NOT result in wrapping of exception even if enabled)
 @throw JsonParseExceptionif underlying input contains invalid content
     of type <code>JsonParser</code> supports (JSON for default case)
 @throw JsonMappingExceptionif the input JSON structure does not match structure
    expected for result type (or has other mismatch issues)
 */
- (id)readValueWithJavaNetURL:(JavaNetURL *)src
withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Convenience method, equivalent in function to:
 @code

    readerFor(valueType).readValues(p);
 
@endcode
 <p>
  Type-safe overload of <code>ResolvedType)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                                   withIOSClass:(IOSClass *)valueType;

/*!
 @brief Convenience method, equivalent in function to:
 @code

    readerFor(valueType).readValues(p);
 
@endcode
 <p>
  Type-safe overload of <code>ResolvedType)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                        withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Convenience method, equivalent in function to:
 @code

    readerFor(valueType).readValues(p);
 
@endcode
 <p>
  Method for reading sequence of Objects from parser stream.
 Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> <b>MUST</b> point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> (one that
  contains values to read) but rather to the token following it which is the first
  token of the first value to read.
 <p>
  Note that <code>ObjectReader</code> has more complete set of variants.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                    withComFasterxmlJacksonCoreTypeResolvedType:(ComFasterxmlJacksonCoreTypeResolvedType *)valueType;

/*!
 @brief Method for reading sequence of Objects from parser stream.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                   withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method for registering a module that can extend functionality
  provided by this mapper; for example, by adding providers for
  custom serializers and deserializers.
 @param module Module to register
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)registerModuleWithComFasterxmlJacksonDatabindModule:(ComFasterxmlJacksonDatabindModule *)module;

/*!
 @brief Convenience method for registering specified modules in order;
  functionally equivalent to:
 @code

    for (Module module : modules) {
       registerModule(module);
    }
 
@endcode
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)registerModulesWithJavaLangIterable:(id<JavaLangIterable>)modules;

/*!
 @brief Convenience method for registering specified modules in order;
  functionally equivalent to:
 @code

    for (Module module : modules) {
       registerModule(module);
    }
 
@endcode
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)registerModulesWithComFasterxmlJacksonDatabindModuleArray:(IOSObjectArray *)modules;

/*!
 @brief Method for registering specified class as a subtype, so that
  typename-based resolution can link supertypes to subtypes
  (as an alternative to using annotations).
 Type for given class is determined from appropriate annotation;
  or if missing, default name (unqualified class name)
 */
- (void)registerSubtypesWithIOSClassArray:(IOSObjectArray *)classes;

/*!
 @since 2.9
 */
- (void)registerSubtypesWithJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method for registering specified class as a subtype, so that
  typename-based resolution can link supertypes to subtypes
  (as an alternative to using annotations).
 Name may be provided as part of argument, but if not will
  be based on annotations or use default name (unqualified
  class name).
 */
- (void)registerSubtypesWithComFasterxmlJacksonDatabindJsontypeNamedTypeArray:(IOSObjectArray *)types;

/*!
 @brief Method for setting <code>AnnotationIntrospector</code> used by this
  mapper instance for both serialization and deserialization.
 Note that doing this will replace the current introspector, which
  may lead to unavailability of core Jackson annotations.
  If you want to combine handling of multiple introspectors,
  have a look at <code>com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair</code>.
 - seealso: com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Method for changing <code>AnnotationIntrospector</code> instances used
  by this mapper instance for serialization and deserialization,
  specifying them separately so that different introspection can be
  used for different aspects
 @since 2.1
 @param serializerAI<code>AnnotationIntrospector</code>  to use for configuring     serialization
 @param deserializerAI<code>AnnotationIntrospector</code>  to use for configuring     deserialization
 - seealso: com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setAnnotationIntrospectorsWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)serializerAI
                                                                       withComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)deserializerAI;

/*!
 @brief Method that will configure default <code>Base64Variant</code> that 
 <code>byte[]</code> serializers and deserializers will use.
 @param v Base64 variant to use
 @return This mapper, for convenience to allow chaining
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setBase64VariantWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)v;

/*!
 @brief Method that allows overriding of the underlying <code>DeserializationConfig</code>
  object.
 It is added as a fallback method that may be used if no other configuration
  modifier method works: it should not be used if there are alternatives,
  and its use is generally discouraged.
 <p>
  <b>NOTE</b>: only use this method if you know what you are doing -- it allows
  by-passing some of checks applied to other configuration methods.
  Also keep in mind that as with all configuration of <code>ObjectMapper</code>,
  this is only thread-safe if done before calling any deserialization methods.
 @since 2.4
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setConfigWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Method that allows overriding of the underlying <code>SerializationConfig</code>
  object, which contains serialization-specific configuration settings.
 It is added as a fallback method that may be used if no other configuration
  modifier method works: it should not be used if there are alternatives,
  and its use is generally discouraged.
 <p>
  <b>NOTE</b>: only use this method if you know what you are doing -- it allows
  by-passing some of checks applied to other configuration methods.
  Also keep in mind that as with all configuration of <code>ObjectMapper</code>,
  this is only thread-safe if done before calling any serialization methods.
 @since 2.4
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setConfigWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config;

/*!
 @brief Method for configuring the default <code>DateFormat</code> to use when serializing time
  values as Strings, and deserializing from JSON Strings.
 This is preferably to directly modifying <code>SerializationConfig</code> and 
 <code>DeserializationConfig</code> instances.
  If you need per-request configuration, use <code>writer(DateFormat)</code> to
  create properly configured <code>ObjectWriter</code> and use that; this because 
 <code>ObjectWriter</code>s are thread-safe whereas ObjectMapper itself is only
  thread-safe when configuring methods (such as this one) are NOT called.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)dateFormat;

/*!
 @brief Method for setting default Setter configuration, regarding things like
  merging, null-handling; used for properties for which there are
  no per-type or per-property overrides (via annotations or config overrides).
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultMergeableWithJavaLangBoolean:(JavaLangBoolean *)b;

/*!
 @brief Method for specifying <code>PrettyPrinter</code> to use when "default pretty-printing"
  is enabled (by enabling <code>SerializationFeature.INDENT_OUTPUT</code>)
 @param pp Pretty printer to use by default.
 @return This mapper, useful for call-chaining
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultPrettyPrinterWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

/*!
 @brief Short-cut for:
 @code

   setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl));
 
@endcode
 @since 2.9 (basically rename of <code>setPropertyInclusion</code>)
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultPropertyInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)incl;

/*!
 @brief Method for setting default POJO property inclusion strategy for serialization,
  applied for all properties for which there are no per-type or per-property
  overrides (via annotations or config overrides).
 @since 2.9 (basically rename of <code>setPropertyInclusion</code>)
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultPropertyInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)incl;

/*!
 @brief Method for setting default Setter configuration, regarding things like
  merging, null-handling; used for properties for which there are
  no per-type or per-property overrides (via annotations or config overrides).
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultSetterInfoWithComFasterxmlJacksonAnnotationJsonSetter_Value:(ComFasterxmlJacksonAnnotationJsonSetter_Value *)v;

/*!
 @brief Method for enabling automatic inclusion of type information, using
  specified handler object for determining which types this affects,
  as well as details of how information is embedded.
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, so care should be taken to use
  a <code>TypeResolverBuilder</code> that can limit allowed classes to
  deserialize.
 @param typer Type information inclusion handler
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultTypingWithComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder:(id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typer;

/*!
 @brief Method for setting auto-detection visibility definition
  defaults, which are in effect unless overridden by
  annotations (like <code>JsonAutoDetect</code>) or per-type
  visibility overrides.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setDefaultVisibilityWithComFasterxmlJacksonAnnotationJsonAutoDetect_Value:(ComFasterxmlJacksonAnnotationJsonAutoDetect_Value *)vis;

/*!
 @brief Method for configuring this mapper to use specified <code>FilterProvider</code> for
  mapping Filter Ids to actual filter instances.
 <p>
  Note that usually it is better to use method <code>writer(FilterProvider)</code>;
  however, sometimes
  this method is more convenient. For example, some frameworks only allow configuring
  of ObjectMapper instances and not <code>ObjectWriter</code>s.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setFilterProviderWithComFasterxmlJacksonDatabindSerFilterProvider:(ComFasterxmlJacksonDatabindSerFilterProvider *)filterProvider;

/*!
 */
- (void)setFiltersWithComFasterxmlJacksonDatabindSerFilterProvider:(ComFasterxmlJacksonDatabindSerFilterProvider *)filterProvider;

/*!
 @brief Method for configuring <code>HandlerInstantiator</code> to use for creating
  instances of handlers (such as serializers, deserializers, type and type
  id resolvers), given a class.
 @param hi Instantiator to use; if null, use the default implementation
 */
- (id)setHandlerInstantiatorWithComFasterxmlJacksonDatabindCfgHandlerInstantiator:(ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)hi;

/*!
 @brief Method for configuring <code>InjectableValues</code> which used to find
  values to inject.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setInjectableValuesWithComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues;

/*!
 @brief Method for overriding default locale to use for formatting.
 Default value used is <code>Locale.getDefault()</code>.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 */
- (void)setMixInAnnotationsWithJavaUtilMap:(id<JavaUtilMap>)sourceMixins;

/*!
 @brief Method that can be called to specify given resolver for locating
  mix-in classes to use, overriding directly added mappings.
 Note that direct mappings are not cleared, but they are only applied
  if resolver does not provide mix-in matches.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setMixInResolverWithComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver:(id<ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver>)resolver;

/*!
 @brief Method to use for defining mix-in annotations to use for augmenting
  annotations that processable (serializable / deserializable)
  classes have.
 Mixing in is done when introspecting class annotations and properties.
  Map passed contains keys that are target classes (ones to augment
  with new annotation overrides), and values that are source classes
  (have annotations to use for augmentation).
  Annotations from source classes (and their supertypes)
  will <b>override</b>
  annotations that target classes (and their super-types) have.
 <p>
  Note that this method will CLEAR any previously defined mix-ins
  for this mapper.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setMixInsWithJavaUtilMap:(id<JavaUtilMap>)sourceMixins;

/*!
 @brief Method for specifying <code>JsonNodeFactory</code> to use for
  constructing root level tree nodes (via method 
 <code>createObjectNode</code>
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setNodeFactoryWithComFasterxmlJacksonDatabindNodeJsonNodeFactory:(ComFasterxmlJacksonDatabindNodeJsonNodeFactory *)f;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setPropertyInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)incl;

/*!
 @brief Method for setting custom property naming strategy to use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setPropertyNamingStrategyWithComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)s;

/*!
 @brief Convenience method, equivalent to calling:
 @code

   setPropertyInclusion(JsonInclude.Value.construct(incl, incl));
 
@endcode
 <p>
  NOTE: behavior differs slightly from 2.8, where second argument was
  implied to be <code>JsonInclude.Include.ALWAYS</code>.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setSerializationInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)incl;

/*!
 @brief Method for setting specific <code>SerializerFactory</code> to use
  for constructing (bean) serializers.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setSerializerFactoryWithComFasterxmlJacksonDatabindSerSerializerFactory:(ComFasterxmlJacksonDatabindSerSerializerFactory *)f;

/*!
 @brief Method for setting "blueprint" <code>SerializerProvider</code> instance
  to use as the base for actual provider instances to use for handling
  caching of <code>JsonSerializer</code> instances.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setSerializerProviderWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)p;

/*!
 @brief Method for setting custom subtype resolver to use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setSubtypeResolverWithComFasterxmlJacksonDatabindJsontypeSubtypeResolver:(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)str;

/*!
 @brief Method for overriding default TimeZone to use for formatting.
 Default value used is UTC (NOT default TimeZone of JVM).
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @brief Method that can be used to override <code>TypeFactory</code> instance
  used by this mapper.
 <p>
  Note: will also set <code>TypeFactory</code> that deserialization and
  serialization config objects use.
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setTypeFactoryWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)f;

/*!
 @brief Convenience method that allows changing configuration for
  underlying <code>VisibilityChecker</code>s, to change details of what kinds of
  properties are auto-detected.
 Basically short cut for doing:
 @code

   mapper.setVisibilityChecker(
      mapper.getVisibilityChecker().withVisibility(forMethod, visibility)
   );
 
@endcode
  one common use case would be to do:
 @code

   mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);
 
@endcode
  which would make all member fields serializable without further annotations,
  instead of just public fields (default setting).
 @param forMethod Type of property descriptor affected (field, getter/isGetter,      setter, creator)
 @param visibility Minimum visibility to require for the property descriptors of type
 @return Modified mapper instance (that is, "this"), to allow chaining
     of configuration calls
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setVisibilityWithComFasterxmlJacksonAnnotationPropertyAccessor:(ComFasterxmlJacksonAnnotationPropertyAccessor *)forMethod
                                                 withComFasterxmlJacksonAnnotationJsonAutoDetect_Visibility:(ComFasterxmlJacksonAnnotationJsonAutoDetect_Visibility *)visibility;

/*!
 @brief Method for setting currently configured default <code>VisibilityChecker</code>,
  object used for determining whether given property element
  (method, field, constructor) can be auto-detected or not.
 This default checker is used as the base visibility:
  per-class overrides (both via annotations and per-type config overrides)
  can further change these settings.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectMapper *)setVisibilityWithComFasterxmlJacksonDatabindIntrospectVisibilityChecker:(id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)vc;

/*!
 */
- (void)setVisibilityCheckerWithComFasterxmlJacksonDatabindIntrospectVisibilityChecker:(id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)vc;

/*!
 @brief Method for constructing a <code>JsonParser</code> out of JSON tree
  representation.
 @param n Root node of the tree that resulting parser will read from
 */
- (ComFasterxmlJacksonCoreJsonParser *)treeAsTokensWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)n;

/*!
 @brief Convenience conversion method that will bind data given JSON tree
  contains into specific value (usually bean) type.
 <p>
  Functionally equivalent to:
 @code

    objectMapper.convertValue(n, valueClass);
 
@endcode
 */
- (id)treeToValueWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)n
                                        withIOSClass:(IOSClass *)valueType;

/*!
 @brief Convenience method similar to <code>JavaType)</code> but one
  in which
 <p>
  Implementation is approximately as follows:
 <ol>
  <li>Serialize `updateWithValue` into <code>TokenBuffer</code></li>
  <li>Construct <code>ObjectReader</code> with `valueToUpdate` (using <code>readerForUpdating(Object)</code>)
    </li>
  <li>Construct <code>JsonParser</code> (using <code>TokenBuffer.asParser()</code>)
    </li>
  <li>Update using <code>ObjectReader.readValue(JsonParser)</code>.
 </li>
  <li>Return `valueToUpdate`
    </li>
 </ol>
 <p>
  Note that update is "shallow" in that only first level of properties (or, immediate contents
  of container to update) are modified, unless properties themselves indicate that
  merging should be applied for contents. Such merging can be specified using
  annotations (see <code>JsonMerge</code>) as well as using "config overrides" (see 
 <code>configOverride(Class)</code> and <code>setDefaultMergeable(Boolean)</code>).
 @param valueToUpdate Object to update
 @param overrides Object to conceptually serialize and merge into value to      update; can be thought of as a provider for overrides to apply.
 @return Either the first argument (`valueToUpdate`), if it is mutable; or a result of
      creating new instance that is result of "merging" values (for example, "updating" a
      Java array will create a new array)
 @throw JsonMappingExceptionif there are structural incompatibilities that prevent update.
 @since 2.9
 */
- (id)updateValueWithId:(id)valueToUpdate
                 withId:(id)overrides;

/*!
 @brief Reverse of <code>treeToValue</code>; given a value (usually bean), will
  construct equivalent JSON Tree representation.Functionally similar
  to serializing value into JSON and parsing JSON as tree, but
  more efficient.
 <p>
  NOTE: while results are usually identical to that of serialization followed
  by deserialization, this is not always the case. In some cases serialization
  into intermediate representation will retain encapsulation of things like
  raw value (<code>com.fasterxml.jackson.databind.util.RawValue</code>) or basic
  node identity (<code>JsonNode</code>). If so, result is a valid tree, but values
  are not re-constructed through actual JSON representation. So if transformation
  requires actual materialization of JSON (or other data format that this mapper
  produces), it will be necessary to do actual serialization.
 @param fromValue Bean value to convert
 @return Root node of the resulting JSON tree
 */
- (ComFasterxmlJacksonDatabindJsonNode *)valueToTreeWithId:(id)fromValue;

/*!
 @brief Method that will return version information stored in and read from jar
  that contains this class.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

/*!
 @brief Convenience method for constructing <code>ObjectWriter</code>
  with default settings.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writer;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  use specified Base64 encoding variant for Base64-encoded binary data.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)defaultBase64;

/*!
 @brief Factory method for constructing <code>ObjectReader</code> that will
  use specified character escaping details for output.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)escapes;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  use specified default attributes.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attrs;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified <code>DateFormat</code>; or, if
  null passed, using timestamp (64-bit number.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithJavaTextDateFormat:(JavaTextDateFormat *)df;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified filter provider.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonDatabindSerFilterProvider:(ComFasterxmlJacksonDatabindSerFilterProvider *)filterProvider;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  pass specific schema object to <code>JsonGenerator</code> used for
  writing content.
 @param schema Schema to pass to generator
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified pretty printer for indentation
  (or if null, no pretty printer)
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> with
  specified feature enabled (compared to settings that this
  mapper instance has).
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)feature;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> with
  specified features enabled (compared to settings that this
  mapper instance has).
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)first
                                              withComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)other;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified root type, instead of actual
  runtime type of value.Type must be a super-type of runtime type.
 <p>
  Main reason for using this method is performance, as writer is able
  to pre-fetch serializer to use before write, and if writer is used
  more than once this avoids addition per-value serializer lookups.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerForWithIOSClass:(IOSClass *)rootType;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified root type, instead of actual
  runtime type of value.Type must be a super-type of runtime type.
 <p>
  Main reason for using this method is performance, as writer is able
  to pre-fetch serializer to use before write, and if writer is used
  more than once this avoids addition per-value serializer lookups.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerForWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified root type, instead of actual
  runtime type of value.Type must be a super-type of runtime type.
 <p>
  Main reason for using this method is performance, as writer is able
  to pre-fetch serializer to use before write, and if writer is used
  more than once this avoids addition per-value serializer lookups.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerForWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)rootType;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using the default pretty printer for indentation
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithDefaultPrettyPrinter;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithTypeWithIOSClass:(IOSClass *)rootType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)rootType;

/*!
 @brief Factory method for constructing <code>ObjectWriter</code> that will
  serialize objects using specified JSON View (filter).
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)writerWithViewWithIOSClass:(IOSClass *)serializationView;

/*!
 @brief Method to serialize given JSON Tree, using generator
  provided.
 */
- (void)writeTreeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
                  withComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)rootNode;

- (void)writeTreeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
                      withComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)rootNode;

/*!
 @since 2.8
 */
- (void)writeValueWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                                withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, written to File provided.
 */
- (void)writeValueWithJavaIoFile:(JavaIoFile *)resultFile
                          withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using provided <code>JsonGenerator</code>.
 */
- (void)writeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                    withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using output stream provided (using encoding 
 <code>JsonEncoding.UTF8</code>).
 <p>
  Note: method does not close the underlying stream explicitly
  here; however, <code>JsonFactory</code> this mapper uses may choose
  to close the stream depending on its settings (by default,
  it will try to close it when <code>JsonGenerator</code> we construct
  is closed).
 */
- (void)writeValueWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                  withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using Writer provided.
 <p>
  Note: method does not close the underlying stream explicitly
  here; however, <code>JsonFactory</code> this mapper uses may choose
  to close the stream depending on its settings (by default,
  it will try to close it when <code>JsonGenerator</code> we construct
  is closed).
 */
- (void)writeValueWithJavaIoWriter:(JavaIoWriter *)w
                            withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  a byte array.Functionally equivalent to calling 
 <code>writeValue(Writer,Object)</code> with <code>java.io.ByteArrayOutputStream</code>
  and getting bytes, but more efficient.
 Encoding used will be UTF-8.
 <p>
  Note: prior to version 2.1, throws clause included <code>IOException</code>; 2.1 removed it.
 */
- (IOSByteArray *)writeValueAsBytesWithId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  a String.Functionally equivalent to calling 
 <code>writeValue(Writer,Object)</code> with <code>java.io.StringWriter</code>
  and constructing String, but more efficient.
 <p>
  Note: prior to version 2.1, throws clause included <code>IOException</code>; 2.1 removed it.
 */
- (NSString *)writeValueAsStringWithId:(id)value;

#pragma mark Protected

/*!
 @brief Copy-constructor, mostly used to support <code>copy</code>.
 @since 2.1
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)src;

/*!
 @since 2.1
 */
- (void)_checkInvalidCopyWithIOSClass:(IOSClass *)exp;

/*!
 @brief Method called to configure the generator as necessary and then
  call write functionality
 */
- (void)_configAndWriteValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                              withId:(id)value;

/*!
 @brief Actual conversion implementation: instead of using existing read
  and write methods, much of code is inlined.Reason for this is
  that we must avoid root value wrapping/unwrapping both for efficiency and
  for correctness.
 If root value wrapping/unwrapping is actually desired,
  caller must use explicit <code>writeValue</code> and 
 <code>readValue</code> methods.
 */
- (id)_convertWithId:(id)fromValue
withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)toValueType;

/*!
 @brief Method called to locate deserializer for the passed root-level value.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_findRootDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (ComFasterxmlJacksonCoreJsonToken *)_initForReadingWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method called to ensure that given parser is ready for reading
  content for data binding.
 @return First token to be used for data binding after this call:
   can never be null as exception will be thrown if parser cannot
   provide more tokens.
 @throw IOExceptionif the underlying input source has problems during
    parsing
 @throw JsonParseExceptionif parser has problems parsing content
 @throw JsonMappingExceptionif the parser does not have any more
    content to map (note: Json "null" value is considered content;
    enf-of-stream not)
 */
- (ComFasterxmlJacksonCoreJsonToken *)_initForReadingWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method sub-classes must override, to produce <code>ObjectReader</code>
  instances of proper sub-type
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)_newReaderWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method sub-classes must override, to produce <code>ObjectReader</code>
  instances of proper sub-type
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)_newReaderWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                                                                                     withId:(id)valueToUpdate
                                                                    withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema
                                                            withComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method sub-classes must override, to produce <code>ObjectWriter</code>
  instances of proper sub-type
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWriterWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method sub-classes must override, to produce <code>ObjectWriter</code>
  instances of proper sub-type
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWriterWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                  withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method sub-classes must override, to produce <code>ObjectWriter</code>
  instances of proper sub-type
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWriterWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                                                                 withComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp OBJC_METHOD_FAMILY_NONE;

- (id)_readMapAndCloseWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p0
                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Similar to <code>_readMapAndClose</code> but specialized for <code>JsonNode</code>
  reading.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonNode *)_readTreeAndCloseWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p0;

/*!
 @brief Actual implementation of value reading+binding operation.
 */
- (id)_readValueWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)cfg
                               withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Overridable helper method used for constructing 
 <code>SerializerProvider</code> to use for serialization.
 */
- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)_serializerProviderWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config;

- (id)_unwrapAndDeserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
            withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                 withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

/*!
 @since 2.9
 */
- (void)_verifyNoTrailingTokensWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
               withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)bindType;

/*!
 @since 2.2
 */
- (void)_verifySchemaTypeWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Internal helper method called to create an instance of <code>DeserializationContext</code>
  for deserializing a single root value.
 Can be overridden if a custom context is needed.
 */
- (ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *)createDeserializationContextWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                                withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)cfg;

/*!
 @brief Overridable helper method used to construct default <code>ClassIntrospector</code>
  to use.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)defaultClassIntrospector;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectMapper)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _jsonFactory_, ComFasterxmlJacksonCoreJsonFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _typeFactory_, ComFasterxmlJacksonDatabindTypeTypeFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _injectableValues_, ComFasterxmlJacksonDatabindInjectableValues *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _subtypeResolver_, ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _configOverrides_, ComFasterxmlJacksonDatabindCfgConfigOverrides *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _mixIns_, ComFasterxmlJacksonDatabindIntrospectSimpleMixInResolver *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _serializationConfig_, ComFasterxmlJacksonDatabindSerializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _serializerProvider_, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _serializerFactory_, ComFasterxmlJacksonDatabindSerSerializerFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _deserializationConfig_, ComFasterxmlJacksonDatabindDeserializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _deserializationContext_, ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _registeredModuleTypes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper, _rootDeserializers_, JavaUtilConcurrentConcurrentHashMap *)

inline ComFasterxmlJacksonDatabindAnnotationIntrospector *ComFasterxmlJacksonDatabindObjectMapper_get_DEFAULT_ANNOTATION_INTROSPECTOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindAnnotationIntrospector *ComFasterxmlJacksonDatabindObjectMapper_DEFAULT_ANNOTATION_INTROSPECTOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindObjectMapper, DEFAULT_ANNOTATION_INTROSPECTOR, ComFasterxmlJacksonDatabindAnnotationIntrospector *)

/*!
 @brief Base settings contain defaults used for all <code>ObjectMapper</code>
  instances.
 */
inline ComFasterxmlJacksonDatabindCfgBaseSettings *ComFasterxmlJacksonDatabindObjectMapper_get_DEFAULT_BASE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgBaseSettings *ComFasterxmlJacksonDatabindObjectMapper_DEFAULT_BASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindObjectMapper, DEFAULT_BASE, ComFasterxmlJacksonDatabindCfgBaseSettings *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectMapper_init(ComFasterxmlJacksonDatabindObjectMapper *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *new_ComFasterxmlJacksonDatabindObjectMapper_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *create_ComFasterxmlJacksonDatabindObjectMapper_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectMapper *self, ComFasterxmlJacksonCoreJsonFactory *jf);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *new_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonCoreJsonFactory *jf) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *create_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonCoreJsonFactory *jf);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonDatabindObjectMapper_(ComFasterxmlJacksonDatabindObjectMapper *self, ComFasterxmlJacksonDatabindObjectMapper *src);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *new_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonDatabindObjectMapper_(ComFasterxmlJacksonDatabindObjectMapper *src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *create_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonDatabindObjectMapper_(ComFasterxmlJacksonDatabindObjectMapper *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonDatabindDeserDefaultDeserializationContext_(ComFasterxmlJacksonDatabindObjectMapper *self, ComFasterxmlJacksonCoreJsonFactory *jf, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *sp, ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *dc);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *new_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonDatabindDeserDefaultDeserializationContext_(ComFasterxmlJacksonCoreJsonFactory *jf, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *sp, ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *dc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper *create_ComFasterxmlJacksonDatabindObjectMapper_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonDatabindSerDefaultSerializerProvider_withComFasterxmlJacksonDatabindDeserDefaultDeserializationContext_(ComFasterxmlJacksonCoreJsonFactory *jf, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *sp, ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *dc);

FOUNDATION_EXPORT id<JavaUtilList> ComFasterxmlJacksonDatabindObjectMapper_findModules(void);

FOUNDATION_EXPORT id<JavaUtilList> ComFasterxmlJacksonDatabindObjectMapper_findModulesWithJavaLangClassLoader_(JavaLangClassLoader *classLoader);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectMapper)

#endif

#if !defined (ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping))
#define ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_Enum) {
  ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_Enum_JAVA_LANG_OBJECT = 0,
  ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_Enum_OBJECT_AND_NON_CONCRETE = 1,
  ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_Enum_NON_CONCRETE_AND_ARRAYS = 2,
  ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_Enum_NON_FINAL = 3,
};

/*!
 @brief Enumeration used with <code>ObjectMapper.enableDefaultTyping()</code>
  to specify what kind of types (classes) default typing should
  be used for.It will only be used if no explicit type information
  is found, but this enumeration further limits subset of those types.
 <p>
  Since 2.4 there are special exceptions for JSON Tree model
  types (sub-types of <code>TreeNode</code>: default typing is never
  applied to them.
  Since 2.8(.4) additional checks are made to avoid attempts at default
  typing primitive-valued properties.
 <p>
  NOTE: use of Default Typing can be a potential security risk if incoming
  content comes from untrusted sources, and it is recommended that this
  is either not done, or, if enabled, use <code>setDefaultTyping</code>
  passing a custom <code>TypeResolverBuilder</code> implementation that white-lists
  legal types to use.
 */
@interface ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_values_[];

/*!
 @brief This value means that only properties that have 
 <code>java.lang.Object</code> as declared type (including
  generic types without explicit type) will use default
  typing.
 */
inline ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_get_JAVA_LANG_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping, JAVA_LANG_OBJECT)

/*!
 @brief Value that means that default typing will be used for
  properties with declared type of <code>java.lang.Object</code>
  or an abstract type (abstract class or interface).
 Note that this does <b>not</b> include array types.
 <p>
  Since 2.4, this does NOT apply to <code>TreeNode</code> and its subtypes.
 */
inline ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_get_OBJECT_AND_NON_CONCRETE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping, OBJECT_AND_NON_CONCRETE)

/*!
 @brief Value that means that default typing will be used for
  all types covered by <code>OBJECT_AND_NON_CONCRETE</code>
  plus all array types for them.
 <p>
  Since 2.4, this does NOT apply to <code>TreeNode</code> and its subtypes.
 */
inline ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_get_NON_CONCRETE_AND_ARRAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping, NON_CONCRETE_AND_ARRAYS)

/*!
 @brief Value that means that default typing will be used for
  all non-final types, with exception of small number of
  "natural" types (String, Boolean, Integer, Double), which
  can be correctly inferred from JSON; as well as for
  all arrays of non-final types.
 <p>
  Since 2.4, this does NOT apply to <code>TreeNode</code> and its subtypes.
 */
inline ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_get_NON_FINAL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping, NON_FINAL)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping)

#endif

#if !defined (ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder))
#define ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder_

#define RESTRICT_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder 1
#include "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonAnnotationJsonTypeInfo_Id;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@protocol JavaUtilCollection;

/*!
 @brief Customized <code>TypeResolverBuilder</code> that provides type resolver builders
  used with so-called "default typing"
  (see <code>ObjectMapper.enableDefaultTyping()</code> for details).
 <p>
  Type resolver construction is based on configuration: implementation takes care
  of only providing builders in cases where type information should be applied.
  This is important since build calls may be sent for any and all types, and
  type information should NOT be applied to all of them.
 */
@interface ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder : ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder < JavaIoSerializable > {
 @public
  /*!
   @brief Definition of what types is this default typer valid for.
   */
  ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *_appliesFor_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping:(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)t;

- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)buildTypeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                            withJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)buildTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method called to check if the default type handler should be
  used for given type.
 Note: "natural types" (String, Boolean, Integer, Double) will never
  use typing; that is both due to them being concrete and final,
  and since actual serializers and deserializers will also ignore any
  attempts to enforce typing.
 */
- (jboolean)useForTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)t;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)arg0
                              withComFasterxmlJacksonAnnotationJsonTypeInfo_As:(ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)arg1
                                                                  withNSString:(NSString *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder, _appliesFor_, ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder_initWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_(ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder *self, ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *t);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder *new_ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder_initWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder *create_ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder_initWithComFasterxmlJacksonDatabindObjectMapper_DefaultTyping_(ComFasterxmlJacksonDatabindObjectMapper_DefaultTyping *t);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectMapper_DefaultTypeResolverBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectMapper")
