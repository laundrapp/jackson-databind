//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectReader")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindObjectReader
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectReader 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectReader 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindObjectReader

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindObjectReader_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectReader || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectReader))
#define ComFasterxmlJacksonDatabindObjectReader_

#define RESTRICT_ComFasterxmlJacksonCoreObjectCodec 1
#define INCLUDE_ComFasterxmlJacksonCoreObjectCodec 1
#include "com/fasterxml/jackson/core/ObjectCodec.h"

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreFilterTokenFilter;
@class ComFasterxmlJacksonCoreJsonFactory;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreJsonPointer;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreTypeResolvedType;
@class ComFasterxmlJacksonCoreTypeTypeReference;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindDeserDataFormatReaders;
@class ComFasterxmlJacksonDatabindDeserDataFormatReaders_Match;
@class ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext;
@class ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindDeserializationFeature;
@class ComFasterxmlJacksonDatabindInjectableValues;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindMappingIterator;
@class ComFasterxmlJacksonDatabindNodeJsonNodeFactory;
@class ComFasterxmlJacksonDatabindObjectMapper;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaNetURL;
@class JavaUtilConcurrentConcurrentHashMap;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonCoreFormatFeature;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCoreTreeNode;
@protocol JavaIoDataInput;
@protocol JavaLangReflectType;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;

/*!
 @brief Builder object that can be used for per-serialization configuration of
  deserialization parameters, such as root type to use or object
  to update (instead of constructing new instance).
 <p>
  Uses "mutant factory" pattern so that instances are immutable
  (and thus fully thread-safe with no external synchronization);
  new instances are constructed for different configurations.
  Instances are initially constructed by <code>ObjectMapper</code> and can be
  reused, shared, cached; both because of thread-safety and because
  instances are relatively light-weight.
 <p>
  NOTE: this class is NOT meant as sub-classable (with Jackson 2.8 and
  above) by users. It is left as non-final mostly to allow frameworks
  that require bytecode generation for proxying and similar use cases,
  but there is no expecation that functionality should be extended
  by sub-classing.
 */
@interface ComFasterxmlJacksonDatabindObjectReader : ComFasterxmlJacksonCoreObjectCodec < ComFasterxmlJacksonCoreVersioned, JavaIoSerializable > {
 @public
  /*!
   @brief General serialization configuration settings; while immutable,
  can use copy-constructor to create modified instances as necessary.
   */
  ComFasterxmlJacksonDatabindDeserializationConfig *_config_;
  /*!
   @brief Blueprint instance of deserialization context; used for creating
  actual instance when needed.
   */
  ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *_context_;
  /*!
   @brief Factory used for constructing <code>JsonGenerator</code>s
   */
  ComFasterxmlJacksonCoreJsonFactory *_parserFactory_;
  /*!
   @brief Flag that indicates whether root values are expected to be unwrapped or not
   */
  jboolean _unwrapRoot_;
  /*!
   @brief Declared type of value to instantiate during deserialization.
   Defines which deserializer to use; as well as base type of instance
  to construct if an updatable value is not configured to be used
  (subject to changes by embedded type information, for polymorphic
  types). If <code>_valueToUpdate</code> is non-null, only used for
  locating deserializer.
   */
  ComFasterxmlJacksonDatabindJavaType *_valueType_;
  /*!
   @brief We may pre-fetch deserializer as soon as <code>_valueType</code>
  is known, and if so, reuse it afterwards.
   This allows avoiding further deserializer lookups and increases
  performance a bit on cases where readers are reused.
   @since 2.1
   */
  ComFasterxmlJacksonDatabindJsonDeserializer *_rootDeserializer_;
  /*!
   @brief Instance to update with data binding; if any.If null,
  a new instance is created, if non-null, properties of
  this value object will be updated instead.
   Note that value can be of almost any type, except not 
 <code>com.fasterxml.jackson.databind.type.ArrayType</code>; array
  types cannot be modified because array size is immutable.
   */
  id _valueToUpdate_;
  /*!
   @brief When using data format that uses a schema, schema is passed
  to parser.
   */
  id<ComFasterxmlJacksonCoreFormatSchema> _schema_;
  /*!
   @brief Values that can be injected during deserialization, if any.
   */
  ComFasterxmlJacksonDatabindInjectableValues *_injectableValues_;
  /*!
   @brief Optional detector used for auto-detecting data format that byte-based
  input uses.
   <p>
  NOTE: If defined non-null, <code>readValue()</code> methods that take 
 <code>Reader</code> or <code>String</code> input <b>will fail with exception</b>,
  because format-detection only works on byte-sources. Also, if format
  cannot be detect reliably (as per detector settings),
  a <code>JsonParseException</code> will be thrown).
   @since 2.1
   */
  ComFasterxmlJacksonDatabindDeserDataFormatReaders *_dataFormatReaders_;
  /*!
   @brief Root-level cached deserializers.
   Passed by <code>ObjectMapper</code>, shared with it.
   */
  JavaUtilConcurrentConcurrentHashMap *_rootDeserializers_;
}

#pragma mark Public

/*!
 @brief Convenience method to bind from <code>JsonPointer</code>
  <code>JsonPointerBasedFilter</code> is registered and will be used for parsing later.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)pointer;

/*!
 @brief Convenience method to bind from <code>JsonPointer</code>.
 <code>JsonPointerBasedFilter</code> is registered and will be used for parsing later.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)atWithNSString:(NSString *)value;

- (ComFasterxmlJacksonDatabindJsonNode *)createArrayNode;

- (ComFasterxmlJacksonDatabindJsonNode *)createObjectNode;

/*!
 @brief Method for constructing a new reader instance that is configured
  to data bind into specified type.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)forTypeWithIOSClass:(IOSClass *)valueType;

/*!
 @brief Method for constructing a new reader instance that is configured
  to data bind into specified type.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)forTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Method for constructing a new reader instance that is configured
  to data bind into specified type.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)forTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgContextAttributes *)getAttributes;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindDeserializationConfig *)getConfig;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonFactory *)getFactory;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindInjectableValues *)getInjectableValues;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f;

- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoDataInput:(id<JavaIoDataInput>)src;

/*!
 @brief Method that reads content from given input source,
  using configuration of this reader, and binds it as JSON Tree.
 <p>
  Note that if an object was specified with a call to 
 <code>withValueToUpdate(Object)</code>
  it will just be ignored; result is always a newly constructed 
 <code>JsonNode</code> instance.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Convenience method that binds content read using given parser, using
  configuration of this reader, except that content is bound as
  JSON tree instead of configured root value type.
 <p>
  Note: if an object was specified with <code>withValueToUpdate</code>, it
  will be ignored.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)readTreeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method that reads content from given input source,
  using configuration of this reader, and binds it as JSON Tree.
 <p>
  Note that if an object was specified with a call to 
 <code>withValueToUpdate(Object)</code>
  it will just be ignored; result is always a newly constructed 
 <code>JsonNode</code> instance.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithJavaIoReader:(JavaIoReader *)r;

/*!
 @brief Method that reads content from given JSON input String,
  using configuration of this reader, and binds it as JSON Tree.
 <p>
  Note that if an object was specified with a call to 
 <code>withValueToUpdate(Object)</code>
  it will just be ignored; result is always a newly constructed 
 <code>JsonNode</code> instance.
 */
- (ComFasterxmlJacksonDatabindJsonNode *)readTreeWithNSString:(NSString *)json;

/*!
 @brief Method that binds content read from given byte array,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithByteArray:(IOSByteArray *)src;

/*!
 @brief Method that binds content read from given byte array,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithByteArray:(IOSByteArray *)src
                     withInt:(jint)offset
                     withInt:(jint)length;

/*!
 @since 2.8
 */
- (id)readValueWithJavaIoDataInput:(id<JavaIoDataInput>)src;

- (id)readValueWithJavaIoFile:(JavaIoFile *)src;

/*!
 @brief Method that binds content read from given input source,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithJavaIoInputStream:(JavaIoInputStream *)src;

/*!
 @brief Convenience method for converting results from given JSON tree into given
  value type.Basically short-cut for:
 @code

    objectReader.readValue(src.traverse())
 
@endcode
 */
- (id)readValueWithComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)src;

/*!
 @brief Method that binds content read using given parser, using
  configuration of this reader, including expected result type.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Convenience method that binds content read using given parser, using
  configuration of this reader, except that expected value type
  is specified with the call (instead of currently configured root type).
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                        withIOSClass:(IOSClass *)valueType;

/*!
 @brief Type-safe overloaded method, basically alias for <code>ResolvedType)</code>.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Convenience method that binds content read using given parser, using
  configuration of this reader, except that expected value type
  is specified with the call (instead of currently configured root type).
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
         withComFasterxmlJacksonCoreTypeResolvedType:(ComFasterxmlJacksonCoreTypeResolvedType *)valueType;

/*!
 @brief Convenience method that binds content read using given parser, using
  configuration of this reader, except that expected value type
  is specified with the call (instead of currently configured root type).
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
        withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method that binds content read from given input source,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithJavaIoReader:(JavaIoReader *)src;

/*!
 @brief Method that binds content read from given JSON string,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithNSString:(NSString *)src;

/*!
 @brief Method that binds content read from given input source,
  using configuration of this reader.
 Value return is either newly constructed, or root value that
  was specified with <code>withValueToUpdate(Object)</code>.
 */
- (id)readValueWithJavaNetURL:(JavaNetURL *)src;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithByteArray:(IOSByteArray *)src;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithByteArray:(IOSByteArray *)src
                                                                withInt:(jint)offset
                                                                withInt:(jint)length;

/*!
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithJavaIoDataInput:(id<JavaIoDataInput>)src;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithJavaIoFile:(JavaIoFile *)src;

/*!
 @brief Method for reading sequence of Objects from parser stream.
 <p>
  Sequence can be either wrapped or unwrapped root-level sequence:
  wrapped means that the elements are enclosed in JSON Array;
  and unwrapped that elements are directly accessed at main level.
  Assumption is that iff the first token of the document is 
 <code>START_ARRAY</code>, we have a wrapped sequence; otherwise
  unwrapped. For wrapped sequences, leading <code>START_ARRAY</code>
  is skipped, so that for both cases, underlying <code>JsonParser</code>
  will point to what is expected to be the first token of the first
  element.
 <p>
  Note that the wrapped vs unwrapped logic means that it is NOT
  possible to use this method for reading an unwrapped sequence
  of elements written as JSON Arrays: to read such sequences, one
  has to use <code>readValues(JsonParser)</code>, making sure parser
  points to the first token of the first element (i.e. the second 
 <code>START_ARRAY</code> which is part of the first element).
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithJavaIoInputStream:(JavaIoInputStream *)src;

/*!
 @brief Method for reading sequence of Objects from parser stream.
 <p>
  Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> must point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> but rather
  to the token following it.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Convenience method that is equivalent to:
 @code

    withType(valueType).readValues(p);
 
@endcode
 <p>
  Method reads a sequence of Objects from parser stream.
 Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> <b>MUST</b> point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> (one that
  contains values to read) but rather to the token following it which is the first
  token of the first value to read.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id<JavaUtilIterator>)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                           withIOSClass:(IOSClass *)valueType;

/*!
 @brief Convenience method that is equivalent to:
 @code

    withType(valueType).readValues(p);
 
@endcode
 <p>
  Method reads a sequence of Objects from parser stream.
 Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> <b>MUST</b> point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> (one that
  contains values to read) but rather to the token following it which is the first
  token of the first value to read.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id<JavaUtilIterator>)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Convenience method that is equivalent to:
 @code

    withType(valueType).readValues(p);
 
@endcode
 <p>
  Method reads a sequence of Objects from parser stream.
 Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> <b>MUST</b> point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> (one that
  contains values to read) but rather to the token following it which is the first
  token of the first value to read.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id<JavaUtilIterator>)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                            withComFasterxmlJacksonCoreTypeResolvedType:(ComFasterxmlJacksonCoreTypeResolvedType *)valueType;

/*!
 @brief Convenience method that is equivalent to:
 @code

    withType(valueTypeRef).readValues(p);
 
@endcode
 <p>
  Method reads a sequence of Objects from parser stream.
 Sequence can be either root-level "unwrapped" sequence (without surrounding
  JSON array), or a sequence contained in a JSON Array.
  In either case <code>JsonParser</code> <b>MUST</b> point to the first token of
  the first element, OR not point to any token (in which case it is advanced
  to the next token). This means, specifically, that for wrapped sequences,
  parser MUST NOT point to the surrounding <code>START_ARRAY</code> (one that
  contains values to read) but rather to the token following it which is the first
  token of the first value to read.
 <p>
  NOTE: this method never tries to auto-detect format, since actual
  (data-format specific) parser is given.
 */
- (id<JavaUtilIterator>)readValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                           withComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithJavaIoReader:(JavaIoReader *)src;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 @param json String that contains JSON content to parse
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithNSString:(NSString *)json;

/*!
 @brief Overloaded version of <code>readValue(InputStream)</code>.
 @param src URL to read to access JSON content to parse.
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)readValuesWithJavaNetURL:(JavaNetURL *)src;

- (ComFasterxmlJacksonCoreJsonParser *)treeAsTokensWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)n;

- (id)treeToValueWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)n
                                        withIOSClass:(IOSClass *)valueType;

/*!
 @brief Method that will return version information stored in and read from jar
  that contains this class.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)defaultBase64;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attrs;

/*!
 @brief Mutant factory method that will construct a new instance that has
  specified underlying <code>DeserializationConfig</code>.
 <p>
  NOTE: use of this method is not recommended, as there are many other
  re-configuration methods available.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature enabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feature;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)first
                                            withComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)other;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature enabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)feature;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature enabled.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonCoreFormatFeature:(id<ComFasterxmlJacksonCoreFormatFeature>)feature;

/*!
 @brief Method for constructing a new instance with configuration that
  passes specified <code>FormatSchema</code> to <code>JsonParser</code> that
  is constructed for parsing content.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Method for constructing a new instance with configuration that uses
  passed <code>InjectableValues</code> to provide injectable values.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues;

/*!
 @brief Method for constructing a new reader instance with configuration that uses
  passed <code>JsonFactory</code> for constructing underlying Readers.
 <p>
  NOTE: only factories that <b>DO NOT REQUIRE SPECIAL MAPPERS</b>
  (that is, ones that return <code>false</code> for 
 <code>JsonFactory.requiresCustomCodec()</code>) can be used: trying
  to use one that requires custom codec will throw exception
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f;

/*!
 @brief Method for constructing a new reader instance with configuration that uses
  passed <code>JsonNodeFactory</code> for constructing <code>JsonNode</code>
  instances.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withWithComFasterxmlJacksonDatabindNodeJsonNodeFactory:(ComFasterxmlJacksonDatabindNodeJsonNodeFactory *)f;

- (ComFasterxmlJacksonDatabindObjectReader *)withWithJavaUtilLocale:(JavaUtilLocale *)l;

- (ComFasterxmlJacksonDatabindObjectReader *)withWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withAttributeWithId:(id)key
                                                          withId:(id)value;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withFeaturesWithComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withFeaturesWithComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features enabled.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withFeaturesWithComFasterxmlJacksonCoreFormatFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Fluent factory method for constructing a reader that will try to
  auto-detect underlying data format, using specified 
 <code>DataFormatReaders</code>.
 <p>
  NOTE: since format detection only works with byte sources, it is possible to
  get a failure from some 'readValue()' methods. Also, if input cannot be reliably
  (enough) detected as one of specified types, an exception will be thrown.
 @param readers DataFormatReaders to use for detecting underlying format.
 @return Newly configured writer instance
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withFormatDetectionWithComFasterxmlJacksonDatabindDeserDataFormatReaders:(ComFasterxmlJacksonDatabindDeserDataFormatReaders *)readers;

/*!
 @brief Fluent factory method for constructing a reader that will try to
  auto-detect underlying data format, using specified list of 
 <code>JsonFactory</code> instances, and default <code>DataFormatReaders</code> settings
  (for customized <code>DataFormatReaders</code>, you can construct instance yourself).
 to construct appropriate <code>JsonParser</code> for actual parsing.
 <p>
  Note: since format detection only works with byte sources, it is possible to
  get a failure from some 'readValue()' methods. Also, if input cannot be reliably
  (enough) detected as one of specified types, an exception will be thrown.
 <p>
  Note: not all <code>JsonFactory</code> types can be passed: specifically, ones that
  require "custom codec" (like XML factory) will not work. Instead, use
  method that takes <code>ObjectReader</code> instances instead of factories.
 @param readers Data formats accepted, in decreasing order of priority (that is,    matches checked in listed order, first match wins)
 @return Newly configured writer instance
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withFormatDetectionWithComFasterxmlJacksonDatabindObjectReaderArray:(IOSObjectArray *)readers;

- (ComFasterxmlJacksonDatabindObjectReader *)withHandlerWithComFasterxmlJacksonDatabindDeserDeserializationProblemHandler:(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler *)h;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature disabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feature;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features disabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)first
                                               withComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)other;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature disabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)feature;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified feature disabled.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutWithComFasterxmlJacksonCoreFormatFeature:(id<ComFasterxmlJacksonCoreFormatFeature>)feature;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutAttributeWithId:(id)key;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features disabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutFeaturesWithComFasterxmlJacksonDatabindDeserializationFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features disabled.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutFeaturesWithComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new reader instance that is configured
  with specified features disabled.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutFeaturesWithComFasterxmlJacksonCoreFormatFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Convenience method that is same as calling:
 <code>
    withRootName("")
 </code>
  which will forcibly prevent use of root name wrapping when writing
  values with this <code>ObjectReader</code>.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withoutRootName;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withRootNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)rootName;

/*!
 @brief Method for constructing a new instance with configuration that
  specifies what root name to expect for "root name unwrapping".
 See <code>DeserializationConfig.withRootName(String)</code> for
  details.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withRootNameWithNSString:(NSString *)rootName;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withTypeWithIOSClass:(IOSClass *)valueType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withTypeWithJavaLangReflectType:(id<JavaLangReflectType>)valueType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Method for constructing a new instance with configuration that
  updates passed Object (as root value), instead of constructing 
  a new value.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withValueToUpdateWithId:(id)value;

/*!
 @brief Method for constructing a new instance with configuration that
  uses specified View for filtering.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectReader *)withViewWithIOSClass:(IOSClass *)activeView;

- (void)writeTreeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                      withComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)rootNode;

- (void)writeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                    withId:(id)value;

#pragma mark Protected

/*!
 @brief Constructor used by <code>ObjectMapper</code> for initial instantiation
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)mapper
                     withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Constructor called when a root deserializer should be fetched based
  on other configuration.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)mapper
                     withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                                                   withId:(id)valueToUpdate
                                  withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema
                          withComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues;

/*!
 @brief Copy constructor used when modifying simple feature flags
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                     withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Copy constructor used for building variations.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                     withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                          withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)rootDeser
                                                                   withId:(id)valueToUpdate
                                  withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema
                          withComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues
                    withComFasterxmlJacksonDatabindDeserDataFormatReaders:(ComFasterxmlJacksonDatabindDeserDataFormatReaders *)dataFormatReaders;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                                   withComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                             withComFasterxmlJacksonCoreFilterTokenFilter:(ComFasterxmlJacksonCoreFilterTokenFilter *)filter;

/*!
 @brief Actual implementation of value reading+binding operation.
 */
- (id)_bindWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                          withId:(id)valueToUpdate;

- (id)_bindAndCloseWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p0;

- (ComFasterxmlJacksonDatabindJsonNode *)_bindAndCloseAsTreeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p0;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)_bindAndReadValuesWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

- (ComFasterxmlJacksonDatabindJsonNode *)_bindAsTreeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Consider filter when creating JsonParser.
 */
- (ComFasterxmlJacksonCoreJsonParser *)_considerFilterWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                                withBoolean:(jboolean)multiValue;

- (id)_detectBindAndCloseWithByteArray:(IOSByteArray *)src
                               withInt:(jint)offset
                               withInt:(jint)length;

- (id)_detectBindAndCloseWithComFasterxmlJacksonDatabindDeserDataFormatReaders_Match:(ComFasterxmlJacksonDatabindDeserDataFormatReaders_Match *)match
                                                                         withBoolean:(jboolean)forceClosing;

- (ComFasterxmlJacksonDatabindJsonNode *)_detectBindAndCloseAsTreeWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (ComFasterxmlJacksonDatabindMappingIterator *)_detectBindAndReadValuesWithComFasterxmlJacksonDatabindDeserDataFormatReaders_Match:(ComFasterxmlJacksonDatabindDeserDataFormatReaders_Match *)match
                                                                                                                        withBoolean:(jboolean)forceClosing;

/*!
 @brief Method called to locate deserializer for the passed root-level value.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_findRootDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_findTreeDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Alternative to <code>_initForReading</code> used in cases where reading
  of multiple values means that we may or may not want to advance the stream,
  but need to do other initialization.
 <p>
  Base implementation only sets configured <code>FormatSchema</code>, if any, on parser.
 @since 2.8
 */
- (void)_initForMultiReadWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                         withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonCoreJsonToken *)_initForReadingWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                     withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

- (JavaIoInputStream *)_inputStreamWithJavaIoFile:(JavaIoFile *)f;

- (JavaIoInputStream *)_inputStreamWithJavaNetURL:(JavaNetURL *)src;

/*!
 @brief Overridable factory method called by various "withXxx()" methods
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)_newWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable factory method called by various "withXxx()" methods
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)_newWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                             withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)rootDeser
                                                                                      withId:(id)valueToUpdate
                                                     withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema
                                             withComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues
                                       withComFasterxmlJacksonDatabindDeserDataFormatReaders:(ComFasterxmlJacksonDatabindDeserDataFormatReaders *)dataFormatReaders OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable factory method called by various "withXxx()" methods
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectReader *)_newWithComFasterxmlJacksonDatabindObjectReader:(ComFasterxmlJacksonDatabindObjectReader *)base
                                                      withComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Factory method used to create <code>MappingIterator</code> instances;
  either default, or custom subtype.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindMappingIterator *)_newIteratorWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                            withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                  withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                                                                      withBoolean:(jboolean)parserManaged OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method called to locate deserializer ahead of time, if permitted
  by configuration.Method also is NOT to throw an exception if
  access fails.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_prefetchRootDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

- (void)_reportUndetectableSourceWithId:(id)src;

/*!
 @brief Method called to indicate that format detection failed to detect format
  of given input
 */
- (void)_reportUnkownFormatWithComFasterxmlJacksonDatabindDeserDataFormatReaders:(ComFasterxmlJacksonDatabindDeserDataFormatReaders *)detector
                     withComFasterxmlJacksonDatabindDeserDataFormatReaders_Match:(ComFasterxmlJacksonDatabindDeserDataFormatReaders_Match *)match;

- (id)_unwrapAndDeserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                 withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

/*!
 @since 2.9
 */
- (void)_verifyNoTrailingTokensWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
               withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)bindType;

/*!
 @since 2.2
 */
- (void)_verifySchemaTypeWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

- (ComFasterxmlJacksonDatabindObjectReader *)_withWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)newConfig;

/*!
 @brief Internal helper method called to create an instance of <code>DeserializationContext</code>
  for deserializing a single root value.
 Can be overridden if a custom context is needed.
 */
- (ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *)createDeserializationContextWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectReader)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _config_, ComFasterxmlJacksonDatabindDeserializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _context_, ComFasterxmlJacksonDatabindDeserDefaultDeserializationContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _parserFactory_, ComFasterxmlJacksonCoreJsonFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _valueType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _rootDeserializer_, ComFasterxmlJacksonDatabindJsonDeserializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _valueToUpdate_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _schema_, id<ComFasterxmlJacksonCoreFormatSchema>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _injectableValues_, ComFasterxmlJacksonDatabindInjectableValues *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _dataFormatReaders_, ComFasterxmlJacksonDatabindDeserDataFormatReaders *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectReader, _rootDeserializers_, JavaUtilConcurrentConcurrentHashMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonDeserializer_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_withComFasterxmlJacksonDatabindDeserDataFormatReaders_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, ComFasterxmlJacksonDatabindJsonDeserializer *rootDeser, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues, ComFasterxmlJacksonDatabindDeserDataFormatReaders *dataFormatReaders);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonDeserializer_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_withComFasterxmlJacksonDatabindDeserDataFormatReaders_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, ComFasterxmlJacksonDatabindJsonDeserializer *rootDeser, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues, ComFasterxmlJacksonDatabindDeserDataFormatReaders *dataFormatReaders) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonDeserializer_withId_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonDatabindInjectableValues_withComFasterxmlJacksonDatabindDeserDataFormatReaders_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonDatabindJavaType *valueType, ComFasterxmlJacksonDatabindJsonDeserializer *rootDeser, id valueToUpdate, id<ComFasterxmlJacksonCoreFormatSchema> schema, ComFasterxmlJacksonDatabindInjectableValues *injectableValues, ComFasterxmlJacksonDatabindDeserDataFormatReaders *dataFormatReaders);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonDatabindDeserializationConfig_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonDatabindDeserializationConfig *config);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreJsonFactory *f);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreJsonFactory *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreJsonFactory *f);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreFilterTokenFilter_(ComFasterxmlJacksonDatabindObjectReader *self, ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreFilterTokenFilter *filter);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *new_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreFilterTokenFilter_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreFilterTokenFilter *filter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectReader *create_ComFasterxmlJacksonDatabindObjectReader_initWithComFasterxmlJacksonDatabindObjectReader_withComFasterxmlJacksonCoreFilterTokenFilter_(ComFasterxmlJacksonDatabindObjectReader *base, ComFasterxmlJacksonCoreFilterTokenFilter *filter);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectReader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectReader")
