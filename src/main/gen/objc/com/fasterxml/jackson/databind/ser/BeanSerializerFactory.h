//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerFactory")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializerFactory
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializerFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBeanSerializerFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerFactory || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBeanSerializerFactory))
#define ComFasterxmlJacksonDatabindSerBeanSerializerFactory_

#define RESTRICT_ComFasterxmlJacksonDatabindSerBasicSerializerFactory 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerBasicSerializerFactory 1
#include "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerBeanPropertyWriter;
@class ComFasterxmlJacksonDatabindSerBeanSerializerBuilder;
@class ComFasterxmlJacksonDatabindSerImplObjectIdWriter;
@class ComFasterxmlJacksonDatabindSerPropertyBuilder;
@class ComFasterxmlJacksonDatabindSerSerializerFactory;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilList;

/*!
 @brief Factory class that can provide serializers for any regular Java beans
  (as defined by "having at least one get method recognizable as bean
  accessor" -- where <code>Object.getClass</code> does not count);
  as well as for "standard" JDK types.Latter is achieved
  by delegating calls to <code>BasicSerializerFactory</code> 
  to find serializers both for "standard" JDK types (and in some cases,
  sub-classes as is the case for collection classes like 
 <code>java.util.List</code>s and <code>java.util.Map</code>s) and bean (value)
  classes.
 <p>
  Note about delegating calls to <code>BasicSerializerFactory</code>:
  although it would be nicer to use linear delegation
  for construction (to essentially dispatch all calls first to the
  underlying <code>BasicSerializerFactory</code>; or alternatively after
  failing to provide bean-based serializer}, there is a problem:
  priority levels for detecting standard types are mixed. That is,
  we want to check if a type is a bean after some of "standard" JDK
  types, but before the rest.
  As a result, "mixed" delegation used, and calls are NOT done using
  regular <code>SerializerFactory</code> interface but rather via
  direct calls to <code>BasicSerializerFactory</code>.
 <p>
  Finally, since all caching is handled by the serializer provider
  (not factory) and there is no configurability, this
  factory is stateless.
  This means that a global singleton instance can be used.
 */
@interface ComFasterxmlJacksonDatabindSerBeanSerializerFactory : ComFasterxmlJacksonDatabindSerBasicSerializerFactory < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Main serializer constructor method.We will have to be careful
  with respect to ordering of various method calls: essentially
  we want to reliably figure out which classes are standard types,
  and which are beans.
 The problem is that some bean Classes may
  implement standard interfaces (say, <code>java.lang.Iterable</code>.
 <p>
  Note: sub-classes may choose to complete replace implementation,
  if they want to alter priority of serializer lookups.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)createSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)origType;

/*!
 @brief Method that will try to construct a <code>BeanSerializer</code> for
  given class.Returns null if no properties are found.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findBeanSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to create a type information serializer for values of given
  container property
  if one is needed.If not needed (no polymorphic handling configured), should
  return null.
 @param containerType Declared type of the container to use as the base type for type information serializer
 @return Type serializer to use for property value contents, if one is needed; null if not.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)findPropertyContentTypeSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)containerType
                                                                             withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                       withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)accessor;

/*!
 @brief Method called to create a type information serializer for values of given
  non-container property
  if one is needed.If not needed (no polymorphic handling configured), should
  return null.
 @param baseType Declared type to use as the base type for type information serializer
 @return Type serializer to use for property values, if one is needed; null if not.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)findPropertyTypeSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                      withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)accessor;

/*!
 @brief Method used by module registration functionality, to attach additional
  serializer providers into this serializer factory.This is typically
  handled by constructing a new instance with additional serializers,
  to ensure thread-safe access.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withConfigWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig:(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)config;

#pragma mark Protected

/*!
 @brief Constructor for creating instances with specified configuration.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig:(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)config;

/*!
 @brief Secondary helper method for constructing <code>BeanPropertyWriter</code> for
  given member (field or method).
 */
- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)_constructWriterWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                        withComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)propDef
                                                                      withComFasterxmlJacksonDatabindSerPropertyBuilder:(ComFasterxmlJacksonDatabindSerPropertyBuilder *)pb
                                                                                                            withBoolean:(jboolean)staticTyping
                                                               withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)accessor;

- (ComFasterxmlJacksonDatabindJsonSerializer *)_createSerializer2WithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                       withBoolean:(jboolean)staticTyping;

/*!
 @brief Method called to construct serializer for serializing specified bean type.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)constructBeanSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                         withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)constructBeanSerializerBuilderWithComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to construct a filtered writer, for given view
  definitions.Default implementation constructs filter that checks
  active view type to views property is to be included in.
 */
- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)constructFilteredBeanWriterWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)writer
                                                                                                                    withIOSClassArray:(IOSObjectArray *)inViews;

- (ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)constructObjectIdHandlerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                 withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                               withJavaUtilList:(id<JavaUtilList>)props;

- (ComFasterxmlJacksonDatabindSerPropertyBuilder *)constructPropertyBuilderWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                               withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (id<JavaLangIterable>)customSerializers;

/*!
 @brief Overridable method that can filter out properties.Default implementation
  checks annotations class may have.
 */
- (id<JavaUtilList>)filterBeanPropertiesWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                          withJavaUtilList:(id<JavaUtilList>)props;

/*!
 @brief Method used to collect all actual serializable properties.
 Can be overridden to implement custom detection schemes.
 */
- (id<JavaUtilList>)findBeanPropertiesWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                         withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder;

/*!
 @brief Helper method used to skip processing for types that we know
  cannot be (i.e.are never consider to be) beans: 
  things like primitives, Arrays, Enums, and proxy types.
 <p>
  Note that usually we shouldn't really be getting these sort of
  types anyway; but better safe than sorry.
 */
- (jboolean)isPotentialBeanTypeWithIOSClass:(IOSClass *)type;

/*!
 @brief Method called to handle view information for constructed serializer,
  based on bean property writers.
 <p>
  Note that this method is designed to be overridden by sub-classes
  if they want to provide custom view handling. As such it is not
  considered an internal implementation detail, and will be supported
  as part of API going forward.
 */
- (void)processViewsWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
               withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder;

/*!
 @brief Method that will apply by-type limitations (as per [JACKSON-429]);
  by default this is based on <code>com.fasterxml.jackson.annotation.JsonIgnoreType</code>
  annotation but can be supplied by module-provided introspectors too.
 Starting with 2.8 there are also "Config overrides" to consider.
 */
- (void)removeIgnorableTypesWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                              withJavaUtilList:(id<JavaUtilList>)properties;

/*!
 @brief Helper method called to ensure that we do not have "duplicate" type ids.
 Added to resolve [databind#222]
 @since 2.6
 */
- (id<JavaUtilList>)removeOverlappingTypeIdsWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                               withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                      withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder
                                                                             withJavaUtilList:(id<JavaUtilList>)props;

/*!
 @brief Helper method that will remove all properties that do not have a mutator.
 */
- (void)removeSetterlessGettersWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                 withJavaUtilList:(id<JavaUtilList>)properties;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerBeanSerializerFactory)

/*!
 @brief Like <code>BasicSerializerFactory</code>, this factory is stateless, and
  thus a single shared global (== singleton) instance can be used
  without thread-safety issues.
 */
inline ComFasterxmlJacksonDatabindSerBeanSerializerFactory *ComFasterxmlJacksonDatabindSerBeanSerializerFactory_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializerFactory *ComFasterxmlJacksonDatabindSerBeanSerializerFactory_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerBeanSerializerFactory, instance, ComFasterxmlJacksonDatabindSerBeanSerializerFactory *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializerFactory_initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig_(ComFasterxmlJacksonDatabindSerBeanSerializerFactory *self, ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *config);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializerFactory *new_ComFasterxmlJacksonDatabindSerBeanSerializerFactory_initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig_(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializerFactory *create_ComFasterxmlJacksonDatabindSerBeanSerializerFactory_initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig_(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *config);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBeanSerializerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerFactory")
