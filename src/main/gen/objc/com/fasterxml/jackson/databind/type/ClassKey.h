//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeClassKey")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindTypeClassKey
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeClassKey 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeClassKey 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindTypeClassKey

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindTypeClassKey_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeClassKey || defined(INCLUDE_ComFasterxmlJacksonDatabindTypeClassKey))
#define ComFasterxmlJacksonDatabindTypeClassKey_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;

/*!
 @brief Key class, used as an efficient and accurate key
  for locating per-class values, such as 
 <code>com.fasterxml.jackson.databind.JsonSerializer</code>s.
 <p>
  The reason for having a separate key class instead of
  directly using <code>Class</code> as key is mostly
  to allow for redefining <code>hashCode</code> method --
  for some strange reason, <code>Class</code> does not
  redefine <code>Object.hashCode</code> and thus uses identity
  hash, which is pretty slow. This makes key access using 
 <code>Class</code> unnecessarily slow.
 <p>
  Note: since class is not strictly immutable, caller must
  know what it is doing, if changing field values.
 */
@interface ComFasterxmlJacksonDatabindTypeClassKey : NSObject < JavaLangComparable, JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)clz;

- (jint)compareToWithId:(ComFasterxmlJacksonDatabindTypeClassKey *)other;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)resetWithIOSClass:(IOSClass *)clz;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindTypeClassKey)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeClassKey_init(ComFasterxmlJacksonDatabindTypeClassKey *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeClassKey *new_ComFasterxmlJacksonDatabindTypeClassKey_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeClassKey *create_ComFasterxmlJacksonDatabindTypeClassKey_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeClassKey_initWithIOSClass_(ComFasterxmlJacksonDatabindTypeClassKey *self, IOSClass *clz);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeClassKey *new_ComFasterxmlJacksonDatabindTypeClassKey_initWithIOSClass_(IOSClass *clz) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeClassKey *create_ComFasterxmlJacksonDatabindTypeClassKey_initWithIOSClass_(IOSClass *clz);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindTypeClassKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeClassKey")
