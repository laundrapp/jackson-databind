//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindInjectableValues
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindInjectableValues
#ifdef INCLUDE_ComFasterxmlJacksonDatabindInjectableValues_Std
#define INCLUDE_ComFasterxmlJacksonDatabindInjectableValues 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindInjectableValues_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues || defined(INCLUDE_ComFasterxmlJacksonDatabindInjectableValues))
#define ComFasterxmlJacksonDatabindInjectableValues_

@class ComFasterxmlJacksonDatabindDeserializationContext;
@protocol ComFasterxmlJacksonDatabindBeanProperty;

/*!
 @brief Abstract class that defines API for objects that provide value to
  "inject" during deserialization.An instance of this object
 */
@interface ComFasterxmlJacksonDatabindInjectableValues : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to find value identified by id <code>valueId</code> to
  inject as value of specified property during deserialization, passing
  POJO instance in which value will be injected if it is available
  (will be available when injected via field or setter; not available
  when injected via constructor or factory method argument).
 @param valueId Object that identifies value to inject; may be a simple    name or more complex identifier object, whatever provider needs
 @param ctxt Deserialization context
 @param forProperty Bean property in which value is to be injected
 @param beanInstance Bean instance that contains property to inject,     if available; null if bean has not yet been constructed.
 */
- (id)findInjectableValueWithId:(id)valueId
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)forProperty
                         withId:(id)beanInstance;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindInjectableValues)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindInjectableValues_init(ComFasterxmlJacksonDatabindInjectableValues *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindInjectableValues)

#endif

#if !defined (ComFasterxmlJacksonDatabindInjectableValues_Std_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues || defined(INCLUDE_ComFasterxmlJacksonDatabindInjectableValues_Std))
#define ComFasterxmlJacksonDatabindInjectableValues_Std_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindDeserializationContext;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol JavaUtilMap;

/*!
 @brief Simple standard implementation which uses a simple Map to
  store values to inject, identified by simple String keys.
 */
@interface ComFasterxmlJacksonDatabindInjectableValues_Std : ComFasterxmlJacksonDatabindInjectableValues < JavaIoSerializable > {
 @public
  id<JavaUtilMap> _values_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)values;

- (ComFasterxmlJacksonDatabindInjectableValues_Std *)addValueWithIOSClass:(IOSClass *)classKey
                                                                   withId:(id)value;

- (ComFasterxmlJacksonDatabindInjectableValues_Std *)addValueWithNSString:(NSString *)key
                                                                   withId:(id)value;

- (id)findInjectableValueWithId:(id)valueId
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)forProperty
                         withId:(id)beanInstance;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindInjectableValues_Std)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindInjectableValues_Std, _values_, id<JavaUtilMap>)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindInjectableValues_Std_init(ComFasterxmlJacksonDatabindInjectableValues_Std *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindInjectableValues_Std *new_ComFasterxmlJacksonDatabindInjectableValues_Std_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindInjectableValues_Std *create_ComFasterxmlJacksonDatabindInjectableValues_Std_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(ComFasterxmlJacksonDatabindInjectableValues_Std *self, id<JavaUtilMap> values);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindInjectableValues_Std *new_ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(id<JavaUtilMap> values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindInjectableValues_Std *create_ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(id<JavaUtilMap> values);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindInjectableValues_Std)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindInjectableValues")
