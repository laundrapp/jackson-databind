//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyWriter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBeanPropertyWriter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyWriter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyWriter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBeanPropertyWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBeanPropertyWriter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBeanPropertyWriter))
#define ComFasterxmlJacksonDatabindSerBeanPropertyWriter_

#define RESTRICT_ComFasterxmlJacksonDatabindSerPropertyWriter 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerPropertyWriter 1
#include "com/fasterxml/jackson/databind/ser/PropertyWriter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreIoSerializedString;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindPropertyMetadata;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectField;
@class JavaLangReflectMethod;
@class JavaUtilHashMap;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor;
@protocol ComFasterxmlJacksonDatabindUtilAnnotations;
@protocol JavaLangAnnotationAnnotation;
@protocol JavaLangReflectType;

/*!
 @brief Base bean property handler class, which implements common parts of
  reflection-based functionality for accessing a property value and serializing
  it.
 <p>
  Note that current design tries to keep instances immutable (semi-functional
  style); mostly because these instances are exposed to application code and
  this is to reduce likelihood of data corruption and synchronization issues.
 */
@interface ComFasterxmlJacksonDatabindSerBeanPropertyWriter : ComFasterxmlJacksonDatabindSerPropertyWriter < JavaIoSerializable > {
 @public
  /*!
   @brief Logical name of the property; will be used as the field name under which
  value for the property is written.
   <p>
  NOTE: do NOT change name of this field; it is accessed by Afterburner
  module (until 2.4; not directly from 2.5) ALSO NOTE: ... and while it
  really ought to be `SerializableString`, changing that is also
  binary-incompatible change. So nope.
   */
  ComFasterxmlJacksonCoreIoSerializedString *_name_;
  /*!
   @brief Wrapper name to use for this element, if any
   @since 2.2
   */
  ComFasterxmlJacksonDatabindPropertyName *_wrapperName_;
  /*!
   @brief Type property is declared to have, either in class definition or
  associated annotations.
   */
  ComFasterxmlJacksonDatabindJavaType *_declaredType_;
  /*!
   @brief Type to use for locating serializer; normally same as return type of the
  accessor method, but may be overridden by annotations.
   */
  ComFasterxmlJacksonDatabindJavaType *_cfgSerializationType_;
  /*!
   @brief Base type of the property, if the declared type is "non-trivial"; meaning
  it is either a structured type (collection, map, array), or
  parameterized.Used to retain type information about contained type,
  which is mostly necessary if type meta-data is to be included.
   */
  ComFasterxmlJacksonDatabindJavaType *_nonTrivialBaseType_;
  /*!
   @brief Annotations from context (most often, class that declares property, or in
  case of sub-class serializer, from that sub-class)
 <p>
  NOTE: transient just to support JDK serializability; Annotations do not
  serialize.
   At all.
   */
  id<ComFasterxmlJacksonDatabindUtilAnnotations> _contextAnnotations_;
  /*!
   @brief Member (field, method) that represents property and allows access to
  associated annotations.
   */
  ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *_member_;
  /*!
   @brief Accessor method used to get property value, for method-accessible
  properties.Null if and only if <code>_field</code> is null.
   <p>
  `transient` (and non-final) only to support JDK serializability.
   */
  JavaLangReflectMethod *_accessorMethod_;
  /*!
   @brief Field that contains the property value for field-accessible properties.
   Null if and only if <code>_accessorMethod</code> is null. 
 <p>
  `transient` (and non-final) only to support JDK serializability.
   */
  JavaLangReflectField *_field_;
  /*!
   @brief Serializer to use for writing out the value: null if it cannot be known
  statically; non-null if it can.
   */
  ComFasterxmlJacksonDatabindJsonSerializer *_serializer_;
  /*!
   @brief Serializer used for writing out null values, if any: if null, null values
  are to be suppressed.
   */
  ComFasterxmlJacksonDatabindJsonSerializer *_nullSerializer_;
  /*!
   @brief If property being serialized needs type information to be included this
  is the type serializer to use.Declared type (possibly augmented with
  annotations) of property is used for determining exact mechanism to use
  (compared to actual runtime type used for serializing actual state).
   */
  ComFasterxmlJacksonDatabindJsontypeTypeSerializer *_typeSerializer_;
  /*!
   @brief In case serializer is not known statically (i.e.
   <code>_serializer</code>
  is null), we will use a lookup structure for storing dynamically resolved
  mapping from type(s) to serializer(s).
   */
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *_dynamicSerializers_;
  /*!
   @brief Whether null values are to be suppressed (nothing written out if value is
  null) or not.Note that this is a configuration value during
  construction, and actual handling relies on setting (or not) of 
 <code>_nullSerializer</code>.
   */
  jboolean _suppressNulls_;
  /*!
   @brief Value that is considered default value of the property; used for
  default-value-suppression if enabled.
   */
  id _suppressableValue_;
  /*!
   @brief Alternate set of property writers used when view-based filtering is
  available for the Bean.
   */
  IOSObjectArray *_includeInViews_;
  JavaUtilHashMap *_internalSettings_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)propDef
                                     withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member
                                               withComFasterxmlJacksonDatabindUtilAnnotations:(id<ComFasterxmlJacksonDatabindUtilAnnotations>)contextAnnotations
                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)declaredType
                                                withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                                        withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer
                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)serType
                                                                                  withBoolean:(jboolean)suppressNulls
                                                                                       withId:(id)suppressableValue;

/*!
 @since 2.9 (added `includeInViews` since 2.8)
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)propDef
                                     withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)member
                                               withComFasterxmlJacksonDatabindUtilAnnotations:(id<ComFasterxmlJacksonDatabindUtilAnnotations>)contextAnnotations
                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)declaredType
                                                withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                                        withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer
                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)serType
                                                                                  withBoolean:(jboolean)suppressNulls
                                                                                       withId:(id)suppressableValue
                                                                            withIOSClassArray:(IOSObjectArray *)includeInViews;

/*!
 @brief Method called to assign null value serializer for property
 */
- (void)assignNullSerializerWithComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)nullSer;

/*!
 @brief Method called to assign value serializer for property
 */
- (void)assignSerializerWithComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Method called to set, reset or clear the configured type serializer for
  property.
 @since 2.6
 */
- (void)assignTypeSerializerWithComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor>)v
                                                    withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Attempt to add the output of the given <code>BeanPropertyWriter</code> in the
  given <code>ObjectNode</code>.Otherwise, add the default schema 
 <code>JsonNode</code> in place of the writer's output
 @param propertiesNode Node which the given property would exist within
 @param provider Provider that can be used for accessing dynamic aspects of
              serialization processing
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindNodeObjectNode:(ComFasterxmlJacksonDatabindNodeObjectNode *)propertiesNode
                         withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called to ensure that the mutator has proper access rights to
  be called, as per configuration.Overridden by implementations that
  have mutators that require access, fields and setters.
 @since 2.8.3
 */
- (void)fixAccessWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config;

/*!
 @brief Method that can be used to access value of the property this Object
  describes, from given bean instance.
 <p>
  Note: method is final as it should not need to be overridden -- rather,
  calling method(s) (<code>serializeAsField</code>) should be overridden to
  change the behavior
 */
- (id)getWithId:(id)bean;

- (id<JavaLangAnnotationAnnotation>)getAnnotationWithIOSClass:(IOSClass *)acls;

- (id<JavaLangAnnotationAnnotation>)getContextAnnotationWithIOSClass:(IOSClass *)acls;

- (ComFasterxmlJacksonDatabindPropertyName *)getFullName;

/*!
 @brief Get the generic property type of this property writer.
 @return The property type, or null if not found.
 */
- (id<JavaLangReflectType>)getGenericPropertyType;

/*!
 @brief Method for accessing value of specified internal setting.
 @return Value of the setting, if any; null if none.
 */
- (id)getInternalSettingWithId:(id)key;

- (ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)getMember;

- (NSString *)getName;

/*!
 */
- (IOSClass *)getPropertyType;

- (IOSClass *)getRawSerializationType;

- (ComFasterxmlJacksonDatabindJavaType *)getSerializationType;

- (id<ComFasterxmlJacksonCoreSerializableString>)getSerializedName;

- (ComFasterxmlJacksonDatabindJsonSerializer *)getSerializer;

- (ComFasterxmlJacksonDatabindJavaType *)getType;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)getTypeSerializer;

- (IOSObjectArray *)getViews;

- (ComFasterxmlJacksonDatabindPropertyName *)getWrapperName;

- (jboolean)hasNullSerializer;

- (jboolean)hasSerializer;

/*!
 @brief Accessor that will return true if this bean property has to support
  "unwrapping"; ability to replace POJO structural wrapping with optional
  name prefix and/or suffix (or in some cases, just removal of wrapper
  name).
 <p>
  Default implementation simply returns false.
 @since 2.3
 */
- (jboolean)isUnwrapping;

/*!
 @brief Method for removing entry for specified internal setting.
 @return Existing value of the setting, if any (null if none)
 */
- (id)removeInternalSettingWithId:(id)key;

- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)renameWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)transformer;

/*!
 @brief Alternative to <code>serializeAsField</code> that is used when a POJO is
  serialized as JSON Array; the difference is that no field names are
  written.
 @since 2.3
 */
- (void)serializeAsElementWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov;

/*!
 @brief Method called to access property that this bean stands for, from within
  given bean, and to serialize it as a JSON Object field using appropriate
  serializer.
 */
- (void)serializeAsFieldWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov;

/*!
 @brief Method called to indicate that serialization of a field was omitted due
  to filtering, in cases where backend data format does not allow basic
  omission.
 @since 2.3
 */
- (void)serializeAsOmittedFieldWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov;

/*!
 @brief Method called to serialize a placeholder used in tabular output when real
  value is not to be included (is filtered out), but when we need an entry
  so that field indexes will not be off.Typically this should output null
  or empty String, depending on datatype.
 @since 2.1
 */
- (void)serializeAsPlaceholderWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov;

/*!
 @brief Method for setting specific internal setting to given value
 @return Old value of the setting, if any (null if none)
 */
- (id)setInternalSettingWithId:(id)key
                        withId:(id)value;

/*!
 @brief Method called to define type to consider as "non-trivial" basetype,
  needed for dynamic serialization resolution for complex (usually
  container) types
 */
- (void)setNonTrivialBaseTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)t;

- (NSString *)description;

/*!
 @brief Method called create an instance that handles details of unwrapping
  contained value.
 */
- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)unwrappingWriterWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

- (jboolean)willSuppressNulls;

/*!
 @brief Method called to check to see if this property has a name that would
  conflict with a given name.
 @since 2.6
 */
- (jboolean)wouldConflictWithNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)name;

#pragma mark Protected

/*!
 @brief Constructor that may be of use to virtual properties, when there is need
  for the zero-arg ("default") constructor, and actual initialization is
  done after constructor call.
 @since 2.5
 */
- (instancetype __nonnull)init;

/*!
 @brief "Copy constructor" to be used by filtering sub-classes
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)base;

/*!
 @since 2.5
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)base
                                       withComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)name;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)base
                                     withComFasterxmlJacksonCoreIoSerializedString:(ComFasterxmlJacksonCoreIoSerializedString *)name;

- (void)_depositSchemaPropertyWithComFasterxmlJacksonDatabindNodeObjectNode:(ComFasterxmlJacksonDatabindNodeObjectNode *)propertiesNode
                                    withComFasterxmlJacksonDatabindJsonNode:(ComFasterxmlJacksonDatabindJsonNode *)schemaNode;

- (ComFasterxmlJacksonDatabindJsonSerializer *)_findAndAddDynamicWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)map
                                                                                                                withIOSClass:(IOSClass *)type
                                                                           withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called to handle a direct self-reference through this property.
 Method can choose to indicate an error by throwing 
 <code>JsonMappingException</code>; fully handle serialization (and return
  true); or indicate that it should be serialized normally (return false). 
 <p>
  Default implementation will throw <code>JsonMappingException</code> if 
 <code>SerializationFeature.FAIL_ON_SELF_REFERENCES</code> is enabled; or
  return <code>false</code> if it is disabled.
 @return True if method fully handled self-referential value; false if not
          (caller is to handle it) or <code>JsonMappingException</code> if there
          is no way handle it
 */
- (jboolean)_handleSelfReferenceWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Overridable factory method used by sub-classes
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)_newWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)newName OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindPropertyMetadata:(ComFasterxmlJacksonDatabindPropertyMetadata *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerBeanPropertyWriter)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _name_, ComFasterxmlJacksonCoreIoSerializedString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _wrapperName_, ComFasterxmlJacksonDatabindPropertyName *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _declaredType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _cfgSerializationType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _nonTrivialBaseType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _contextAnnotations_, id<ComFasterxmlJacksonDatabindUtilAnnotations>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _member_, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _accessorMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _field_, JavaLangReflectField *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _serializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _nullSerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _typeSerializer_, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _dynamicSerializers_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _suppressableValue_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _includeInViews_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, _internalSettings_, JavaUtilHashMap *)

/*!
 @brief Marker object used to indicate "do not serialize if empty"
 */
inline id ComFasterxmlJacksonDatabindSerBeanPropertyWriter_get_MARKER_FOR_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindSerBeanPropertyWriter_MARKER_FOR_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerBeanPropertyWriter, MARKER_FOR_EMPTY, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_withIOSClassArray_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self, ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue, IOSObjectArray *includeInViews);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_withIOSClassArray_(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue, IOSObjectArray *includeInViews) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_withIOSClassArray_(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue, IOSObjectArray *includeInViews);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self, ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition_withComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindUtilAnnotations_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJavaType_withBoolean_withId_(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *propDef, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *member, id<ComFasterxmlJacksonDatabindUtilAnnotations> contextAnnotations, ComFasterxmlJacksonDatabindJavaType *declaredType, ComFasterxmlJacksonDatabindJsonSerializer *ser, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *typeSer, ComFasterxmlJacksonDatabindJavaType *serType, jboolean suppressNulls, id suppressableValue);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_init(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self, ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonDatabindPropertyName_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self, ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonDatabindPropertyName *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonDatabindPropertyName_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonDatabindPropertyName *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonDatabindPropertyName_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonDatabindPropertyName *name);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonCoreIoSerializedString_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *self, ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonCoreIoSerializedString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *new_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonCoreIoSerializedString_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonCoreIoSerializedString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanPropertyWriter *create_ComFasterxmlJacksonDatabindSerBeanPropertyWriter_initWithComFasterxmlJacksonDatabindSerBeanPropertyWriter_withComFasterxmlJacksonCoreIoSerializedString_(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *base, ComFasterxmlJacksonCoreIoSerializedString *name);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBeanPropertyWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanPropertyWriter")
