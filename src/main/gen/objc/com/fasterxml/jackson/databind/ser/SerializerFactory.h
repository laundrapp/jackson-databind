//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerSerializerFactory")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerSerializerFactory
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerSerializerFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerSerializerFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerSerializerFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerSerializerFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerSerializerFactory || defined(INCLUDE_ComFasterxmlJacksonDatabindSerSerializerFactory))
#define ComFasterxmlJacksonDatabindSerSerializerFactory_

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerBeanSerializerModifier;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@protocol ComFasterxmlJacksonDatabindSerSerializers;

/*!
 @brief Abstract class that defines API used by <code>SerializerProvider</code>
  to obtain actual 
 <code>JsonSerializer</code> instances from multiple distinct factories.
 */
@interface ComFasterxmlJacksonDatabindSerSerializerFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to create serializer to use for serializing JSON property names (which must
  be output as <code>JsonToken.FIELD_NAME</code>) for Map that has specified declared
  key type, and is for specified property (or, if property is null, as root value)
 @param type Declared type for Map keys
 @param defaultImpl Default key serializer implementation to use, if no custom ones     are found (may be null)
 @return Serializer to use, if factory knows it; null if not (in which case default
    serializer is to be used)
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)createKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)defaultImpl;

/*!
 @brief Method called to create (or, for immutable serializers, reuse) a serializer for given type.
 @param prov Provider that needs to be used to resolve annotation-provided     serializers (but NOT for others)
 @since 2.1 (earlier versions had method with different signature)
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)createSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method called to create a type information serializer for given base type,
  if one is needed.If not needed (no polymorphic handling configured), should
  return null.
 @param baseType Declared type to use as the base type for type information serializer
 @return Type serializer to use for the base type, if one is needed; null if not.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)createTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withAdditionalKeySerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)additional;

/*!
 @brief Convenience method for creating a new factory instance with additional serializer
  provider; equivalent to calling
 @code

    withConfig(getConfig().withAdditionalSerializers(additional));
 
@endcode
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withAdditionalSerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)additional;

/*!
 @brief Convenience method for creating a new factory instance with additional bean
  serializer modifier; equivalent to calling
 @code

    withConfig(getConfig().withSerializerModifier(modifier));
 
@endcode
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withSerializerModifierWithComFasterxmlJacksonDatabindSerBeanSerializerModifier:(ComFasterxmlJacksonDatabindSerBeanSerializerModifier *)modifier;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerSerializerFactory)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerSerializerFactory_init(ComFasterxmlJacksonDatabindSerSerializerFactory *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerSerializerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerSerializerFactory")
