//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Math.h"
#include "java/nio/ByteBuffer.h"

@implementation ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream

- (instancetype __nonnull)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream_initWithJavaNioByteBuffer_(self, buf);
  return self;
}

- (jint)available {
  return [((JavaNioByteBuffer *) nil_chk(_b_)) remaining];
}

- (jint)read {
  return [((JavaNioByteBuffer *) nil_chk(_b_)) hasRemaining] ? ([_b_ get] & (jint) 0xFF) : -1;
}

- (jint)readWithByteArray:(IOSByteArray *)bytes
                  withInt:(jint)off
                  withInt:(jint)len {
  if (![((JavaNioByteBuffer *) nil_chk(_b_)) hasRemaining]) return -1;
  len = JavaLangMath_minWithInt_withInt_(len, [_b_ remaining]);
  [_b_ getWithByteArray:bytes withInt:off withInt:len];
  return len;
}

- (void)dealloc {
  RELEASE_(_b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:);
  methods[1].selector = @selector(available);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_b_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;", "LJavaIoIOException;", "read", "[BII" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream = { "ByteBufferBackedInputStream", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream;
}

@end

void ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream_initWithJavaNioByteBuffer_(ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream *self, JavaNioByteBuffer *buf) {
  JavaIoInputStream_init(self);
  JreStrongAssign(&self->_b_, buf);
}

ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream *new_ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buf) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream, initWithJavaNioByteBuffer_, buf)
}

ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream *create_ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buf) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream, initWithJavaNioByteBuffer_, buf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream)
