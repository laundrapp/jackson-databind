//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/annotation/JacksonStdImpl.h"
#include "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.h"
#include "java/lang/Boolean.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonDatabindSerStdCalendarSerializer__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindSerStdCalendarSerializer)

ComFasterxmlJacksonDatabindSerStdCalendarSerializer *ComFasterxmlJacksonDatabindSerStdCalendarSerializer_instance;

@implementation ComFasterxmlJacksonDatabindSerStdCalendarSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdCalendarSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaLangBoolean:(JavaLangBoolean *)useTimestamp
                           withJavaTextDateFormat:(JavaTextDateFormat *)customFormat {
  ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(self, useTimestamp, customFormat);
  return self;
}

- (ComFasterxmlJacksonDatabindSerStdCalendarSerializer *)withFormatWithJavaLangBoolean:(JavaLangBoolean *)timestamp
                                                                withJavaTextDateFormat:(JavaTextDateFormat *)customFormat {
  return create_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(timestamp, customFormat);
}

- (jlong)_timestampWithId:(JavaUtilCalendar *)value {
  return (value == nil) ? 0LL : [((JavaUtilCalendar *) nil_chk(value)) getTimeInMillis];
}

- (void)serializeWithId:(JavaUtilCalendar *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  if ([self _asTimestampWithComFasterxmlJacksonDatabindSerializerProvider:provider]) {
    [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(g)) writeNumberWithLong:[self _timestampWithId:value]];
    return;
  }
  [self _serializeAsStringWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(value)) getTime] withComFasterxmlJacksonCoreJsonGenerator:g withComFasterxmlJacksonDatabindSerializerProvider:provider];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindSerStdCalendarSerializer;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaLangBoolean:withJavaTextDateFormat:);
  methods[2].selector = @selector(withFormatWithJavaLangBoolean:withJavaTextDateFormat:);
  methods[3].selector = @selector(_timestampWithId:);
  methods[4].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instance", "LComFasterxmlJacksonDatabindSerStdCalendarSerializer;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangBoolean;LJavaTextDateFormat;", "withFormat", "_timestamp", "LJavaUtilCalendar;", "serialize", "LJavaUtilCalendar;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;", &ComFasterxmlJacksonDatabindSerStdCalendarSerializer_instance, "Lcom/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase<Ljava/util/Calendar;>;", (void *)&ComFasterxmlJacksonDatabindSerStdCalendarSerializer__Annotations$0 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdCalendarSerializer = { "CalendarSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, 8, 9 };
  return &_ComFasterxmlJacksonDatabindSerStdCalendarSerializer;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindSerStdCalendarSerializer class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindSerStdCalendarSerializer_instance, new_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindSerStdCalendarSerializer)
  }
}

@end

void ComFasterxmlJacksonDatabindSerStdCalendarSerializer_init(ComFasterxmlJacksonDatabindSerStdCalendarSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(self, nil, nil);
}

ComFasterxmlJacksonDatabindSerStdCalendarSerializer *new_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdCalendarSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdCalendarSerializer *create_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdCalendarSerializer, init)
}

void ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(ComFasterxmlJacksonDatabindSerStdCalendarSerializer *self, JavaLangBoolean *useTimestamp, JavaTextDateFormat *customFormat) {
  ComFasterxmlJacksonDatabindSerStdDateTimeSerializerBase_initWithIOSClass_withJavaLangBoolean_withJavaTextDateFormat_(self, JavaUtilCalendar_class_(), useTimestamp, customFormat);
}

ComFasterxmlJacksonDatabindSerStdCalendarSerializer *new_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(JavaLangBoolean *useTimestamp, JavaTextDateFormat *customFormat) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdCalendarSerializer, initWithJavaLangBoolean_withJavaTextDateFormat_, useTimestamp, customFormat)
}

ComFasterxmlJacksonDatabindSerStdCalendarSerializer *create_ComFasterxmlJacksonDatabindSerStdCalendarSerializer_initWithJavaLangBoolean_withJavaTextDateFormat_(JavaLangBoolean *useTimestamp, JavaTextDateFormat *customFormat) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdCalendarSerializer, initWithJavaLangBoolean_withJavaTextDateFormat_, useTimestamp, customFormat)
}

IOSObjectArray *ComFasterxmlJacksonDatabindSerStdCalendarSerializer__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComFasterxmlJacksonDatabindAnnotationJacksonStdImpl() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdCalendarSerializer)
