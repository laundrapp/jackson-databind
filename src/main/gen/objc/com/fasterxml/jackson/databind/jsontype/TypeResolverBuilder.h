//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder || defined(INCLUDE_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder))
#define ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder_

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonAnnotationJsonTypeInfo_Id;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;
@protocol JavaUtilCollection;

/*!
 @brief Interface that defines builders that are configured based on
  annotations (like <code>com.fasterxml.jackson.annotation.JsonTypeInfo</code> or JAXB annotations),
  and produce type serializers and deserializers used for
  handling type information embedded in JSON to allow for safe
  polymorphic type handling.
 <p>
  Builder is first initialized by calling <code>init</code> method, and then
  configured using 'set' methods like <code>inclusion</code>.
  Finally, after calling all configuration methods, 
 <code>buildTypeSerializer</code> or <code>buildTypeDeserializer</code>
  will be called to get actual type resolver constructed
  and used for resolving types for configured base type and its
  subtypes.
 <p>
  Note that instances are used for two related but distinct use cases:
 <ul>
  <li>To create builders to use with explicit type information
     inclusion (usually via <code>@@JsonTypeInfo</code> annotation)
    </li>
  <li>To create builders when "default typing" is used; if so, type information
    is automatically included for certain kind of types, regardless of annotations   
 </li>
 </ul>
  Important distinction between the cases is that in first case, calls to
  create builders are only made when builders are certainly needed; whereas
  in second case builder has to first verify whether type information is
  applicable for given type, and if not, just return null to indicate this.
 */
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder < JavaObject >

/*!
 @brief Accessor for currently configured default type; implementation
  class that may be used in case no valid type information is
  available during type resolution
 */
- (IOSClass *)getDefaultImpl;

/*!
 @brief Method for building type serializer based on current configuration
  of this builder.
 @param baseType Base type that constructed resolver will     handle; super type of all types it will be used for.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)buildTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method for building type deserializer based on current configuration
  of this builder.
 @param baseType Base type that constructed resolver will     handle; super type of all types it will be used for.
 @param subtypes Known subtypes of the base type.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)buildTypeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                            withJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Initialization method that is called right after constructing
  the builder instance.
 @param idType Which type metadata is used
 @param res (optional) Custom type id resolver used, if any
 @return Resulting builder instance (usually this builder,
    but not necessarily)
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)init__WithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)idType
                                                               withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)res OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method for specifying mechanism to use for including type metadata
  in JSON.
 If not explicitly called, setting defaults to 
 <code>As.PROPERTY</code>.
 @param includeAs Mechanism used for including type metadata in JSON
 @return Resulting builder instance (usually this builder,
    but may be a newly constructed instance for immutable builders}
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)inclusionWithComFasterxmlJacksonAnnotationJsonTypeInfo_As:(ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)includeAs;

/*!
 @brief Method for specifying name of property used for including type
  information.Not used for all inclusion mechanisms;
  usually only used with <code>As.PROPERTY</code>.
 <p>
  If not explicitly called, name of property to use is based on
  defaults for <code>com.fasterxml.jackson.annotation.JsonTypeInfo.Id</code> configured.
 @param propName Name of JSON property to use for including     type information
 @return Resulting builder instance (usually this builder,
    but may be a newly constructed instance for immutable builders}
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typePropertyWithNSString:(NSString *)propName;

/*!
 @brief Method for specifying default implementation to use if type id 
  is either not available, or cannot be resolved.
 @return Resulting builder instance (usually this builder,
    but may be a newly constructed instance for immutable builders}
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)defaultImplWithIOSClass:(IOSClass *)defaultImpl;

/*!
 @brief Method for specifying whether type id should be visible to 
 <code>com.fasterxml.jackson.databind.JsonDeserializer</code>s or not.
 @return Resulting builder instance (usually this builder,
    but may be a newly constructed instance for immutable builders}
 @since 2.0
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typeIdVisibilityWithBoolean:(jboolean)isVisible;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder")
