//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindObjectWriter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindObjectWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindObjectWriter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectWriter))
#define ComFasterxmlJacksonDatabindObjectWriter_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoCharacterEscapes;
@class ComFasterxmlJacksonCoreJsonFactory;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreTypeTypeReference;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindObjectMapper;
@class ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings;
@class ComFasterxmlJacksonDatabindObjectWriter_Prefetch;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindSequenceWriter;
@class ComFasterxmlJacksonDatabindSerDefaultSerializerProvider;
@class ComFasterxmlJacksonDatabindSerFilterProvider;
@class ComFasterxmlJacksonDatabindSerSerializerFactory;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializationFeature;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaTextDateFormat;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonCoreFormatFeature;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCorePrettyPrinter;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaIoDataOutput;
@protocol JavaUtilMap;

/*!
 @brief Builder object that can be used for per-serialization configuration of
  serialization parameters, such as JSON View and root type to use.
 (and thus fully thread-safe with no external synchronization);
  new instances are constructed for different configurations.
  Instances are initially constructed by <code>ObjectMapper</code> and can be
  reused in completely thread-safe manner with no explicit synchronization
 */
@interface ComFasterxmlJacksonDatabindObjectWriter : NSObject < ComFasterxmlJacksonCoreVersioned, JavaIoSerializable > {
 @public
  /*!
   @brief General serialization configuration settings
   */
  ComFasterxmlJacksonDatabindSerializationConfig *_config_;
  ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *_serializerProvider_;
  ComFasterxmlJacksonDatabindSerSerializerFactory *_serializerFactory_;
  /*!
   @brief Factory used for constructing <code>JsonGenerator</code>s
   */
  ComFasterxmlJacksonCoreJsonFactory *_generatorFactory_;
  /*!
   @brief Container for settings that need to be passed to <code>JsonGenerator</code>
  constructed for serializing values.
   @since 2.5
   */
  ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *_generatorSettings_;
  /*!
   @brief We may pre-fetch serializer if root type
  is known (has been explicitly declared), and if so, reuse it afterwards.
   This allows avoiding further serializer lookups and increases
  performance a bit on cases where readers are reused.
   @since 2.5
   */
  ComFasterxmlJacksonDatabindObjectWriter_Prefetch *_prefetch_;
}

#pragma mark Public

/*!
 @brief Since 2.6
 */
- (void)acceptJsonFormatVisitorWithIOSClass:(IOSClass *)rawType
withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor;

/*!
 @brief Method for visiting type hierarchy for given type, using specified visitor.
 Visitation uses <code>Serializer</code> hierarchy and related properties
 <p>
  This method can be used for things like
  generating <a href="http://json-schema.org/">Json Schema</a>
  instance for specified type.
 @param type Type to generate schema for (possibly with generic signature)
 @since 2.2
 */
- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor;

- (jboolean)canSerializeWithIOSClass:(IOSClass *)type;

/*!
 @brief Method for checking whether instances of given type can be serialized,
  and optionally why (as per <code>Throwable</code> returned).
 @since 2.3
 */
- (jboolean)canSerializeWithIOSClass:(IOSClass *)type
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)cause;

/*!
 @brief Method that will construct a new instance that uses specific type
  as the root type for serialization, instead of runtime dynamic
  type of the root object itself.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)forTypeWithIOSClass:(IOSClass *)rootType;

/*!
 @brief Method that will construct a new instance that uses specific type
  as the root type for serialization, instead of runtime dynamic
  type of the root object itself.
 <p>
  Note that method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)forTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 @brief Method that will construct a new instance that uses specific type
  as the root type for serialization, instead of runtime dynamic
  type of the root object itself.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)forTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)rootType;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgContextAttributes *)getAttributes;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindSerializationConfig *)getConfig;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonCoreJsonFactory *)getFactory;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

/*!
 @brief Diagnostics method that can be called to check whether this writer
  has pre-fetched serializer to use: pre-fetching improves performance
  when writer instances are reused as it avoids a per-call serializer
  lookup.
 @since 2.2
 */
- (jboolean)hasPrefetchedSerializer;

/*!
 @since 2.9
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

/*!
 @since 2.9
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f;

/*!
 @brief Method that will return version information stored in and read from jar
  that contains this class.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

/*!
 @brief Method that will construct a new instance that uses specified default 
 <code>Base64Variant</code> for base64 encoding
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)escapes;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonDatabindCfgContextAttributes:(ComFasterxmlJacksonDatabindCfgContextAttributes *)attrs;

/*!
 @brief Fluent factory method that will construct a new writer instance that will
  use specified date format for serializing dates; or if null passed, one
  that will serialize dates as numeric timestamps.
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithJavaTextDateFormat:(JavaTextDateFormat *)df;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)feature;

/*!
 @brief Method that will construct a new instance that uses specified
  provider for resolving filter instances by id.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonDatabindSerFilterProvider:(ComFasterxmlJacksonDatabindSerFilterProvider *)filterProvider;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreFormatFeature:(id<ComFasterxmlJacksonCoreFormatFeature>)feature;

/*!
 @brief Method that will construct a new instance that uses specific format schema
  for serialization.
 <p>
  Note that method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f;

- (ComFasterxmlJacksonDatabindObjectWriter *)withWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Method that will construct a new instance that will use specified pretty
  printer (or, if null, will not do any pretty-printing)
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

/*!
 @brief Method for constructing a new instance that is configured
  with specified feature enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)feature;

/*!
 @brief Method for constructing a new instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)first
                                            withComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)other;

- (ComFasterxmlJacksonDatabindObjectWriter *)withWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withAttributeWithId:(id)key
                                                          withId:(id)value;

/*!
 @brief Mutant factory method that allows construction of a new writer instance
  that uses specified set of default attribute values.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs;

/*!
 @brief Method that will construct a new instance that will use the default
  pretty printer for serialization.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withDefaultPrettyPrinter;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withFeaturesWithComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)features;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withFeaturesWithComFasterxmlJacksonCoreFormatFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withFeaturesWithComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)features;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)feature;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutWithComFasterxmlJacksonCoreFormatFeature:(id<ComFasterxmlJacksonCoreFormatFeature>)feature;

/*!
 @brief Method for constructing a new instance that is configured
  with specified feature enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)feature;

/*!
 @brief Method for constructing a new instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)first
                                               withComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)other;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutAttributeWithId:(id)key;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutFeaturesWithComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)features;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutFeaturesWithComFasterxmlJacksonCoreFormatFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Method for constructing a new instance that is configured
  with specified features enabled.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutFeaturesWithComFasterxmlJacksonDatabindSerializationFeatureArray:(IOSObjectArray *)features;

/*!
 @brief Convenience method that is same as calling:
 <code>
    withRootName("")
 </code>
  which will forcibly prevent use of root name wrapping when writing
  values with this <code>ObjectWriter</code>.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withoutRootName;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withRootNameWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)rootName;

/*!
 @brief Method for constructing a new instance with configuration that
  specifies what root name to use for "root element wrapping".
 See <code>SerializationConfig.withRootName(String)</code> for details.
 <p>
  Note that method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 @param rootName Root name to use, if non-empty; `null` for "use defaults",     and empty String ("") for "do NOT add root wrapper"
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withRootNameWithNSString:(NSString *)rootName;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withRootValueSeparatorWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)sep;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withRootValueSeparatorWithNSString:(NSString *)sep;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withSchemaWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withTypeWithIOSClass:(IOSClass *)rootType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)rootType;

/*!
 @brief Method that will construct a new instance that uses specified
  serialization view for serialization (with null basically disables
  view processing)
 <p>
  Note that the method does NOT change state of this reader, but
  rather construct and returns a newly configured instance.
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)withViewWithIOSClass:(IOSClass *)view;

/*!
 @since 2.8
 */
- (void)writeValueWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                                withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, written to File provided.
 */
- (void)writeValueWithJavaIoFile:(JavaIoFile *)resultFile
                          withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using provided <code>JsonGenerator</code>.
 */
- (void)writeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                    withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using output stream provided (using encoding 
 <code>JsonEncoding.UTF8</code>).
 <p>
  Note: method does not close the underlying stream explicitly
  here; however, <code>JsonFactory</code> this mapper uses may choose
  to close the stream depending on its settings (by default,
  it will try to close it when <code>JsonGenerator</code> we construct
  is closed).
 */
- (void)writeValueWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                  withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  JSON output, using Writer provided.
 <p>
  Note: method does not close the underlying stream explicitly
  here; however, <code>JsonFactory</code> this mapper uses may choose
  to close the stream depending on its settings (by default,
  it will try to close it when <code>JsonGenerator</code> we construct
  is closed).
 */
- (void)writeValueWithJavaIoWriter:(JavaIoWriter *)w
                            withId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  a byte array.Functionally equivalent to calling 
 <code>writeValue(Writer,Object)</code> with <code>java.io.ByteArrayOutputStream</code>
  and getting bytes, but more efficient.
 Encoding used will be UTF-8.
 <p>
  Note: prior to version 2.1, throws clause included <code>IOException</code>; 2.1 removed it.
 */
- (IOSByteArray *)writeValueAsBytesWithId:(id)value;

/*!
 @brief Method that can be used to serialize any Java value as
  a String.Functionally equivalent to calling 
 <code>writeValue(Writer,Object)</code> with <code>java.io.StringWriter</code>
  and constructing String, but more efficient.
 <p>
  Note: prior to version 2.1, throws clause included <code>IOException</code>; 2.1 removed it.
 */
- (NSString *)writeValueAsStringWithId:(id)value;

/*!
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write a sequence of root
  values using configuration of this <code>ObjectWriter</code>.
 Sequence is not surrounded by JSON array; some backend types may not
  support writing of such sequences as root level.
  Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 @param outArg Target file to write value sequence to.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesWithJavaIoFile:(JavaIoFile *)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write a sequence of root
  values using configuration of this <code>ObjectWriter</code>.
 Sequence is not surrounded by JSON array; some backend types may not
  support writing of such sequences as root level.
  Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure that all content gets flushed by
  the generator. However, since a <code>JsonGenerator</code> is explicitly passed,
  it will NOT be closed when <code>SequenceWriter.close()</code> is called.
 @param gen Low-level generator caller has already constructed that will    be used for actual writing of token stream.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write a sequence of root
  values using configuration of this <code>ObjectWriter</code>.
 Sequence is not surrounded by JSON array; some backend types may not
  support writing of such sequences as root level.
  Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 @param outArg Physical output stream to use for writing the token stream
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write a sequence of root
  values using configuration of this <code>ObjectWriter</code>.
 Sequence is not surrounded by JSON array; some backend types may not
  support writing of such sequences as root level.
  Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 @param outArg Target writer to use for writing the token stream
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesWithJavaIoWriter:(JavaIoWriter *)outArg;

/*!
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesAsArrayWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write an array of
  root-level values, using configuration of this <code>ObjectWriter</code>.
 Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 <p>
  Note that the type to use with <code>ObjectWriter.forType(Class)</code> needs to
  be type of individual values (elements) to write and NOT matching array
  or <code>java.util.Collection</code> type.
 @param outArg File to write token stream to
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesAsArrayWithJavaIoFile:(JavaIoFile *)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write an array of
  root-level values, using configuration of this <code>ObjectWriter</code>.
 Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure that all content gets flushed by
  the generator. However, since a <code>JsonGenerator</code> is explicitly passed,
  it will NOT be closed when <code>SequenceWriter.close()</code> is called.
 <p>
  Note that the type to use with <code>ObjectWriter.forType(Class)</code> needs to
  be type of individual values (elements) to write and NOT matching array
  or <code>java.util.Collection</code> type.
 @param gen Underlying generator to use for writing the token stream
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesAsArrayWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write an array of
  root-level values, using configuration of this <code>ObjectWriter</code>.
 Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 <p>
  Note that the type to use with <code>ObjectWriter.forType(Class)</code> needs to
  be type of individual values (elements) to write and NOT matching array
  or <code>java.util.Collection</code> type.
 @param outArg Physical output stream to use for writing the token stream
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesAsArrayWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for creating a <code>SequenceWriter</code> to write an array of
  root-level values, using configuration of this <code>ObjectWriter</code>.
 Resulting writer needs to be <code>SequenceWriter.close()</code>d after all
  values have been written to ensure closing of underlying generator and
  output stream.
 <p>
  Note that the type to use with <code>ObjectWriter.forType(Class)</code> needs to
  be type of individual values (elements) to write and NOT matching array
  or <code>java.util.Collection</code> type.
 @param outArg Writer to use for writing the token stream
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)writeValuesAsArrayWithJavaIoWriter:(JavaIoWriter *)outArg;

#pragma mark Protected

/*!
 @brief Alternative constructor for initial instantiation by <code>ObjectMapper</code>
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)mapper
                       withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config;

/*!
 @brief Alternative constructor for initial instantiation by <code>ObjectMapper</code>
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)mapper
                       withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                  withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)s;

/*!
 @brief Constructor used by <code>ObjectMapper</code> for initial instantiation
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectMapper:(ComFasterxmlJacksonDatabindObjectMapper *)mapper
                       withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                                 withComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

/*!
 @since 2.3
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)base
                                   withComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f;

/*!
 @brief Copy constructor used for building variations.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)base
                       withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config;

/*!
 @brief Copy constructor used for building variations.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)base
                       withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
            withComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings:(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)genSettings
                     withComFasterxmlJacksonDatabindObjectWriter_Prefetch:(ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)prefetch;

/*!
 @brief Method called to configure the generator as necessary and then
  call write functionality
 */
- (void)_configAndWriteValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                              withId:(id)value;

/*!
 @brief Helper method called to set or override settings of passed-in 
 <code>JsonGenerator</code>
 @since 2.5
 */
- (void)_configureGeneratorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Overridable factory method called by various "withXxx()" methods.
 It assumes `this` as base for settings other than those directly
  passed in.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWithComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings:(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)genSettings
                                                          withComFasterxmlJacksonDatabindObjectWriter_Prefetch:(ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)prefetch OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable factory method called by various "withXxx()" methods
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)base
                                                      withComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)f OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable factory method called by various "withXxx()" methods
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindObjectWriter *)_newWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)base
                                          withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable factory method called by <code>writeValues(OutputStream)</code>
  method (and its various overrides), and initializes it as necessary.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSequenceWriter *)_newSequenceWriterWithBoolean:(jboolean)wrapInArray
                                    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                                 withBoolean:(jboolean)managedInput OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Overridable helper method used for constructing 
 <code>SerializerProvider</code> to use for serialization.
 */
- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)_serializerProvider;

/*!
 @since 2.2
 */
- (void)_verifySchemaTypeWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectWriter)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _config_, ComFasterxmlJacksonDatabindSerializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _serializerProvider_, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _serializerFactory_, ComFasterxmlJacksonDatabindSerSerializerFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _generatorFactory_, ComFasterxmlJacksonCoreJsonFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _generatorSettings_, ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter, _prefetch_, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)

/*!
 @brief We need to keep track of explicit disabling of pretty printing;
  easiest to do by a token value.
 */
inline id<ComFasterxmlJacksonCorePrettyPrinter> ComFasterxmlJacksonDatabindObjectWriter_get_NULL_PRETTY_PRINTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComFasterxmlJacksonCorePrettyPrinter> ComFasterxmlJacksonDatabindObjectWriter_NULL_PRETTY_PRINTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindObjectWriter, NULL_PRETTY_PRINTER, id<ComFasterxmlJacksonCorePrettyPrinter>)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCorePrettyPrinter_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindJavaType *rootType, id<ComFasterxmlJacksonCorePrettyPrinter> pp);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCorePrettyPrinter_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindJavaType *rootType, id<ComFasterxmlJacksonCorePrettyPrinter> pp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCorePrettyPrinter_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindJavaType *rootType, id<ComFasterxmlJacksonCorePrettyPrinter> pp);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonCoreFormatSchema_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, id<ComFasterxmlJacksonCoreFormatSchema> s);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonCoreFormatSchema_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, id<ComFasterxmlJacksonCoreFormatSchema> s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectMapper_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonCoreFormatSchema_(ComFasterxmlJacksonDatabindObjectMapper *mapper, ComFasterxmlJacksonDatabindSerializationConfig *config, id<ComFasterxmlJacksonCoreFormatSchema> s);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *genSettings, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *genSettings, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_withComFasterxmlJacksonDatabindObjectWriter_Prefetch_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *genSettings, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *prefetch);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonDatabindSerializationConfig_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonDatabindSerializationConfig *config);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectWriter *self, ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonCoreJsonFactory *f);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *new_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonCoreJsonFactory *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter *create_ComFasterxmlJacksonDatabindObjectWriter_initWithComFasterxmlJacksonDatabindObjectWriter_withComFasterxmlJacksonCoreJsonFactory_(ComFasterxmlJacksonDatabindObjectWriter *base, ComFasterxmlJacksonCoreJsonFactory *f);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectWriter)

#endif

#if !defined (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings))
#define ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreIoCharacterEscapes;
@class ComFasterxmlJacksonCoreJsonGenerator;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCorePrettyPrinter;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief Helper class used for containing settings specifically related
  to (re)configuring <code>JsonGenerator</code> constructed for
  writing output.
 @since 2.5
 */
@interface ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief To allow for dynamic enabling/disabling of pretty printing,
  pretty printer can be optionally configured for writer
  as well
   */
  id<ComFasterxmlJacksonCorePrettyPrinter> prettyPrinter_;
  /*!
   @brief When using data format that uses a schema, schema is passed
  to generator.
   */
  id<ComFasterxmlJacksonCoreFormatSchema> schema_;
  /*!
   @brief Caller may want to specify character escaping details, either as
  defaults, or on call-by-call basis.
   */
  ComFasterxmlJacksonCoreIoCharacterEscapes *characterEscapes_;
  /*!
   @brief Caller may want to override so-called "root value separator",
  String added (verbatim, with no quoting or escaping) between
  values in root context.Default value is a single space character,
  but this is often changed to linefeed.
   */
  id<ComFasterxmlJacksonCoreSerializableString> rootValueSeparator_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp
                               withComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)sch
                         withComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)esc
                         withComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)rootSep;

/*!
 @since 2.6
 */
- (void)initialize__WithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)withWithComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)esc;

- (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)withWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)sch;

- (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)withWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

- (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)withRootValueSeparatorWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)sep;

- (ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)withRootValueSeparatorWithNSString:(NSString *)sep;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings, prettyPrinter_, id<ComFasterxmlJacksonCorePrettyPrinter>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings, schema_, id<ComFasterxmlJacksonCoreFormatSchema>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings, characterEscapes_, ComFasterxmlJacksonCoreIoCharacterEscapes *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings, rootValueSeparator_, id<ComFasterxmlJacksonCoreSerializableString>)

inline ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_get_empty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_empty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings, empty, ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_initWithComFasterxmlJacksonCorePrettyPrinter_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCoreSerializableString_(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *self, id<ComFasterxmlJacksonCorePrettyPrinter> pp, id<ComFasterxmlJacksonCoreFormatSchema> sch, ComFasterxmlJacksonCoreIoCharacterEscapes *esc, id<ComFasterxmlJacksonCoreSerializableString> rootSep);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *new_ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_initWithComFasterxmlJacksonCorePrettyPrinter_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCoreSerializableString_(id<ComFasterxmlJacksonCorePrettyPrinter> pp, id<ComFasterxmlJacksonCoreFormatSchema> sch, ComFasterxmlJacksonCoreIoCharacterEscapes *esc, id<ComFasterxmlJacksonCoreSerializableString> rootSep) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings *create_ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings_initWithComFasterxmlJacksonCorePrettyPrinter_withComFasterxmlJacksonCoreFormatSchema_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCoreSerializableString_(id<ComFasterxmlJacksonCorePrettyPrinter> pp, id<ComFasterxmlJacksonCoreFormatSchema> sch, ComFasterxmlJacksonCoreIoCharacterEscapes *esc, id<ComFasterxmlJacksonCoreSerializableString> rootSep);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectWriter_GeneratorSettings)

#endif

#if !defined (ComFasterxmlJacksonDatabindObjectWriter_Prefetch_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter || defined(INCLUDE_ComFasterxmlJacksonDatabindObjectWriter_Prefetch))
#define ComFasterxmlJacksonDatabindObjectWriter_Prefetch_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindObjectWriter;
@class ComFasterxmlJacksonDatabindSerDefaultSerializerProvider;

/*!
 @brief As a minor optimization, we will make an effort to pre-fetch a serializer,
  or at least relevant <code>TypeSerializer</code>, if given enough
  information.
 @since 2.5
 */
@interface ComFasterxmlJacksonDatabindObjectWriter_Prefetch : NSObject < JavaIoSerializable >

#pragma mark Public

- (ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)forRootTypeWithComFasterxmlJacksonDatabindObjectWriter:(ComFasterxmlJacksonDatabindObjectWriter *)parent
                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)newType;

- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)getTypeSerializer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)getValueSerializer;

- (jboolean)hasSerializer;

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                   withId:(id)value
withComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)prov;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindObjectWriter_Prefetch)

inline ComFasterxmlJacksonDatabindObjectWriter_Prefetch *ComFasterxmlJacksonDatabindObjectWriter_Prefetch_get_empty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindObjectWriter_Prefetch *ComFasterxmlJacksonDatabindObjectWriter_Prefetch_empty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindObjectWriter_Prefetch, empty, ComFasterxmlJacksonDatabindObjectWriter_Prefetch *)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindObjectWriter_Prefetch)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindObjectWriter")
