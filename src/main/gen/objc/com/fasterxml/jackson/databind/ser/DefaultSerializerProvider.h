//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider
#ifdef INCLUDE_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl
#define INCLUDE_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider || defined(INCLUDE_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider))
#define ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_

#define RESTRICT_ComFasterxmlJacksonDatabindSerializerProvider 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerializerProvider 1
#include "com/fasterxml/jackson/databind/SerializerProvider.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationObjectIdGenerator;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsonschemaJsonSchema;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerImplWritableObjectId;
@class ComFasterxmlJacksonDatabindSerSerializerFactory;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class IOSClass;
@class JavaUtilArrayList;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaUtilMap;

/*!
 @brief Standard implementation used by <code>ObjectMapper</code>:
  adds methods only exposed to <code>ObjectMapper</code>,
  as well as constructors.
 <p>
  Note that class is abstract just because it does not
  define <code>createInstance</code> method.
 <p>
  Also note that all custom <code>SerializerProvider</code>
  implementations must sub-class this class: <code>ObjectMapper</code>
  requires this type, not basic provider type.
 */
@interface ComFasterxmlJacksonDatabindSerDefaultSerializerProvider : ComFasterxmlJacksonDatabindSerializerProvider < JavaIoSerializable > {
 @public
  /*!
   @brief Per-serialization map Object Ids that have seen so far, iff
  Object Id handling is enabled.
   */
  id<JavaUtilMap> _seenObjectIds_;
  JavaUtilArrayList *_objectIdGenerators_;
  /*!
   @brief Generator used for serialization.Needed mostly for error reporting
  purposes.
   @since 2.8
   */
  ComFasterxmlJacksonCoreJsonGenerator *_generator_;
}

#pragma mark Public

/*!
 @brief The method to be called by <code>ObjectMapper</code> and <code>ObjectWriter</code>
  to to expose the format of the given to to the given visitor
 @param javaType The type for which to generate format
 @param visitor the visitor to accept the format
 */
- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)javaType
withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor;

/*!
 @brief Method that can be used to determine how many serializers this
  provider is caching currently
  (if it does caching: default implementation does)
  Exact count depends on what kind of serializers get cached;
  default implementation caches all serializers, including ones that
  are eagerly constructed (for optimal access speed)
 <p> 
  The main use case for this method is to allow conditional flushing of
  serializer cache, if certain number of entries is reached.
 */
- (jint)cachedSerializersCount;

/*!
 @brief Method needed to ensure that <code>ObjectMapper.copy</code> will work
  properly; specifically, that caches are cleared, but settings
  will otherwise remain identical; and that no sharing of state
  occurs.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)copy__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method that sub-classes need to implement: used to create a non-blueprint instances
  from the blueprint.
 This is needed to retain state during serialization.
 */
- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)createInstanceWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindSerSerializerFactory:(ComFasterxmlJacksonDatabindSerSerializerFactory *)jsf;

- (ComFasterxmlJacksonDatabindSerImplWritableObjectId *)findObjectIdWithId:(id)forPojo
                        withComFasterxmlJacksonAnnotationObjectIdGenerator:(ComFasterxmlJacksonAnnotationObjectIdGenerator *)generatorType;

/*!
 @brief Method that will drop all serializers currently cached by this provider.
 This can be used to remove memory usage (in case some serializers are
  only used once or so), or to force re-construction of serializers after
  configuration changes for mapper than owns the provider.
 */
- (void)flushCachedSerializers;

/*!
 @brief The method to be called by <code>ObjectMapper</code>
  to generate <a href="http://json-schema.org/">JSON schema</a> for
  given type.
 @param type The type for which to generate schema
 */
- (ComFasterxmlJacksonDatabindJsonschemaJsonSchema *)generateJsonSchemaWithIOSClass:(IOSClass *)type;

/*!
 @brief Accessor for the <code>JsonGenerator</code> currently in use for serializing
  content.Null for blueprint instances; non-null for actual active
  provider instances.
 @since 2.8
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)getGenerator;

/*!
 @brief Method that can be called to see if this serializer provider
  can find a serializer for an instance of given class.
 <p>
  Note that no Exceptions are thrown, including unchecked ones:
  implementations are to swallow exceptions if necessary.
 */
- (jboolean)hasSerializerForWithIOSClass:(IOSClass *)cls
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)cause;

- (id)includeFilterInstanceWithComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)forProperty
                                                                              withIOSClass:(IOSClass *)filterClass;

- (jboolean)includeFilterSuppressNullsWithId:(id)filter;

/*!
 @brief Alternate serialization call used for polymorphic types, when <code>TypeSerializer</code>
  is already known, but the actual serializer may or may not be.
 @since 2.6
 */
- (void)serializePolymorphicWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                              withId:(id)value
                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSer
               withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)serializerInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                             withId:(id)serDef;

/*!
 @brief The method to be called by <code>ObjectMapper</code> and <code>ObjectWriter</code>
  for serializing given value, using serializers that
  this provider has access to (via caching and/or creating new serializers
  as need be).
 */
- (void)serializeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                        withId:(id)value;

/*!
 @brief The method to be called by <code>ObjectMapper</code> and <code>ObjectWriter</code>
  for serializing given value (assumed to be of specified root type,
  instead of runtime type of value),
  using serializers that
  this provider has access to (via caching and/or creating new serializers
  as need be),
 @param rootType Type to use for locating serializer to use, instead of actual     runtime type. Must be actual type, or one of its super types
 */
- (void)serializeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                        withId:(id)value
                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 @brief The method to be called by <code>ObjectWriter</code>
  for serializing given value (assumed to be of specified root type,
  instead of runtime type of value), when it may know specific 
 <code>JsonSerializer</code> to use.
 @param rootType Type to use for locating serializer to use, instead of actual     runtime type, if no serializer is passed
 @param ser Root Serializer to use, if not null
 @since 2.1
 */
- (void)serializeValueWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                        withId:(id)value
                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType
                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)src;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)src
                             withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                            withComFasterxmlJacksonDatabindSerSerializerFactory:(ComFasterxmlJacksonDatabindSerSerializerFactory *)f;

/*!
 @brief Overridable helper method used for creating <code>java.util.Map</code>
  used for storing mappings from serializable objects to their
  Object Ids.
 @since 2.3
 */
- (id<JavaUtilMap>)_createObjectIdMap;

/*!
 @brief Helper method called when root value to serialize is null
 @since 2.3
 */
- (void)_serializeNullWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider, _seenObjectIds_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider, _objectIdGenerators_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider, _generator_, ComFasterxmlJacksonCoreJsonGenerator *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_init(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *self);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_initWithComFasterxmlJacksonDatabindSerializerProvider_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindSerSerializerFactory_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *self, ComFasterxmlJacksonDatabindSerializerProvider *src, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindSerSerializerFactory *f);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *self, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider || defined(INCLUDE_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl))
#define ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_

@class ComFasterxmlJacksonDatabindSerDefaultSerializerProvider;
@class ComFasterxmlJacksonDatabindSerSerializerFactory;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief Concrete implementation that defines factory method(s),
  defined as final.
 */
@interface ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl : ComFasterxmlJacksonDatabindSerDefaultSerializerProvider

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *)src;

- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)copy__ OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *)createInstanceWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                               withComFasterxmlJacksonDatabindSerSerializerFactory:(ComFasterxmlJacksonDatabindSerSerializerFactory *)jsf;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)src
                             withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                            withComFasterxmlJacksonDatabindSerSerializerFactory:(ComFasterxmlJacksonDatabindSerSerializerFactory *)f;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider:(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_init(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *new_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *create_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *self, ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *src);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *new_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *create_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerializerProvider_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindSerSerializerFactory_(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *self, ComFasterxmlJacksonDatabindSerializerProvider *src, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindSerSerializerFactory *f);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *new_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerializerProvider_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindSerSerializerFactory_(ComFasterxmlJacksonDatabindSerializerProvider *src, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindSerSerializerFactory *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl *create_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl_initWithComFasterxmlJacksonDatabindSerializerProvider_withComFasterxmlJacksonDatabindSerializationConfig_withComFasterxmlJacksonDatabindSerSerializerFactory_(ComFasterxmlJacksonDatabindSerializerProvider *src, ComFasterxmlJacksonDatabindSerializationConfig *config, ComFasterxmlJacksonDatabindSerSerializerFactory *f);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerDefaultSerializerProvider_Impl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerDefaultSerializerProvider")
