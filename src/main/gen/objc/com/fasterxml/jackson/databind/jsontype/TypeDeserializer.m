//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/annotation/JsonTypeInfo.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/databind/BeanProperty.h"
#include "com/fasterxml/jackson/databind/DeserializationContext.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeIdResolver.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"

@implementation ComFasterxmlJacksonDatabindJsontypeTypeDeserializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)forPropertyWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)getTypeInclusion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getPropertyName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)getTypeIdResolver {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSClass *)getDefaultImpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)deserializeTypedFromObjectWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)deserializeTypedFromArrayWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
               withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)deserializeTypedFromScalarWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)deserializeTypedFromAnyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (id)deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                        withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType {
  return ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJavaType_(p, ctxt, baseType);
}

+ (id)deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                   withIOSClass:(IOSClass *)base {
  return ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withIOSClass_(p, ctxt, base);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeTypeDeserializer;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonAnnotationJsonTypeInfo_As;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeTypeIdResolver;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 6, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 7, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 8, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 9, 10, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 9, 11, 5, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forPropertyWithComFasterxmlJacksonDatabindBeanProperty:);
  methods[2].selector = @selector(getTypeInclusion);
  methods[3].selector = @selector(getPropertyName);
  methods[4].selector = @selector(getTypeIdResolver);
  methods[5].selector = @selector(getDefaultImpl);
  methods[6].selector = @selector(deserializeTypedFromObjectWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:);
  methods[7].selector = @selector(deserializeTypedFromArrayWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:);
  methods[8].selector = @selector(deserializeTypedFromScalarWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:);
  methods[9].selector = @selector(deserializeTypedFromAnyWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:);
  methods[10].selector = @selector(deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:withComFasterxmlJacksonDatabindJavaType:);
  methods[11].selector = @selector(deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forProperty", "LComFasterxmlJacksonDatabindBeanProperty;", "()Ljava/lang/Class<*>;", "deserializeTypedFromObject", "LComFasterxmlJacksonCoreJsonParser;LComFasterxmlJacksonDatabindDeserializationContext;", "LJavaIoIOException;", "deserializeTypedFromArray", "deserializeTypedFromScalar", "deserializeTypedFromAny", "deserializeIfNatural", "LComFasterxmlJacksonCoreJsonParser;LComFasterxmlJacksonDatabindDeserializationContext;LComFasterxmlJacksonDatabindJavaType;", "LComFasterxmlJacksonCoreJsonParser;LComFasterxmlJacksonDatabindDeserializationContext;LIOSClass;", "(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;Ljava/lang/Class<*>;)Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindJsontypeTypeDeserializer = { "TypeDeserializer", "com.fasterxml.jackson.databind.jsontype", ptrTable, methods, NULL, 7, 0x401, 12, 0, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
}

@end

void ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_init(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *self) {
  NSObject_init(self);
}

id ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, ComFasterxmlJacksonDatabindJavaType *baseType) {
  ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_initialize();
  return ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withIOSClass_(p, ctxt, [((ComFasterxmlJacksonDatabindJavaType *) nil_chk(baseType)) getRawClass]);
}

id ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withIOSClass_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, IOSClass *base) {
  ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_initialize();
  ComFasterxmlJacksonCoreJsonToken *t = [((ComFasterxmlJacksonCoreJsonParser *) nil_chk(p)) getCurrentToken];
  if (t == nil) {
    return nil;
  }
  switch ([t ordinal]) {
    case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_STRING:
    if ([((IOSClass *) nil_chk(base)) isAssignableFrom:NSString_class_()]) {
      return [p getText];
    }
    break;
    case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_INT:
    if ([((IOSClass *) nil_chk(base)) isAssignableFrom:JavaLangInteger_class_()]) {
      return JavaLangInteger_valueOfWithInt_([p getIntValue]);
    }
    break;
    case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_FLOAT:
    if ([((IOSClass *) nil_chk(base)) isAssignableFrom:JavaLangDouble_class_()]) {
      return JavaLangDouble_valueOfWithDouble_([p getDoubleValue]);
    }
    break;
    case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_TRUE:
    if ([((IOSClass *) nil_chk(base)) isAssignableFrom:JavaLangBoolean_class_()]) {
      return JreLoadStatic(JavaLangBoolean, TRUE);
    }
    break;
    case ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_FALSE:
    if ([((IOSClass *) nil_chk(base)) isAssignableFrom:JavaLangBoolean_class_()]) {
      return JreLoadStatic(JavaLangBoolean, FALSE);
    }
    break;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer)
