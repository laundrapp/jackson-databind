//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsontypeSubtypeResolver_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver || defined(INCLUDE_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver))
#define ComFasterxmlJacksonDatabindJsontypeSubtypeResolver_

@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgMapperConfig;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedClass;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindJavaType;
@class IOSObjectArray;
@protocol JavaUtilCollection;

/*!
 @brief Helper object used for handling registration on resolving of super-types
  to sub-types.
 */
@interface ComFasterxmlJacksonDatabindJsontypeSubtypeResolver : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesWithComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)baseType
                                                            withComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                     withComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)property
                                                             withComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                      withComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai
                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for finding out all reachable subtypes for given type,
  such that access is by type,
  typically needed for serialization (converting from type to type name).
 @param baseType Effective property base type to use; may differ from     actual type of property; for structured types it is content (value) type and NOT
      structured type.
 @since 2.6
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesByClassWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                 withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)baseType;

/*!
 @brief Method for finding out all reachable subtypes for a property specified
  by given element (method or field),
  such that access is by type,
  typically needed for serialization (converting from type to type name).
 @param baseType Effective property base type to use; may differ from     actual type of property; for structured types it is content (value) type and NOT
      structured type.
 @since 2.6
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesByClassWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)property
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method for finding out all reachable subtypes for given type,
  such that access is by type id,
  typically needed for deserialization (converting from type id to type).
 @param baseType Effective property base type to use; may differ from     actual type of property; for structured types it is content (value) type and NOT
      structured type.
 @since 2.6
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesByTypeIdWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                  withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)baseType;

/*!
 @brief Method for finding out all reachable subtypes for a property specified
  by given element (method or field),
  such that access is by type id,
  typically needed for deserialization (converting from type id to type).
 @param baseType Effective property base type to use; may differ from     actual type of property; for structured types it is content (value) type and NOT
      structured type.
 @since 2.6
 */
- (id<JavaUtilCollection>)collectAndResolveSubtypesByTypeIdWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                 withComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)property
                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

- (void)registerSubtypesWithIOSClassArray:(IOSObjectArray *)classes;

/*!
 @since 2.9
 */
- (void)registerSubtypesWithJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method for registering specified subtypes (possibly including type
  names); for type entries without name, non-qualified class name
  as used as name (unless overridden by annotation).
 */
- (void)registerSubtypesWithComFasterxmlJacksonDatabindJsontypeNamedTypeArray:(IOSObjectArray *)types;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsontypeSubtypeResolver_init(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsontypeSubtypeResolver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeSubtypeResolver")
