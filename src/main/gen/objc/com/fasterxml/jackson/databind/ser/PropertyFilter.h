//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/PropertyFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyFilter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyFilter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyFilter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyFilter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerPropertyFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerPropertyFilter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyFilter || defined(INCLUDE_ComFasterxmlJacksonDatabindSerPropertyFilter))
#define ComFasterxmlJacksonDatabindSerPropertyFilter_

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindNodeObjectNode;
@class ComFasterxmlJacksonDatabindSerPropertyWriter;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor;

/*!
 @brief Interface that defines API for filter objects use (as configured
  using <code>com.fasterxml.jackson.annotation.JsonFilter</code>)
  for filtering bean properties to serialize.
 <p>
  Note that this is the replacement for <code>BeanPropertyFilter</code>,
  which is replaced because it was too closely bound to Bean properties
  and would not work with <code>java.util.Map</code>s or "any getters".
 <p>
  Note that since this is an interface, it is
  strongly recommended that custom implementations extend 
 <code>com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter</code>,
  to avoid backwards compatibility issues in case interface needs to change.
 @since 2.3
 */
@protocol ComFasterxmlJacksonDatabindSerPropertyFilter < JavaObject >

/*!
 @brief Method called by <code>BeanSerializer</code> to let the filter decide what to do with
  given bean property value:
  the usual choices are to either filter out (i.e.
 do nothing) or write using given <code>PropertyWriter</code>, although filters
  can choose other to do something different altogether.
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.serializeAsField(pojo, gen, prov);
  }
 
@endcode
 @param pojo Object that contains property value to serialize
 @param gen Generator use for serializing value
 @param prov Provider that can be used for accessing dynamic aspects of serialization     processing
 @param writer Object called to do actual serialization of the field, if not filtered out
 */
- (void)serializeAsFieldWithId:(id)pojo
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
withComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)writer;

/*!
 @brief Method called by container to let the filter decide what to do with given element
  value: 
  the usual choices are to either filter out (i.e.
 do nothing) or write using given <code>PropertyWriter</code>, although filters
  can choose other to do something different altogether.
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.serializeAsElement(pojo, gen, prov);
  }
 
@endcode
 @param elementValue Element value being serializerd
 @param gen Generator use for serializing value
 @param prov Provider that can be used for accessing dynamic aspects of serialization     processing
 @param writer Object called to do actual serialization of the field, if not filtered out
 */
- (void)serializeAsElementWithId:(id)elementValue
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
withComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)writer;

/*!
 @brief Method called by <code>BeanSerializer</code> to let the filter determine whether, and in what
  form the given property exist within the parent, or root, schema.Filters can omit
  adding the property to the node, or choose the form of the schema value for the property.
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.depositSchemaProperty(propertiesNode, provider);
  }
 
@endcode
 @param writer Bean property writer to use to create schema value
 @param propertiesNode Node which the given property would exist within
 @param provider Provider that can be used for accessing dynamic aspects of serialization  	processing
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)writer
                                withComFasterxmlJacksonDatabindNodeObjectNode:(ComFasterxmlJacksonDatabindNodeObjectNode *)propertiesNode
                            withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called by <code>BeanSerializer</code> to let the filter determine whether, and in what
  form the given property exist within the parent, or root, schema.Filters can omit
  adding the property to the node, or choose the form of the schema value for the property
 <p>
  Typical implementation is something like:
 @code

  if (include(writer)) {
       writer.depositSchemaProperty(objectVisitor, provider);
  }
 
@endcode
 @param writer Bean property serializer to use to create schema value
 @param objectVisitor JsonObjectFormatVisitor which should be aware of   the property's existence
 @param provider Provider that can be used for accessing dynamic aspects of serialization  	processing
 */
- (void)depositSchemaPropertyWithComFasterxmlJacksonDatabindSerPropertyWriter:(ComFasterxmlJacksonDatabindSerPropertyWriter *)writer
     withComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonObjectFormatVisitor>)objectVisitor
                            withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerPropertyFilter)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerPropertyFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerPropertyFilter")
