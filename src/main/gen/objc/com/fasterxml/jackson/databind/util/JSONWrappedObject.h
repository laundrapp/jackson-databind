//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilJSONWrappedObject")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilJSONWrappedObject
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilJSONWrappedObject 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilJSONWrappedObject 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilJSONWrappedObject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilJSONWrappedObject_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilJSONWrappedObject || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilJSONWrappedObject))
#define ComFasterxmlJacksonDatabindUtilJSONWrappedObject_

#define RESTRICT_ComFasterxmlJacksonDatabindJsonSerializable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonSerializable 1
#include "com/fasterxml/jackson/databind/JsonSerializable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief General-purpose wrapper class that can be used to decorate serialized
  value with arbitrary literal prefix and suffix.This can be used for
  example to construct arbitrary Javascript values (similar to how basic
  function name and parenthesis are used with JSONP).
 - seealso: com.fasterxml.jackson.databind.util.JSONPObject
 */
@interface ComFasterxmlJacksonDatabindUtilJSONWrappedObject : NSObject < ComFasterxmlJacksonDatabindJsonSerializable > {
 @public
  /*!
   @brief Literal String to output before serialized value.
   Will not be quoted when serializing value.
   */
  NSString *_prefix_;
  /*!
   @brief Literal String to output after serialized value.
   Will not be quoted when serializing value.
   */
  NSString *_suffix_;
  /*!
   @brief Value to be serialized as JSONP padded; can be null.
   */
  id _value_;
  /*!
   @brief Optional static type to use for serialization; if null, runtime
  type is used.Can be used to specify declared type which defines
  serializer to use, as well as aspects of extra type information
  to include (if any).
   */
  ComFasterxmlJacksonDatabindJavaType *_serializationType_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)prefix
                              withNSString:(NSString *)suffix
                                    withId:(id)value;

/*!
 @brief Constructor that should be used when specific serialization type to use
  is important, and needs to be passed instead of just using runtime
  (type-erased) type of the value.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)prefix
                              withNSString:(NSString *)suffix
                                    withId:(id)value
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)asType;

- (NSString *)getPrefix;

- (ComFasterxmlJacksonDatabindJavaType *)getSerializationType;

- (NSString *)getSuffix;

- (id)getValue;

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)serializeWithTypeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
                withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
            withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilJSONWrappedObject)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilJSONWrappedObject, _prefix_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilJSONWrappedObject, _suffix_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilJSONWrappedObject, _value_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilJSONWrappedObject, _serializationType_, ComFasterxmlJacksonDatabindJavaType *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_(ComFasterxmlJacksonDatabindUtilJSONWrappedObject *self, NSString *prefix, NSString *suffix, id value);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilJSONWrappedObject *new_ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_(NSString *prefix, NSString *suffix, id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilJSONWrappedObject *create_ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_(NSString *prefix, NSString *suffix, id value);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindUtilJSONWrappedObject *self, NSString *prefix, NSString *suffix, id value, ComFasterxmlJacksonDatabindJavaType *asType);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilJSONWrappedObject *new_ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_withComFasterxmlJacksonDatabindJavaType_(NSString *prefix, NSString *suffix, id value, ComFasterxmlJacksonDatabindJavaType *asType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilJSONWrappedObject *create_ComFasterxmlJacksonDatabindUtilJSONWrappedObject_initWithNSString_withNSString_withId_withComFasterxmlJacksonDatabindJavaType_(NSString *prefix, NSString *suffix, id value, ComFasterxmlJacksonDatabindJavaType *asType);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilJSONWrappedObject)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilJSONWrappedObject")
