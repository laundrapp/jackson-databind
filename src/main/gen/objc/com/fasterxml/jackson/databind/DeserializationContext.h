//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationContext")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserializationContext
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserializationContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserializationContext_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationContext || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserializationContext))
#define ComFasterxmlJacksonDatabindDeserializationContext_

#define RESTRICT_ComFasterxmlJacksonDatabindDatabindContext 1
#define INCLUDE_ComFasterxmlJacksonDatabindDatabindContext 1
#include "com/fasterxml/jackson/databind/DatabindContext.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationObjectIdGenerator;
@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindDeserDeserializerCache;
@class ComFasterxmlJacksonDatabindDeserDeserializerFactory;
@class ComFasterxmlJacksonDatabindDeserImplObjectIdReader;
@class ComFasterxmlJacksonDatabindDeserImplReadableObjectId;
@class ComFasterxmlJacksonDatabindDeserValueInstantiator;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationFeature;
@class ComFasterxmlJacksonDatabindInjectableValues;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsonMappingException;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindNodeJsonNodeFactory;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class ComFasterxmlJacksonDatabindUtilArrayBuilders;
@class ComFasterxmlJacksonDatabindUtilLinkedNode;
@class ComFasterxmlJacksonDatabindUtilObjectBuffer;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangThrowable;
@class JavaTextDateFormat;
@class JavaUtilCalendar;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonAnnotationObjectIdResolver;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;

/*!
 @brief Context for the process of deserialization a single root-level value.
 Used to allow passing in configuration settings and reusable temporary
  objects (scrap arrays, containers).
 <p>
  Instance life-cycle is such that a partially configured "blueprint" object
  is registered with <code>ObjectMapper</code> (and <code>ObjectReader</code>,
  and when actual instance is needed for deserialization,
  a fully configured instance will be created using a method in extended internal
   API of sub-class
  (<code>com.fasterxml.jackson.databind.deser.DefaultDeserializationContext</code>).
  Each instance is guaranteed to only be used from single-threaded context;
  instances may be reused if (and only if) no configuration has changed.
 <p>
  Defined as abstract class so that implementations must define methods
  for reconfiguring blueprints and creating instances.
 */
@interface ComFasterxmlJacksonDatabindDeserializationContext : ComFasterxmlJacksonDatabindDatabindContext < JavaIoSerializable > {
 @public
  /*!
   @brief Object that handle details of <code>JsonDeserializer</code> caching.
   */
  ComFasterxmlJacksonDatabindDeserDeserializerCache *_cache_;
  /*!
   @brief Read-only factory instance; exposed to let
  owners (<code>ObjectMapper</code>, <code>ObjectReader</code>)
  access it.
   */
  ComFasterxmlJacksonDatabindDeserDeserializerFactory *_factory_;
  /*!
   @brief Generic deserialization processing configuration
   */
  ComFasterxmlJacksonDatabindDeserializationConfig *_config_;
  /*!
   @brief Bitmap of <code>DeserializationFeature</code>s that are enabled
   */
  jint _featureFlags_;
  /*!
   @brief Currently active view, if any.
   */
  IOSClass *_view_;
  /*!
   @brief Currently active parser used for deserialization.
   May be different from the outermost parser
  when content is buffered.
   */
  ComFasterxmlJacksonCoreJsonParser *_parser_;
  /*!
   @brief Object used for resolving references to injectable
  values.
   */
  ComFasterxmlJacksonDatabindInjectableValues *_injectableValues_;
  ComFasterxmlJacksonDatabindUtilArrayBuilders *_arrayBuilders_;
  ComFasterxmlJacksonDatabindUtilObjectBuffer *_objectBuffer_;
  JavaTextDateFormat *_dateFormat_;
  /*!
   @brief Lazily-constructed holder for per-call attributes.
   @since 2.3
   */
  ComFasterxmlJacksonDatabindCfgContextAttributes *_attributes_;
  /*!
   @brief Type of <code>JsonDeserializer</code> (or, more specifically,
    <code>ContextualDeserializer</code>) that is being
    contextualized currently.
   @since 2.5
   */
  ComFasterxmlJacksonDatabindUtilLinkedNode *_currentType_;
}

#pragma mark Public

- (jboolean)canOverrideAccessModifiers;

/*!
 @brief Method called to ensure that every object id encounter during processing
  are resolved.
 @throw UnresolvedForwardReference
 */
- (void)checkUnresolvedObjectId;

/*!
 @brief Convenience method for constructing Calendar instance set
  to specified time, to be modified and used by caller.
 */
- (JavaUtilCalendar *)constructCalendarWithJavaUtilDate:(JavaUtilDate *)d;

/*!
 @brief Convenience method, functionally equivalent to:
 @code

   getConfig().constructType(cls); 
  
@endcode
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithIOSClass:(IOSClass *)cls;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)deserializerInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                                 withId:(id)deserDef;

/*!
 @brief Helper method for constructing exception to indicate that end-of-input was
  reached while still expecting more tokens to deserialize value of specified type.
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)endOfInputExceptionWithIOSClass:(IOSClass *)instClass;

/*!
 @brief Helper method that is to be used when resolving basic class name into
  Class instance, the reason being that it may be necessary to work around
  various ClassLoader limitations, as well as to handle primitive type
  signatures.
 @since 2.6
 */
- (IOSClass *)findClassWithNSString:(NSString *)className_;

/*!
 @brief Method for finding a value deserializer, and creating a contextual
  version if necessary, for value reached via specified property.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findContextualValueDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                            withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop;

- (id)findInjectableValueWithId:(id)valueId
withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)forProperty
                         withId:(id)beanInstance;

/*!
 @brief Convenience method, functionally same as:
 @code

   getDeserializerProvider().findKeyDeserializer(getConfig(), prop.getType(), prop);
 
@endcode
 */
- (ComFasterxmlJacksonDatabindKeyDeserializer *)findKeyDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
                                                               withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop;

/*!
 @brief Variant that will try to locate deserializer for current type, but without
  performing any contextualization (unlike <code>findContextualValueDeserializer</code>)
  or checking for need to create a <code>TypeDeserializer</code> (unlike 
 <code>findRootValueDeserializer(JavaType)</code>.
 This method is usually called from within <code>ResolvableDeserializer.resolve</code>,
  and expectation is that caller then calls either 
 <code>BeanProperty, JavaType)</code> or 
 <code>BeanProperty, JavaType)</code> at a
  later point, as necessary.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findNonContextualValueDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method called to find and return entry corresponding to given
  Object Id: will add an entry if necessary, and never returns null
 */
- (ComFasterxmlJacksonDatabindDeserImplReadableObjectId *)findObjectIdWithId:(id)id_
                          withComFasterxmlJacksonAnnotationObjectIdGenerator:(ComFasterxmlJacksonAnnotationObjectIdGenerator *)generator
                           withComFasterxmlJacksonAnnotationObjectIdResolver:(id<ComFasterxmlJacksonAnnotationObjectIdResolver>)resolver;

/*!
 @brief Method for finding a deserializer for root-level value.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findRootValueDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (IOSClass *)getActiveView;

- (ComFasterxmlJacksonDatabindAnnotationIntrospector *)getAnnotationIntrospector;

/*!
 @brief Method for accessing object useful for building arrays of
  primitive types (such as int[]).
 */
- (ComFasterxmlJacksonDatabindUtilArrayBuilders *)getArrayBuilders;

- (id)getAttributeWithId:(id)key;

/*!
 @brief Convenience method for accessing the default Base64 encoding
  used for decoding base64 encoded binary content.
 Same as calling:
 @code

   getConfig().getBase64Variant();
 
@endcode
 */
- (ComFasterxmlJacksonCoreBase64Variant *)getBase64Variant;

- (ComFasterxmlJacksonDatabindDeserializationConfig *)getConfig;

/*!
 @brief Accessor to <code>JavaType</code> of currently contextualized 
 <code>ContextualDeserializer</code>, if any.
 This is sometimes useful for generic <code>JsonDeserializer</code>s that
  do not get passed (or do not retain) type information when being
  constructed: happens for example for deserializers constructed
  from annotations.
 @since 2.5
 @return Type of <code>ContextualDeserializer</code> being contextualized,
    if process is on-going; null if not.
 */
- (ComFasterxmlJacksonDatabindJavaType *)getContextualType;

- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)getDefaultPropertyFormatWithIOSClass:(IOSClass *)baseType;

/*!
 @brief Bulk access method for getting the bit mask of all <code>DeserializationFeature</code>s
  that are enabled.
 @since 2.6
 */
- (jint)getDeserializationFeatures;

/*!
 @brief Method for getting current <code>DeserializerFactory</code>.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)getFactory;

/*!
 @brief Method for accessing default Locale to use: convenience method for
 @code

    getConfig().getLocale();
 
@endcode
 */
- (JavaUtilLocale *)getLocale;

/*!
 @brief Convenience method, functionally equivalent to:
 @code

   getConfig().getNodeFactory(); 
  
@endcode
 */
- (ComFasterxmlJacksonDatabindNodeJsonNodeFactory *)getNodeFactory;

/*!
 @brief Method for accessing the currently active parser.
 May be different from the outermost parser
  when content is buffered.
 <p>
  Use of this method is discouraged: if code has direct access
  to the active parser, that should be used instead.
 */
- (ComFasterxmlJacksonCoreJsonParser *)getParser;

/*!
 @brief Method for accessing default TimeZone to use: convenience method for
 @code

    getConfig().getTimeZone();
 
@endcode
 */
- (JavaUtilTimeZone *)getTimeZone;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

/*!
 @brief Method that deserializers should call if they fail to instantiate value
  due to an exception that was thrown by constructor (or other mechanism used
  to create instances).
 Default implementation will try to call <code>DeserializationProblemHandler.handleInstantiationProblem</code>
  on configured handlers, if any, to allow for recovery; if recovery does not
  succeed, will throw exception constructed with <code>instantiationException</code>.
 @param instClass Type that was to be instantiated
 @param argument (optional) Argument that was passed to constructor or equivalent     instantiator; often a 
 <code>java.lang.String</code> .
 @param t Exception that caused failure
 @return Object that should be constructed, if any; has to be of type <code>instClass</code>
 @since 2.8
 */
- (id)handleInstantiationProblemWithIOSClass:(IOSClass *)instClass
                                      withId:(id)argument
                       withJavaLangThrowable:(JavaLangThrowable *)t;

/*!
 @brief Method that deserializers should call if they fail to instantiate value
  due to lack of viable instantiator (usually creator, that is, constructor
  or static factory method).Method should be called at point where value
  has not been decoded, so that handler has a chance to handle decoding
  using alternate mechanism, and handle underlying content (possibly by
  just skipping it) to keep input state valid
 @param instClass Type that was to be instantiated
 @param valueInst (optional) Value instantiator to be used, if any; null if type does not     use one for instantiation (custom deserialiers don't; standard POJO deserializer does)
 @param p Parser that points to the JSON value to decode
 @return Object that should be constructed, if any; has to be of type <code>instClass</code>
 @since 2.9 (2.8 had alternate that did not take <code>ValueInstantiator</code>)
 */
- (id)handleMissingInstantiatorWithIOSClass:(IOSClass *)instClass
withComFasterxmlJacksonDatabindDeserValueInstantiator:(ComFasterxmlJacksonDatabindDeserValueInstantiator *)valueInst
      withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                               withNSString:(NSString *)msg
                          withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJavaType *)handleMissingTypeIdWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                              withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idResolver
                                                                                       withNSString:(NSString *)extraDesc;

/*!
 @brief Method called for primary property deserializers (ones
  directly created to deserialize values of a POJO property),
  to handle details of resolving 
 <code>ContextualDeserializer</code> with given property context.
 @param prop Property for which the given primary deserializer is used; never null.
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)handlePrimaryContextualizationWithComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                                                                   withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method called for secondary property deserializers (ones
  NOT directly created to deal with an annotatable POJO property,
  but instead created as a component -- such as value deserializers
  for structured types, or deserializers for root values)
  to handle details of resolving 
 <code>ContextualDeserializer</code> with given property context.
 Given that these deserializers are not directly related to given property
  (or, in case of root value property, to any property), annotations
  accessible may or may not be relevant.
 @param prop Property for which deserializer is used, if any; null     when deserializing root values
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)handleSecondaryContextualizationWithComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method that deserializers should call if the first token of the value to
  deserialize is of unexpected type (that is, type of token that deserializer
  cannot handle).This could occur, for example, if a Number deserializer
  encounter <code>JsonToken.START_ARRAY</code> instead of 
 <code>JsonToken.VALUE_NUMBER_INT</code> or <code>JsonToken.VALUE_NUMBER_FLOAT</code>.
 @param instClass Type that was to be instantiated
 @param p Parser that points to the JSON value to decode
 @return Object that should be constructed, if any; has to be of type <code>instClass</code>
 @since 2.8
 */
- (id)handleUnexpectedTokenWithIOSClass:(IOSClass *)instClass
  withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method that deserializers should call if the first token of the value to
  deserialize is of unexpected type (that is, type of token that deserializer
  cannot handle).This could occur, for example, if a Number deserializer
  encounter <code>JsonToken.START_ARRAY</code> instead of 
 <code>JsonToken.VALUE_NUMBER_INT</code> or <code>JsonToken.VALUE_NUMBER_FLOAT</code>.
 @param instClass Type that was to be instantiated
 @param t Token encountered that does match expected
 @param p Parser that points to the JSON value to decode
 @return Object that should be constructed, if any; has to be of type <code>instClass</code>
 @since 2.8
 */
- (id)handleUnexpectedTokenWithIOSClass:(IOSClass *)instClass
   withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t
  withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                           withNSString:(NSString *)msg
                      withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Method that deserializers should call if they encounter an unrecognized
  property (and once that is not explicitly designed as ignorable), to
  inform possibly configured <code>DeserializationProblemHandler</code>s and
  let it handle the problem.
 @return True if there was a configured problem handler that was able to handle the
    problem
 */
- (jboolean)handleUnknownPropertyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                       withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                                                withId:(id)instanceOrClass
                                                          withNSString:(NSString *)propName;

/*!
 @brief Method that deserializers should call if they encounter a type id
  (for polymorphic deserialization) that cannot be resolved to an
  actual type; usually since there is no mapping defined.
 Default implementation will try to call <code>DeserializationProblemHandler.handleUnknownTypeId</code>
  on configured handlers, if any, to allow for recovery; if recovery does not
  succeed, will throw exception constructed with <code>invalidTypeIdException</code>.
 @param baseType Base type from which resolution starts
 @param id_ Type id that could not be converted
 @param extraDesc Additional problem description to add to default exception message,     if resolution fails.
 @return <code>JavaType</code> that id resolves to
 @throw IOExceptionTo indicate unrecoverable problem, if resolution cannot
     be made to work
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindJavaType *)handleUnknownTypeIdWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                       withNSString:(NSString *)id_
                                              withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idResolver
                                                                                       withNSString:(NSString *)extraDesc;

/*!
 @brief Method that deserializers should call if they encounter a String value
  that cannot be converted to expected key of a <code>java.util.Map</code>
  valued property.
 Default implementation will try to call <code>DeserializationProblemHandler.handleWeirdNumberValue</code>
  on configured handlers, if any, to allow for recovery; if recovery does not
  succeed, will throw <code>InvalidFormatException</code> with given message.
 @param keyClass Expected type for key
 @param keyValue String value from which to deserialize key
 @param msg Error message template caller wants to use if exception is to be thrown
 @param msgArgs Optional arguments to use for message, if any
 @return Key value to use
 @throw IOExceptionTo indicate unrecoverable problem, usually based on <code>msg</code>
 @since 2.8
 */
- (id)handleWeirdKeyWithIOSClass:(IOSClass *)keyClass
                    withNSString:(NSString *)keyValue
                    withNSString:(NSString *)msg
               withNSObjectArray:(IOSObjectArray *)msgArgs;

- (id)handleWeirdNativeValueWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType
                                                             withId:(id)badValue
                              withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

/*!
 @brief Method that deserializers should call if they encounter a numeric value
  that cannot be converted to target property type, in cases where some
  numeric values could be acceptable (either with different settings,
  or different numeric value).
 Default implementation will try to call <code>DeserializationProblemHandler.handleWeirdNumberValue</code>
  on configured handlers, if any, to allow for recovery; if recovery does not
  succeed, will throw <code>InvalidFormatException</code> with given message.
 @param targetClass Type of property into which incoming number should be converted
 @param value Number value from which to deserialize property value
 @param msg Error message template caller wants to use if exception is to be thrown
 @param msgArgs Optional arguments to use for message, if any
 @return Property value to use
 @throw IOExceptionTo indicate unrecoverable problem, usually based on <code>msg</code>
 @since 2.8
 */
- (id)handleWeirdNumberValueWithIOSClass:(IOSClass *)targetClass
                            withNSNumber:(NSNumber *)value
                            withNSString:(NSString *)msg
                       withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Method that deserializers should call if they encounter a String value
  that cannot be converted to target property type, in cases where some
  String values could be acceptable (either with different settings,
  or different value).
 Default implementation will try to call <code>DeserializationProblemHandler.handleWeirdStringValue</code>
  on configured handlers, if any, to allow for recovery; if recovery does not
  succeed, will throw <code>InvalidFormatException</code> with given message.
 @param targetClass Type of property into which incoming number should be converted
 @param value String value from which to deserialize property value
 @param msg Error message template caller wants to use if exception is to be thrown
 @param msgArgs Optional arguments to use for message, if any
 @return Property value to use
 @throw IOExceptionTo indicate unrecoverable problem, usually based on <code>msg</code>
 @since 2.8
 */
- (id)handleWeirdStringValueWithIOSClass:(IOSClass *)targetClass
                            withNSString:(NSString *)value
                            withNSString:(NSString *)msg
                       withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Bulk access method for checking that all features specified by
  mask are enabled.
 @since 2.3
 */
- (jboolean)hasDeserializationFeaturesWithInt:(jint)featureMask;

/*!
 @brief Bulk access method for checking that at least one of features specified by
  mask is enabled.
 @since 2.6
 */
- (jboolean)hasSomeOfFeaturesWithInt:(jint)featureMask;

/*!
 @brief Method for checking whether we could find a deserializer
  for given type.
 @param type
 @since 2.3
 */
- (jboolean)hasValueDeserializerForWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                               withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)cause;

/*!
 @brief Helper method for constructing instantiation exception for specified type,
  to indicate that instantiation failed due to missing instantiator
  (creator; constructor or factory method).
 <p>
  Note that most of the time this method should NOT be called; instead, 
 <code>handleMissingInstantiator</code> should be called which will call this method
  if necessary.
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)instantiationExceptionWithIOSClass:(IOSClass *)instClass
                                                                           withNSString:(NSString *)msg0;

/*!
 @brief Helper method for constructing instantiation exception for specified type,
  to indicate problem with physically constructing instance of
  specified class (missing constructor, exception from constructor)
 <p>
  Note that most of the time this method should NOT be called; instead, 
 <code>handleInstantiationProblem</code> should be called which will call this method
  if necessary.
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)instantiationExceptionWithIOSClass:(IOSClass *)instClass
                                                                  withJavaLangThrowable:(JavaLangThrowable *)cause;

- (ComFasterxmlJacksonDatabindJsonMappingException *)invalidTypeIdExceptionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withNSString:(NSString *)typeId
                                                                                                      withNSString:(NSString *)extraDesc;

/*!
 @brief Convenience method for checking whether specified on/off
  feature is enabled
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)feat;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)feature;

- (ComFasterxmlJacksonDatabindKeyDeserializer *)keyDeserializerInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                                   withId:(id)deserDef;

/*!
 @brief Method that can be used to get access to a reusable ObjectBuffer,
  useful for efficiently constructing Object arrays and Lists.
 Note that leased buffers should be returned once deserializer
  is done, to allow for reuse during same round of deserialization.
 */
- (ComFasterxmlJacksonDatabindUtilObjectBuffer *)leaseObjectBuffer;

/*!
 @brief Helper method for constructing generic mapping exception for specified type
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)mappingExceptionWithIOSClass:(IOSClass *)targetClass;

/*!
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)mappingExceptionWithIOSClass:(IOSClass *)targetClass
                                             withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)token;

/*!
 @brief Helper method for constructing generic mapping exception with specified
  message and current location information.
 Note that application code should almost always call
  one of <code>handleXxx</code> methods, or <code>Object...)</code>
  instead.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)mappingExceptionWithNSString:(NSString *)message;

/*!
 @brief Helper method for constructing generic mapping exception with specified
  message and current location information
  Note that application code should almost always call
  one of <code>handleXxx</code> methods, or <code>Object...)
 </code>
  instead.
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)mappingExceptionWithNSString:(NSString *)msg
                                                                withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)missingTypeIdExceptionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withNSString:(NSString *)extraDesc;

/*!
 @brief Convenience method for parsing a Date from given String, using
  currently configured date format (accessed using 
 <code>DeserializationConfig.getDateFormat()</code>).
 <p>
  Implementation will handle thread-safety issues related to
  date formats such that first time this method is called,
  date format is cloned, and cloned instance will be retained
  for use during this deserialization round.
 */
- (JavaUtilDate *)parseDateWithNSString:(NSString *)dateStr;

/*!
 @brief Convenience method that may be used by composite or container deserializers,
  for reading one-off values for the composite type, taking into account
  annotations that the property (passed to this method -- usually property that
  has custom serializer that called this method) has.
 @since 2.4
 */
- (id)readPropertyValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                 withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                withIOSClass:(IOSClass *)type;

/*!
 @since 2.4
 */
- (id)readPropertyValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                 withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Convenience method that may be used by composite or container deserializers,
  for reading one-off values contained (for sequences, it is more efficient
  to actually fetch deserializer once for the whole collection).
 <p>
  NOTE: when deserializing values of properties contained in composite types,
  rather use <code>BeanProperty, Class)</code>;
  this method does not allow use of contextual annotations.
 @since 2.4
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                        withIOSClass:(IOSClass *)type;

/*!
 @since 2.4
 */
- (id)readValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (id)reportBadDefinitionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                    withNSString:(NSString *)msg;

/*!
 @brief Method that deserializer may call if it is called to do an update ("merge")
  but deserializer operates on a non-mergeable type.Although this should
  usually be caught earlier, sometimes it may only be caught during operation
  and if so this is the method to call.
 Note that if <code>MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE</code> is enabled,
  this method will simply return null; otherwise <code>InvalidDefinitionException</code>
  will be thrown.
 @since 2.9
 */
- (id)reportBadMergeWithComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

/*!
 @brief Helper method called to indicate problem in POJO (serialization) definitions or settings
  regarding specific property (of a type), unrelated to actual JSON content to map.
 Default behavior is to construct and throw a <code>JsonMappingException</code>.
 @since 2.9
 */
- (id)reportBadPropertyDefinitionWithComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)bean
                withComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition:(ComFasterxmlJacksonDatabindIntrospectBeanPropertyDefinition *)prop
                                                                   withNSString:(NSString *)msg
                                                              withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Helper method called to indicate problem in POJO (serialization) definitions or settings
  regarding specific Java type, unrelated to actual JSON content to map.
 Default behavior is to construct and throw a <code>JsonMappingException</code>.
 @since 2.9
 */
- (id)reportBadTypeDefinitionWithComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)bean
                                                               withNSString:(NSString *)msg
                                                          withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Helper method used to indicate a problem with input in cases where more
  specific <code>reportXxx()</code> method was not available.
 @since 2.9
 */
- (id)reportInputMismatchWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop
                                                        withNSString:(NSString *)msg
                                                   withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Helper method used to indicate a problem with input in cases where more
  specific <code>reportXxx()</code> method was not available.
 @since 2.9
 */
- (id)reportInputMismatchWithIOSClass:(IOSClass *)targetType
                         withNSString:(NSString *)msg
                    withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Helper method used to indicate a problem with input in cases where more
  specific <code>reportXxx()</code> method was not available.
 @since 2.9
 */
- (id)reportInputMismatchWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType
                                                    withNSString:(NSString *)msg
                                               withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Helper method used to indicate a problem with input in cases where more
  specific <code>reportXxx()</code> method was not available.
 @since 2.9
 */
- (id)reportInputMismatchWithComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)src
                                                            withNSString:(NSString *)msg
                                                       withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Fallback method that may be called if no other <code>reportXxx</code>
  is applicable -- but only in that case.
 @since 2.8
 */
- (void)reportMappingExceptionWithNSString:(NSString *)msg
                         withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @since 2.8
 */
- (void)reportMissingContentWithNSString:(NSString *)msg
                       withNSObjectArray:(IOSObjectArray *)msgArgs;

- (id)reportTrailingTokensWithIOSClass:(IOSClass *)targetType
 withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
  withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)trailingToken;

/*!
 @brief Helper method for reporting a problem with unhandled unknown property.
 @param instanceOrClass Either value being populated (if one has been    instantiated), or Class that indicates type that would be (or
     have been) instantiated
 @param deser Deserializer that had the problem, if called by deserializer    (or on behalf of one)
 */
- (void)reportUnknownPropertyWithId:(id)instanceOrClass
                       withNSString:(NSString *)fieldName
withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

/*!
 @since 2.8
 */
- (id)reportUnresolvedObjectIdWithComFasterxmlJacksonDatabindDeserImplObjectIdReader:(ComFasterxmlJacksonDatabindDeserImplObjectIdReader *)oidReader
                                                                              withId:(id)bean;

/*!
 @brief Method for deserializers to call 
  when the token encountered was of type different than what <b>should</b>
  be seen at that position, usually within a sequence of expected tokens.
 Note that this method will throw a <code>JsonMappingException</code> and no
  recovery is attempted (via <code>DeserializationProblemHandler</code>, as
  problem is considered to be difficult to recover from, in general.
 @since 2.9
 */
- (void)reportWrongTokenExceptionWithIOSClass:(IOSClass *)targetType
         withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                 withNSString:(NSString *)msg
                            withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Method for deserializers to call 
  when the token encountered was of type different than what <b>should</b>
  be seen at that position, usually within a sequence of expected tokens.
 Note that this method will throw a <code>JsonMappingException</code> and no
  recovery is attempted (via <code>DeserializationProblemHandler</code>, as
  problem is considered to be difficult to recover from, in general.
 @since 2.9
 */
- (void)reportWrongTokenExceptionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType
                                    withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                            withNSString:(NSString *)msg
                                                       withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Method for deserializers to call 
  when the token encountered was of type different than what <b>should</b>
  be seen at that position, usually within a sequence of expected tokens.
 Note that this method will throw a <code>JsonMappingException</code> and no
  recovery is attempted (via <code>DeserializationProblemHandler</code>, as
  problem is considered to be difficult to recover from, in general.
 @since 2.9
 */
- (void)reportWrongTokenExceptionWithComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                            withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                                    withNSString:(NSString *)msg
                                                               withNSObjectArray:(IOSObjectArray *)msgArgs;

- (void)reportWrongTokenExceptionWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                  withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                          withNSString:(NSString *)msg
                                                     withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @brief Method to call to return object buffer previously leased with 
 <code>leaseObjectBuffer</code>.
 @param buf Returned object buffer
 */
- (void)returnObjectBufferWithComFasterxmlJacksonDatabindUtilObjectBuffer:(ComFasterxmlJacksonDatabindUtilObjectBuffer *)buf;

- (ComFasterxmlJacksonDatabindDeserializationContext *)setAttributeWithId:(id)key
                                                                   withId:(id)value;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)unknownTypeExceptionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                                    withNSString:(NSString *)id_
                                                                                                    withNSString:(NSString *)extraDesc;

/*!
 @brief Helper method for constructing exception to indicate that given JSON
  Object field name was not in format to be able to deserialize specified
  key type.
 Note that most of the time this method should NOT be called; instead, 
 <code>handleWeirdKey</code> should be called which will call this method
  if necessary.
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)weirdKeyExceptionWithIOSClass:(IOSClass *)keyClass
                                                                      withNSString:(NSString *)keyValue
                                                                      withNSString:(NSString *)msg;

/*!
 @brief Helper method for constructing exception to indicate that input JSON
  token of type "native value" (see <code>JsonToken.VALUE_EMBEDDED_OBJECT</code>)
  is of incompatible type (and there is no delegating creator or such to use)
  and can not be used to construct value of specified type (usually POJO).
 Note that most of the time this method should NOT be called; instead, 
 <code>handleWeirdNativeValue</code> should be called which will call this method
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)weirdNativeValueExceptionWithId:(id)value
                                                                        withIOSClass:(IOSClass *)instClass;

/*!
 @brief Helper method for constructing exception to indicate that input JSON
  Number was not suitable for deserializing into given target type.
 Note that most of the time this method should NOT be called; instead, 
 <code>handleWeirdNumberValue</code> should be called which will call this method
  if necessary.
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)weirdNumberExceptionWithNSNumber:(NSNumber *)value
                                                                         withIOSClass:(IOSClass *)instClass
                                                                         withNSString:(NSString *)msg;

/*!
 @brief Helper method for constructing exception to indicate that input JSON
  String was not suitable for deserializing into given target type.
 Note that most of the time this method should NOT be called; instead, 
 <code>handleWeirdStringValue</code> should be called which will call this method
  if necessary.
 @param value String value from input being deserialized
 @param instClass Type that String should be deserialized into
 @param msg Message that describes specific problem
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)weirdStringExceptionWithNSString:(NSString *)value
                                                                         withIOSClass:(IOSClass *)instClass
                                                                         withNSString:(NSString *)msg;

- (ComFasterxmlJacksonDatabindJsonMappingException *)wrongTokenExceptionWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                                                 withIOSClass:(IOSClass *)targetType
                                                                         withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                                                                 withNSString:(NSString *)extra;

/*!
 @brief Helper method for constructing <code>JsonMappingException</code> to indicate
  that the token encountered was of type different than what <b>should</b>
  be seen at that position, usually within a sequence of expected tokens.
 Note that most of the time this method should NOT be directly called;
  instead, <code>reportWrongTokenException</code> should be called and will
  call this method as necessary.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)wrongTokenExceptionWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)targetType
                                                                         withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                                                                 withNSString:(NSString *)extra;

- (ComFasterxmlJacksonDatabindJsonMappingException *)wrongTokenExceptionWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                                                         withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)expToken
                                                                                                 withNSString:(NSString *)msg;

#pragma mark Protected

/*!
 @brief Copy-constructor for use with <code>copy()</code> by <code>ObjectMapper.copy()</code>
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)src;

/*!
 @brief Constructor used for creating actual per-call instances.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)src
                               withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                              withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                    withComFasterxmlJacksonDatabindInjectableValues:(ComFasterxmlJacksonDatabindInjectableValues *)injectableValues;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)src
                            withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)df;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)df
                                withComFasterxmlJacksonDatabindDeserDeserializerCache:(ComFasterxmlJacksonDatabindDeserDeserializerCache *)cache;

/*!
 @since 2.9.2
 */
- (jboolean)_isCompatibleWithIOSClass:(IOSClass *)target
                               withId:(id)value;

- (JavaTextDateFormat *)getDateFormat;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserializationContext)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _cache_, ComFasterxmlJacksonDatabindDeserDeserializerCache *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _factory_, ComFasterxmlJacksonDatabindDeserDeserializerFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _config_, ComFasterxmlJacksonDatabindDeserializationConfig *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _view_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _parser_, ComFasterxmlJacksonCoreJsonParser *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _injectableValues_, ComFasterxmlJacksonDatabindInjectableValues *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _arrayBuilders_, ComFasterxmlJacksonDatabindUtilArrayBuilders *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _objectBuffer_, ComFasterxmlJacksonDatabindUtilObjectBuffer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _dateFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _attributes_, ComFasterxmlJacksonDatabindCfgContextAttributes *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserializationContext, _currentType_, ComFasterxmlJacksonDatabindUtilLinkedNode *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserializationContext_initWithComFasterxmlJacksonDatabindDeserDeserializerFactory_(ComFasterxmlJacksonDatabindDeserializationContext *self, ComFasterxmlJacksonDatabindDeserDeserializerFactory *df);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserializationContext_initWithComFasterxmlJacksonDatabindDeserDeserializerFactory_withComFasterxmlJacksonDatabindDeserDeserializerCache_(ComFasterxmlJacksonDatabindDeserializationContext *self, ComFasterxmlJacksonDatabindDeserDeserializerFactory *df, ComFasterxmlJacksonDatabindDeserDeserializerCache *cache);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserializationContext_initWithComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindDeserDeserializerFactory_(ComFasterxmlJacksonDatabindDeserializationContext *self, ComFasterxmlJacksonDatabindDeserializationContext *src, ComFasterxmlJacksonDatabindDeserDeserializerFactory *factory);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserializationContext_initWithComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindDeserializationConfig_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindInjectableValues_(ComFasterxmlJacksonDatabindDeserializationContext *self, ComFasterxmlJacksonDatabindDeserializationContext *src, ComFasterxmlJacksonDatabindDeserializationConfig *config, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindInjectableValues *injectableValues);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserializationContext_initWithComFasterxmlJacksonDatabindDeserializationContext_(ComFasterxmlJacksonDatabindDeserializationContext *self, ComFasterxmlJacksonDatabindDeserializationContext *src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserializationContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserializationContext")
