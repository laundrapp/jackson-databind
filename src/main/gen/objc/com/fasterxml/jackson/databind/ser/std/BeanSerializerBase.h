//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase))
#define ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContextualSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerResolvableSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerResolvableSerializer 1
#include "com/fasterxml/jackson/databind/ser/ResolvableSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#include "com/fasterxml/jackson/databind/jsonschema/SchemaAware.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Shape;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreTypeWritableTypeId;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindSerAnyGetterWriter;
@class ComFasterxmlJacksonDatabindSerBeanPropertyWriter;
@class ComFasterxmlJacksonDatabindSerBeanSerializerBuilder;
@class ComFasterxmlJacksonDatabindSerImplObjectIdWriter;
@class ComFasterxmlJacksonDatabindSerImplWritableObjectId;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@class IOSObjectArray;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

/*!
 @brief Base class both for the standard bean serializer, and couple
  of variants that only differ in small details.
 Can be used for custom bean serializers as well, although that
  is not the primary design goal.
 */
@interface ComFasterxmlJacksonDatabindSerStdBeanSerializerBase : ComFasterxmlJacksonDatabindSerStdStdSerializer < ComFasterxmlJacksonDatabindSerContextualSerializer, ComFasterxmlJacksonDatabindSerResolvableSerializer, ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable, ComFasterxmlJacksonDatabindJsonschemaSchemaAware > {
 @public
  /*!
   @since 2.9
   */
  ComFasterxmlJacksonDatabindJavaType *_beanType_;
  /*!
   @brief Writers used for outputting actual property values
   */
  IOSObjectArray *_props_;
  /*!
   @brief Optional filters used to suppress output of properties that
  are only to be included in certain views
   */
  IOSObjectArray *_filteredProps_;
  /*!
   @brief Handler for <code>com.fasterxml.jackson.annotation.JsonAnyGetter</code>
  annotated properties
   */
  ComFasterxmlJacksonDatabindSerAnyGetterWriter *_anyGetterWriter_;
  /*!
   @brief Id of the bean property filter to use, if any; null if none.
   */
  id _propertyFilterId_;
  /*!
   @brief If using custom type ids (usually via getter, or field), this is the
  reference to that member.
   */
  ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *_typeId_;
  /*!
   @brief If this POJO can be alternatively serialized using just an object id
  to denote a reference to previously serialized object,
  this Object will handle details.
   */
  ComFasterxmlJacksonDatabindSerImplObjectIdWriter *_objectIdWriter_;
  /*!
   @brief Requested shape from bean class annotations.
   */
  ComFasterxmlJacksonAnnotationJsonFormat_Shape *_serializationShape_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)properties
                            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)filteredProperties;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createContextualWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (id<JavaUtilIterator>)properties;

/*!
 @brief We need to implement <code>ResolvableSerializer</code> to be able to
  properly handle cyclic type references.
 */
- (void)resolveWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)serializeWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)serializeWithTypeWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

- (jboolean)usesObjectId;

/*!
 @brief Mutant factory used for creating a new instance with different
  filter id (used with <code>JsonFilter</code> annotation)
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withFilterIdWithId:(id)filterId;

/*!
 @brief Mutant factory used for creating a new instance with different 
 <code>ObjectIdWriter</code>.
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withObjectIdWriterWithComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter;

#pragma mark Protected

/*!
 @brief Copy-constructor that is useful for sub-classes that just want to
  copy all super-class properties without modifications.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src;

/*!
 @brief Copy-constructor that will also rename properties with given prefix
  (if it's non-empty)
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                   withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                 withComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter;

/*!
 @since 2.3
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                 withComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter
                                                                               withId:(id)filterId;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                                                      withJavaUtilSet:(id<JavaUtilSet>)toIgnore;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                                                    withNSStringArray:(IOSObjectArray *)toIgnore;

/*!
 @brief Constructor used by <code>BeanSerializerBuilder</code> to create an
  instance
 @param type Nominal type of values handled by this serializer
 @param builder Builder for accessing other collected information
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
              withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder
            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)properties
            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)filteredProperties;

- (NSString *)_customTypeIdWithId:(id)bean;

- (void)_serializeObjectIdWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer
withComFasterxmlJacksonDatabindSerImplWritableObjectId:(ComFasterxmlJacksonDatabindSerImplWritableObjectId *)objectId;

- (void)_serializeWithObjectIdWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                         withBoolean:(jboolean)startEndObject;

- (void)_serializeWithObjectIdWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonCoreTypeWritableTypeId *)_typeIdDefWithComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer
                                                                                                        withId:(id)bean
                                                                          withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape;

/*!
 @brief Mutant factory for creating a variant that output POJO as a
  JSON Array.Implementations may ignore this request if output
  as array is not possible (either at all, or reliably).
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)asArraySerializer;

/*!
 @brief Helper method that can be used to see if specified property is annotated
  to indicate use of a converter for property value (in case of container types,
  it is container type itself, not key or content type).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findConvertingSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                    withComFasterxmlJacksonDatabindSerBeanPropertyWriter:(ComFasterxmlJacksonDatabindSerBeanPropertyWriter *)prop;

- (void)serializeFieldsWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Alternative serialization method that gets called when there is a 
 <code>PropertyFilter</code> that needs to be called to determine
  which properties are to be serialized (and possibly how)
 */
- (void)serializeFieldsFilteredWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Mutant factory used for creating a new instance with additional
  set of properties to ignore (from properties this instance otherwise has)
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withIgnoralsWithJavaUtilSet:(id<JavaUtilSet>)toIgnore;

/*!
 @brief Mutant factory used for creating a new instance with additional
  set of properties to ignore (from properties this instance otherwise has)
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withIgnoralsWithNSStringArray:(IOSObjectArray *)toIgnore;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _beanType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _props_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _filteredProps_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _anyGetterWriter_, ComFasterxmlJacksonDatabindSerAnyGetterWriter *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _propertyFilterId_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _typeId_, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _objectIdWriter_, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, _serializationShape_, ComFasterxmlJacksonAnnotationJsonFormat_Shape *)

inline ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_get_NAME_FOR_OBJECT_REF(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_NAME_FOR_OBJECT_REF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, NAME_FOR_OBJECT_REF, ComFasterxmlJacksonDatabindPropertyName *)

inline IOSObjectArray *ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_get_NO_PROPS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_NO_PROPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase, NO_PROPS, IOSObjectArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindSerBeanSerializerBuilder_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *builder, IOSObjectArray *properties, IOSObjectArray *filteredProperties);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, IOSObjectArray *properties, IOSObjectArray *filteredProperties);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_withId_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter, id filterId);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withNSStringArray_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, IOSObjectArray *toIgnore);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, id<JavaUtilSet> toIgnore);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdBeanSerializerBase_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindUtilNameTransformer *unwrapper);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase")
