//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializers
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializers
#ifdef INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializers_Base
#define INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializers 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserDeserializers_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializers))
#define ComFasterxmlJacksonDatabindDeserDeserializers_

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@class IOSClass;

/*!
 @brief Interface that defines API for simple extensions that can provide additional deserializers
  for various types.Access is by a single callback method; instance is to either return
  a configured <code>JsonDeserializer</code> for specified type, or null to indicate that it
  does not support handling of the type.
 In latter case, further calls can be made
  for other providers; in former case returned deserializer is used for handling of
  instances of specified type.
 <p>
  It is <b>strongly recommended</b> that implementations always extend <code>Deserializers.Base</code>
  and NOT just implement <code>Deserializers</code>.
 */
@protocol ComFasterxmlJacksonDatabindDeserDeserializers < JavaObject >

/*!
 @brief Method called to locate deserializer for specified <code>java.lang.Enum</code> type.
 @param type Type of <code>java.lang.Enum</code>  instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findEnumDeserializerWithIOSClass:(IOSClass *)type
                             withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to locate deserializer for specified JSON tree node type.
 @param nodeType Specific type of JSON tree nodes to deserialize   (subtype of 
 <code>com.fasterxml.jackson.databind.JsonNode</code> )
 @param config Configuration in effect
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findTreeNodeDeserializerWithIOSClass:(IOSClass *)nodeType
                                 withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                       withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to locate deserializer for specified value type which does not belong to any other
  category (not an Enum, Collection, Map, Array, reference value or tree node)
 @param type Bean type to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findBeanDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to locate deserializer for value that is of referential
  type,
 @param refType Specific referential type to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the reference type that contains class annotations and     other information typically needed for building deserializers
 @param contentTypeDeserializer Possible type deserializer for referenced value
 @param contentDeserializer Value deserializer to use for referenced value, if indicated     by property annotation
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findReferenceDeserializerWithComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)refType
                                                                      withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                   withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)contentTypeDeserializer
                                                                           withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)contentDeserializer;

/*!
 @brief Method called to locate serializer for specified array type.
 <p>
  Deserializer for element type may be passed, if configured explicitly at higher level (by
  annotations, typically), but usually are not.
  Type deserializer for element is passed if one is needed based on contextual information
  (annotations on declared element class; or on field or method type is associated with).
 @param type Type of array instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @param elementTypeDeserializer If element type needs polymorphic type handling, this is     the type information deserializer to use; should usually be used as is when constructing
      array deserializer.
 @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using     annotations, for exmple). May be null, in which case it should be resolved here (or using
      <code>ResolvableDeserializer</code>
   callback)
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findArrayDeserializerWithComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)type
                                                              withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                           withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                   withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

/*!
 @brief Method called to locate serializer for specified <code>java.util.Collection</code> (List, Set etc) type.
 <p>
  Deserializer for element type may be passed, if configured explicitly at higher level (by
  annotations, typically), but usually are not.
  Type deserializer for element is passed if one is needed based on contextual information
  (annotations on declared element class; or on field or method type is associated with).
 @param type Type of collection instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @param elementTypeDeserializer If element type needs polymorphic type handling, this is     the type information deserializer to use; should usually be used as is when constructing
      array deserializer.
 @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using     annotations, for exmple). May be null, in which case it should be resolved here (or using
      <code>ResolvableDeserializer</code>
   callback)
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findCollectionDeserializerWithComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)type
                                                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                     withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                             withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

/*!
 @brief Method called to locate serializer for specified
  "Collection-like" type (one that acts
  like <code>java.util.Collection</code> but does not implement it).
 <p>
  Deserializer for element type may be passed, if configured explicitly at higher level (by
  annotations, typically), but usually are not.
  Type deserializer for element is passed if one is needed based on contextual information
  (annotations on declared element class; or on field or method type is associated with).
 @param type Type of instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @param elementTypeDeserializer If element type needs polymorphic type handling, this is     the type information deserializer to use; should usually be used as is when constructing
      array deserializer.
 @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using     annotations, for exmple). May be null, in which case it should be resolved here (or using
      <code>ResolvableDeserializer</code>
   callback)
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findCollectionLikeDeserializerWithComFasterxmlJacksonDatabindTypeCollectionLikeType:(ComFasterxmlJacksonDatabindTypeCollectionLikeType *)type
                                                                                withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                             withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                                     withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

/*!
 @brief Method called to locate deserializer for specified <code>java.util.Map</code> type.
 <p>
  Deserializer for element type may be passed, if configured explicitly at higher level (by
  annotations, typically), but usually are not.
  Type deserializer for element is passed if one is needed based on contextual information
  (annotations on declared element class; or on field or method type is associated with).
 <p>
  Similarly, a <code>KeyDeserializer</code> may be passed, but this is only done if there is
  a specific configuration override (annotations) to indicate instance to use.
  Otherwise null is passed, and key deserializer needs to be obtained later during
  resolution (using <code>ResolvableDeserializer.resolve</code>).
 @param type Type of <code>java.util.Map</code>  instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;     null if default key deserializer for key type can be used.
 @param elementTypeDeserializer If element type needs polymorphic type handling, this is     the type information deserializer to use; should usually be used as is when constructing
      array deserializer.
 @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using     annotations, for exmple). May be null, in which case it should be resolved here (or using
      <code>ResolvableDeserializer</code>
   callback)
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findMapDeserializerWithComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)type
                                                          withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)keyDeserializer
                                                       withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                               withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

/*!
 @brief Method called to locate serializer for specified
  "Map-like" type (one that acts
  like <code>java.util.Map</code> but does not implement it).
 <p>
  Deserializer for element type may be passed, if configured explicitly at higher level (by
  annotations, typically), but usually are not.
  Type deserializer for element is passed if one is needed based on contextual information
  (annotations on declared element class; or on field or method type is associated with).
 <p>
  Similarly, a <code>KeyDeserializer</code> may be passed, but this is only done if there is
  a specific configuration override (annotations) to indicate instance to use.
  Otherwise null is passed, and key deserializer needs to be obtained later during
  resolution (using <code>ResolvableDeserializer.resolve</code>).
 @param type Type of <code>java.util.Map</code>  instances to deserialize
 @param config Configuration in effect
 @param beanDesc Definition of the enumeration type that contains class annotations and     other information typically needed for building deserializers
 @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;     null if default key deserializer for key type can be used.
 @param elementTypeDeserializer If element type needs polymorphic type handling, this is     the type information deserializer to use; should usually be used as is when constructing
      array deserializer.
 @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using     annotations, for exmple). May be null, in which case it should be resolved here (or using
      <code>ResolvableDeserializer</code>
   callback)
 @return Deserializer to use for the type; or null if this provider does not know how to construct it
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findMapLikeDeserializerWithComFasterxmlJacksonDatabindTypeMapLikeType:(ComFasterxmlJacksonDatabindTypeMapLikeType *)type
                                                                  withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                        withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                        withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)keyDeserializer
                                                               withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                       withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserDeserializers)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserDeserializers)

#endif

#if !defined (ComFasterxmlJacksonDatabindDeserDeserializers_Base_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializers_Base))
#define ComFasterxmlJacksonDatabindDeserDeserializers_Base_

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@class IOSClass;

/*!
 @brief Basic <code>Deserializers</code> implementation that implements all methods but provides
  no deserializers.Its main purpose is to serve as a base class so that
  sub-classes only need to override methods they need, as most of the time some
  of methods are not needed (especially enumeration and array deserializers are
  very rarely overridden).
 */
@interface ComFasterxmlJacksonDatabindDeserDeserializers_Base : NSObject < ComFasterxmlJacksonDatabindDeserDeserializers >

#pragma mark Public

- (instancetype __nonnull)init;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findArrayDeserializerWithComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)type
                                                              withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                           withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                   withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findBeanDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findCollectionDeserializerWithComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)type
                                                                        withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                     withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                             withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findCollectionLikeDeserializerWithComFasterxmlJacksonDatabindTypeCollectionLikeType:(ComFasterxmlJacksonDatabindTypeCollectionLikeType *)type
                                                                                withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                             withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                                     withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findEnumDeserializerWithIOSClass:(IOSClass *)type
                             withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findMapDeserializerWithComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)type
                                                          withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)keyDeserializer
                                                       withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                               withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findMapLikeDeserializerWithComFasterxmlJacksonDatabindTypeMapLikeType:(ComFasterxmlJacksonDatabindTypeMapLikeType *)type
                                                                  withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                        withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                        withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)keyDeserializer
                                                               withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)elementTypeDeserializer
                                                                       withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)elementDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findReferenceDeserializerWithComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)refType
                                                                      withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                   withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)contentTypeDeserializer
                                                                           withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)contentDeserializer;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)findTreeNodeDeserializerWithIOSClass:(IOSClass *)nodeType
                                 withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                       withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserDeserializers_Base)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserDeserializers_Base_init(ComFasterxmlJacksonDatabindDeserDeserializers_Base *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserDeserializers_Base *new_ComFasterxmlJacksonDatabindDeserDeserializers_Base_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserDeserializers_Base *create_ComFasterxmlJacksonDatabindDeserDeserializers_Base_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserDeserializers_Base)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializers")
