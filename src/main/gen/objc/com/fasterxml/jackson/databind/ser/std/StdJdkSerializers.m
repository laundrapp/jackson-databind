//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/JsonNode.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonBooleanFormatVisitor.h"
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.h"
#include "com/fasterxml/jackson/databind/node/ObjectNode.h"
#include "com/fasterxml/jackson/databind/ser/std/ClassSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/DateSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/FileSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/NullSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.h"
#include "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.h"
#include "java/io/File.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Type.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/sql/Date.h"
#include "java/sql/Time.h"
#include "java/sql/Timestamp.h"
#include "java/util/Collection.h"
#include "java/util/Currency.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/regex/Pattern.h"

@implementation ComFasterxmlJacksonDatabindSerStdStdJdkSerializers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilCollection>)all {
  return ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_all();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(all);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Collection<Ljava/util/Map$Entry<Ljava/lang/Class<*>;Ljava/lang/Object;>;>;", "LComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer;LComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer;LComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdStdJdkSerializers = { "StdJdkSerializers", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, 1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers;
}

@end

void ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_init(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers *new_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers, init)
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers *create_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers, init)
}

id<JavaUtilCollection> ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_all() {
  ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_initialize();
  JavaUtilHashMap *sers = create_JavaUtilHashMap_init();
  [sers putWithId:JavaNetURL_class_() withId:create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(JavaNetURL_class_())];
  [sers putWithId:JavaNetURI_class_() withId:create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(JavaNetURI_class_())];
  [sers putWithId:JavaUtilCurrency_class_() withId:create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(JavaUtilCurrency_class_())];
  [sers putWithId:JavaUtilUUID_class_() withId:create_ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init()];
  [sers putWithId:JavaUtilRegexPattern_class_() withId:create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(JavaUtilRegexPattern_class_())];
  [sers putWithId:JavaUtilLocale_class_() withId:create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(JavaUtilLocale_class_())];
  [sers putWithId:JavaUtilConcurrentAtomicAtomicBoolean_class_() withId:ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer_class_()];
  [sers putWithId:JavaUtilConcurrentAtomicAtomicInteger_class_() withId:ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer_class_()];
  [sers putWithId:JavaUtilConcurrentAtomicAtomicLong_class_() withId:ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer_class_()];
  [sers putWithId:JavaIoFile_class_() withId:ComFasterxmlJacksonDatabindSerStdFileSerializer_class_()];
  [sers putWithId:IOSClass_class_() withId:ComFasterxmlJacksonDatabindSerStdClassSerializer_class_()];
  [sers putWithId:JavaLangVoid_class_() withId:JreLoadStatic(ComFasterxmlJacksonDatabindSerStdNullSerializer, instance)];
  [sers putWithId:JreLoadStatic(JavaLangVoid, TYPE) withId:JreLoadStatic(ComFasterxmlJacksonDatabindSerStdNullSerializer, instance)];
  @try {
    [sers putWithId:JavaSqlTimestamp_class_() withId:JreLoadStatic(ComFasterxmlJacksonDatabindSerStdDateSerializer, instance)];
    [sers putWithId:JavaSqlDate_class_() withId:ComFasterxmlJacksonDatabindSerStdSqlDateSerializer_class_()];
    [sers putWithId:JavaSqlTime_class_() withId:ComFasterxmlJacksonDatabindSerStdSqlTimeSerializer_class_()];
  }
  @catch (JavaLangNoClassDefFoundError *e) {
  }
  return [sers entrySet];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers)

@implementation ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)serializeWithId:(JavaUtilConcurrentAtomicAtomicBoolean *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeBooleanWithBoolean:[((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(value)) get]];
}

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint {
  return [self createSchemaNodeWithNSString:@"boolean" withBoolean:true];
}

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint {
  [((id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>) nil_chk(visitor)) expectBooleanFormatWithComFasterxmlJacksonDatabindJavaType:typeHint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[2].selector = @selector(getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:withJavaLangReflectType:);
  methods[3].selector = @selector(acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:withComFasterxmlJacksonDatabindJavaType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "serialize", "LJavaUtilConcurrentAtomicAtomicBoolean;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonGenerationException;", "getSchema", "LComFasterxmlJacksonDatabindSerializerProvider;LJavaLangReflectType;", "acceptJsonFormatVisitor", "LComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;LComFasterxmlJacksonDatabindJavaType;", "LComFasterxmlJacksonDatabindJsonMappingException;", "LComFasterxmlJacksonDatabindSerStdStdJdkSerializers;", "Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/util/concurrent/atomic/AtomicBoolean;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer = { "AtomicBooleanSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, NULL, 7, 0x9, 4, 0, 8, -1, -1, 9, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer;
}

@end

void ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer_init(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_withBoolean_(self, JavaUtilConcurrentAtomicAtomicBoolean_class_(), false);
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer *new_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer *create_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicBooleanSerializer)

@implementation ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)serializeWithId:(JavaUtilConcurrentAtomicAtomicInteger *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeNumberWithInt:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value)) get]];
}

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint {
  return [self createSchemaNodeWithNSString:@"integer" withBoolean:true];
}

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint {
  [self visitIntFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:visitor withComFasterxmlJacksonDatabindJavaType:typeHint withComFasterxmlJacksonCoreJsonParser_NumberType:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, INT)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[2].selector = @selector(getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:withJavaLangReflectType:);
  methods[3].selector = @selector(acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:withComFasterxmlJacksonDatabindJavaType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "serialize", "LJavaUtilConcurrentAtomicAtomicInteger;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonGenerationException;", "getSchema", "LComFasterxmlJacksonDatabindSerializerProvider;LJavaLangReflectType;", "acceptJsonFormatVisitor", "LComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;LComFasterxmlJacksonDatabindJavaType;", "LComFasterxmlJacksonDatabindJsonMappingException;", "LComFasterxmlJacksonDatabindSerStdStdJdkSerializers;", "Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/util/concurrent/atomic/AtomicInteger;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer = { "AtomicIntegerSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, NULL, 7, 0x9, 4, 0, 8, -1, -1, 9, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer;
}

@end

void ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer_init(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_withBoolean_(self, JavaUtilConcurrentAtomicAtomicInteger_class_(), false);
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer *new_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer *create_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicIntegerSerializer)

@implementation ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)serializeWithId:(JavaUtilConcurrentAtomicAtomicLong *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeNumberWithLong:[((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(value)) get]];
}

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint {
  return [self createSchemaNodeWithNSString:@"integer" withBoolean:true];
}

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint {
  [self visitIntFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:visitor withComFasterxmlJacksonDatabindJavaType:typeHint withComFasterxmlJacksonCoreJsonParser_NumberType:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, LONG)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonNode;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[2].selector = @selector(getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:withJavaLangReflectType:);
  methods[3].selector = @selector(acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:withComFasterxmlJacksonDatabindJavaType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "serialize", "LJavaUtilConcurrentAtomicAtomicLong;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonGenerationException;", "getSchema", "LComFasterxmlJacksonDatabindSerializerProvider;LJavaLangReflectType;", "acceptJsonFormatVisitor", "LComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;LComFasterxmlJacksonDatabindJavaType;", "LComFasterxmlJacksonDatabindJsonMappingException;", "LComFasterxmlJacksonDatabindSerStdStdJdkSerializers;", "Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/util/concurrent/atomic/AtomicLong;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer = { "AtomicLongSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, NULL, 7, 0x9, 4, 0, 8, -1, -1, 9, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer;
}

@end

void ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer_init(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_withBoolean_(self, JavaUtilConcurrentAtomicAtomicLong_class_(), false);
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer *new_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer *create_ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdStdJdkSerializers_AtomicLongSerializer)
