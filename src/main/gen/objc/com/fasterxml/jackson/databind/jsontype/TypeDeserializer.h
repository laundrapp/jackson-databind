//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer || defined(INCLUDE_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer))
#define ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;

/*!
 @brief Interface for deserializing type information from JSON content, to
  type-safely deserialize data into correct polymorphic instance
  (when type inclusion has been enabled for type handled).
 <p>
  Separate deserialization methods are needed because serialized
  form for inclusion mechanism <code>As.PROPERTY</code>
  is slighty different if value is not expressed as JSON Object:
  and as such both type deserializer and serializer need to
  JSON Object form (array, object or other (== scalar)) being used.
 */
@interface ComFasterxmlJacksonDatabindJsontypeTypeDeserializer : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (id)deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                   withIOSClass:(IOSClass *)base;

/*!
 @brief Helper method used to check if given parser might be pointing to
  a "natural" value, and one that would be acceptable as the
  result value (compatible with declared base type)
 */
+ (id)deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                        withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method called to let this type deserializer handle 
  deserialization of "typed" object, when value itself
  may have been serialized using any kind of JSON value
  (Array, Object, scalar).Should only be called if JSON
  serialization is polymorphic (not Java type); for example when
  using JSON node representation, or "untyped" Java object
  (which may be Map, Collection, wrapper/primitive etc).
 */
- (id)deserializeTypedFromAnyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to let this type deserializer handle 
  deserialization of "typed" object, when value itself
  is serialized as JSON Array (regardless of Java type).
 Method needs to figure out intended
  polymorphic type, locate <code>JsonDeserializer</code> to use, and
  call it with JSON data to deserializer (which does not contain
  type information).
 */
- (id)deserializeTypedFromArrayWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
               withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to let this type deserializer handle 
  deserialization of "typed" object, when value itself
  is serialized as JSON Object (regardless of Java type).
 Method needs to figure out intended
  polymorphic type, locate <code>JsonDeserializer</code> to use, and
  call it with JSON data to deserializer (which does not contain
  type information).
 */
- (id)deserializeTypedFromObjectWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to let this type deserializer handle 
  deserialization of "typed" object, when value itself
  is serialized as a scalar JSON value (something other
  than Array or Object), regardless of Java type.
 Method needs to figure out intended
  polymorphic type, locate <code>JsonDeserializer</code> to use, and
  call it with JSON data to deserializer (which does not contain
  type information).
 */
- (id)deserializeTypedFromScalarWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to create contextual version, to be used for
  values of given property.This may be the type itself
  (as is the case for bean properties), or values contained
  (for <code>java.util.Collection</code> or <code>java.util.Map</code>
  valued properties).
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)forPropertyWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop;

/*!
 @brief Accessor for "default implementation" type; optionally defined
  class to use in cases where type id is not
  accessible for some reason (either missing, or cannot be
  resolved)
 */
- (IOSClass *)getDefaultImpl;

/*!
 @brief Name of property that contains type information, if
  property-based inclusion is used.
 */
- (NSString *)getPropertyName;

/*!
 @brief Accessor for object that handles conversions between
  types and matching type ids.
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)getTypeIdResolver;

/*!
 @brief Accessor for type information inclusion method
  that deserializer uses; indicates how type information
  is (expected to be) embedded in JSON input.
 */
- (ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)getTypeInclusion;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_init(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *self);

FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, ComFasterxmlJacksonDatabindJavaType *baseType);

FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindJsontypeTypeDeserializer_deserializeIfNaturalWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withIOSClass_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, IOSClass *base);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindJsontypeTypeDeserializer")
