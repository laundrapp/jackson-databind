//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/ByteBufferBackedOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/util/ByteBufferBackedOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/nio/ByteBuffer.h"

@implementation ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream

- (instancetype __nonnull)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream_initWithJavaNioByteBuffer_(self, buf);
  return self;
}

- (void)writeWithInt:(jint)b {
  [((JavaNioByteBuffer *) nil_chk(_b_)) putWithByte:(jbyte) b];
}

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)off
                   withInt:(jint)len {
  [((JavaNioByteBuffer *) nil_chk(_b_)) putWithByteArray:bytes withInt:off withInt:len];
}

- (void)dealloc {
  RELEASE_(_b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:);
  methods[1].selector = @selector(writeWithInt:);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_b_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;", "write", "I", "LJavaIoIOException;", "[BII" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream = { "ByteBufferBackedOutputStream", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream;
}

@end

void ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream_initWithJavaNioByteBuffer_(ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream *self, JavaNioByteBuffer *buf) {
  JavaIoOutputStream_init(self);
  JreStrongAssign(&self->_b_, buf);
}

ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream *new_ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buf) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream, initWithJavaNioByteBuffer_, buf)
}

ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream *create_ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buf) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream, initWithJavaNioByteBuffer_, buf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilByteBufferBackedOutputStream)
