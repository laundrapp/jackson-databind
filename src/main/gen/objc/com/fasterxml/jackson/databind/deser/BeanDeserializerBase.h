//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase))
#define ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_

#define RESTRICT_ComFasterxmlJacksonDatabindDeserStdStdDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserStdStdDeserializer 1
#include "com/fasterxml/jackson/databind/deser/std/StdDeserializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindDeserContextualDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserContextualDeserializer 1
#include "com/fasterxml/jackson/databind/deser/ContextualDeserializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindDeserResolvableDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserResolvableDeserializer 1
#include "com/fasterxml/jackson/databind/deser/ResolvableDeserializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindDeserValueInstantiator 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable 1
#include "com/fasterxml/jackson/databind/deser/ValueInstantiator.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Shape;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder;
@class ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap;
@class ComFasterxmlJacksonDatabindDeserImplExternalTypeHandler;
@class ComFasterxmlJacksonDatabindDeserImplObjectIdReader;
@class ComFasterxmlJacksonDatabindDeserImplPropertyBasedCreator;
@class ComFasterxmlJacksonDatabindDeserImplUnwrappedPropertyHandler;
@class ComFasterxmlJacksonDatabindDeserSettableAnyProperty;
@class ComFasterxmlJacksonDatabindDeserSettableBeanProperty;
@class ComFasterxmlJacksonDatabindDeserValueInstantiator;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindPropertyMetadata;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindUtilAccessPattern;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@class ComFasterxmlJacksonDatabindUtilTokenBuffer;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangThrowable;
@class JavaUtilHashMap;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Base class for <code>BeanDeserializer</code>.
 */
@interface ComFasterxmlJacksonDatabindDeserBeanDeserializerBase : ComFasterxmlJacksonDatabindDeserStdStdDeserializer < ComFasterxmlJacksonDatabindDeserContextualDeserializer, ComFasterxmlJacksonDatabindDeserResolvableDeserializer, ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable, JavaIoSerializable > {
 @public
  /*!
   @brief Declared type of the bean this deserializer handles.
   */
  ComFasterxmlJacksonDatabindJavaType *_beanType_;
  /*!
   @brief Requested shape from bean class annotations.
   */
  ComFasterxmlJacksonAnnotationJsonFormat_Shape *_serializationShape_;
  /*!
   @brief Object that handles details of constructing initial 
  bean value (to which bind data to), unless instance
  is passed (via updateValue())
   */
  ComFasterxmlJacksonDatabindDeserValueInstantiator *_valueInstantiator_;
  /*!
   @brief Deserializer that is used iff delegate-based creator is
  to be used for deserializing from JSON Object.
   */
  ComFasterxmlJacksonDatabindJsonDeserializer *_delegateDeserializer_;
  /*!
   @brief Deserializer that is used iff array-delegate-based creator
  is to be used for deserializing from JSON Object.
   */
  ComFasterxmlJacksonDatabindJsonDeserializer *_arrayDelegateDeserializer_;
  /*!
   @brief If the bean needs to be instantiated using constructor
  or factory method
  that takes one or more named properties as argument(s),
  this creator is used for instantiation.
   This value gets resolved during general resolution.
   */
  ComFasterxmlJacksonDatabindDeserImplPropertyBasedCreator *_propertyBasedCreator_;
  /*!
   @brief Flag that is set to mark "non-standard" cases; where either
  we use one of non-default creators, or there are unwrapped
  values to consider.
   */
  jboolean _nonStandardCreation_;
  /*!
   @brief Flag that indicates that no "special features" whatsoever
  are enabled, so the simplest processing is possible.
   */
  jboolean _vanillaProcessing_;
  /*!
   @brief Mapping of property names to properties, built when all properties
  to use have been successfully resolved.
   */
  ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *_beanProperties_;
  /*!
   @brief List of <code>ValueInjector</code>s, if any injectable values are
  expected by the bean; otherwise null.
   This includes injectors used for injecting values via setters
  and fields, but not ones passed through constructor parameters.
   */
  IOSObjectArray *_injectables_;
  /*!
   @brief Fallback setter used for handling any properties that are not
  mapped to regular setters.If setter is not null, it will be
  called once for each such property.
   */
  ComFasterxmlJacksonDatabindDeserSettableAnyProperty *_anySetter_;
  /*!
   @brief In addition to properties that are set, we will also keep
  track of recognized but ignorable properties: these will
  be skipped without errors or warnings.
   */
  id<JavaUtilSet> _ignorableProps_;
  /*!
   @brief Flag that can be set to ignore and skip unknown properties.
   If set, will not throw an exception for unknown properties.
   */
  jboolean _ignoreAllUnknown_;
  /*!
   @brief Flag that indicates that some aspect of deserialization depends
  on active view used (if any)
   */
  jboolean _needViewProcesing_;
  /*!
   @brief We may also have one or more back reference fields (usually
  zero or one).
   */
  id<JavaUtilMap> _backRefs_;
  /*!
   @brief Lazily constructed map used to contain deserializers needed
  for polymorphic subtypes.
   Note that this is <b>only needed</b> for polymorphic types,
  that is, when the actual type is not statically known.
  For other types this remains null.
   */
  JavaUtilHashMap *_subDeserializers_;
  /*!
   @brief If one of properties has "unwrapped" value, we need separate
  helper object
   */
  ComFasterxmlJacksonDatabindDeserImplUnwrappedPropertyHandler *_unwrappedPropertyHandler_;
  /*!
   @brief Handler that we need iff any of properties uses external
  type id.
   */
  ComFasterxmlJacksonDatabindDeserImplExternalTypeHandler *_externalTypeIdHandler_;
  /*!
   @brief If an Object Id is to be used for value handled by this
  deserializer, this reader is used for handling.
   */
  ComFasterxmlJacksonDatabindDeserImplObjectIdReader *_objectIdReader_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src
                                withComFasterxmlJacksonDatabindDeserImplObjectIdReader:(ComFasterxmlJacksonDatabindDeserImplObjectIdReader *)oir;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src
                                                                       withJavaUtilSet:(id<JavaUtilSet>)ignorableProps;

/*!
 @brief Although most of post-processing is done in resolve(), we only get
  access to referring property's annotations here; and this is needed
  to support per-property ObjectIds.
 We will also consider Shape transformations (read from Array) at this
  point, since it may come from either Class definition or property.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createContextualWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                           withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

/*!
 @brief Accessor for finding properties that represents values to pass
  through property-based creator method (constructor or
  factory method)
 @since 2.0
 */
- (id<JavaUtilIterator>)creatorProperties;

- (id)deserializeFromArrayWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to deserialize POJO value from a JSON boolean value (true, false)
 */
- (id)deserializeFromBooleanWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
            withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method called to deserialize POJO value from a JSON floating-point
  number.
 */
- (id)deserializeFromDoubleWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)deserializeFromEmbeddedWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)deserializeFromNumberWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief General version used when handling needs more advanced
  features.
 */
- (id)deserializeFromObjectWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)deserializeFromStringWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)deserializeWithTypeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
         withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
       withComFasterxmlJacksonDatabindJsontypeTypeDeserializer:(ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)typeDeserializer;

/*!
 @brief Method needed by <code>BeanDeserializerFactory</code> to properly link
  managed- and back-reference pairs.
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)findBackReferenceWithNSString:(NSString *)logicalName;

/*!
 @brief Alternate find method that tries to locate a property with given 
 <code>property index</code>.
 Note that access by index is not necessarily faster than by name,
  since properties are not directly indexable; however, for most
  instances difference is not significant as number of properties
  is low.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)findPropertyWithInt:(jint)propertyIndex;

- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)findPropertyWithComFasterxmlJacksonDatabindPropertyName:(ComFasterxmlJacksonDatabindPropertyName *)propertyName;

/*!
 @brief Accessor for finding the property with given name, if POJO
  has one.Name used is the external name, i.e. name used
  in external data representation (JSON).
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)findPropertyWithNSString:(NSString *)propertyName;

/*!
 */
- (IOSClass *)getBeanClass;

- (ComFasterxmlJacksonDatabindUtilAccessPattern *)getEmptyAccessPattern;

- (id)getEmptyValueWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id<JavaUtilCollection>)getKnownPropertyNames;

- (ComFasterxmlJacksonDatabindUtilAccessPattern *)getNullAccessPattern;

/*!
 @brief Overridden to return true for those instances that are
  handling value for which Object Identity handling is enabled
  (either via value type or referring property).
 */
- (ComFasterxmlJacksonDatabindDeserImplObjectIdReader *)getObjectIdReader;

/*!
 @brief Accessor for checking number of deserialized properties.
 */
- (jint)getPropertyCount;

- (ComFasterxmlJacksonDatabindDeserValueInstantiator *)getValueInstantiator;

- (ComFasterxmlJacksonDatabindJavaType *)getValueType;

- (IOSClass *)handledType;

- (jboolean)hasPropertyWithNSString:(NSString *)propertyName;

- (jboolean)hasViews;

- (jboolean)isCachable;

/*!
 @brief Accessor for iterating over properties this deserializer uses; with
  the exception that properties passed via Creator methods
  (specifically, "property-based constructor") are not included,
  but can be accessed separate by calling 
 <code>creatorProperties</code>
 */
- (id<JavaUtilIterator>)properties;

/*!
 @brief Method that can be used to replace an existing property with
  a modified one.
 <p>
  NOTE: only ever use this method if you know what you are doing;
  incorrect usage can break deserializer.
 @param original Property to replace
 @param replacement Property to replace it with
 @since 2.1
 */
- (void)replacePropertyWithComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)original
                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)replacement;

/*!
 @brief Method called to finalize setup of this deserializer,
  after deserializer itself has been registered.
 This is needed to handle recursive and transitive dependencies.
 */
- (void)resolveWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (JavaLangBoolean *)supportsUpdateWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)unwrappingDeserializerWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

/*!
 @brief Mutant factory method that custom sub-classes must override; not left as
  abstract to prevent more drastic backwards compatibility problems.
 @since 2.8
 */
- (ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)withBeanPropertiesWithComFasterxmlJacksonDatabindDeserImplBeanPropertyMap:(ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *)props;

- (ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)withIgnorablePropertiesWithJavaUtilSet:(id<JavaUtilSet>)ignorableProps;

- (ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)withObjectIdReaderWithComFasterxmlJacksonDatabindDeserImplObjectIdReader:(ComFasterxmlJacksonDatabindDeserImplObjectIdReader *)oir;

/*!
 @brief Method that will modify caught exception (passed in as argument)
  as necessary to include reference information, and to ensure it
  is a subtype of <code>IOException</code>, or an unchecked exception.
 <p>
  Rules for wrapping and unwrapping are bit complicated; essentially:
 <ul>
  <li>Errors are to be passed as is (if uncovered via unwrapping) 
 <li>"Plain" IOExceptions (ones that are not of type
    <code>JsonMappingException</code> are to be passed as is
 </ul>
 */
- (void)wrapAndThrowWithJavaLangThrowable:(JavaLangThrowable *)t
                                   withId:(id)bean
                             withNSString:(NSString *)fieldName
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src;

/*!
 @since 2.8
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src
                               withComFasterxmlJacksonDatabindDeserImplBeanPropertyMap:(ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *)beanProps;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src
                                                                           withBoolean:(jboolean)ignoreAllUnknown;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)src
                                    withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

/*!
 @brief Constructor used when initially building a deserializer
  instance, given a <code>BeanDeserializerBuilder</code> that
  contains configuration.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder *)builder
                                           withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                  withComFasterxmlJacksonDatabindDeserImplBeanPropertyMap:(ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *)properties
                                                                          withJavaUtilMap:(id<JavaUtilMap>)backRefs
                                                                          withJavaUtilSet:(id<JavaUtilSet>)ignorableProps
                                                                              withBoolean:(jboolean)ignoreAllUnknown
                                                                              withBoolean:(jboolean)hasViews;

/*!
 @brief Helper method we need to do necessary conversion from whatever native object id
  type is, into declared type that Jackson internals expect.This may be
  simple cast (for String ids), or something more complicated; in latter
  case we may need to create bogus content buffer to allow use of
  id deserializer.
 @since 2.3
 */
- (id)_convertObjectIdWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
      withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                     withId:(id)rawId
            withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)idDeser;

- (id)_deserializeUsingPropertyBasedWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                    withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Helper method called to see if given property might be so-called unwrapped
  property: these require special handling.
 */
- (ComFasterxmlJacksonDatabindUtilNameTransformer *)_findPropertyUnwrapperWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop;

/*!
 @brief Helper method called to (try to) locate deserializer for given sub-type of
  type that this deserializer handles.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_findSubclassDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                                                         withId:(id)bean
                                                                                 withComFasterxmlJacksonDatabindUtilTokenBuffer:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)unknownTokens;

/*!
 @brief Offlined method called to handle "native" Object Id that has been read
  and known to be associated with given deserialized POJO.
 @since 2.3
 */
- (id)_handleTypedObjectIdWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                         withId:(id)pojo
                                                         withId:(id)rawId;

/*!
 @since 2.8.8
 */
- (void)_replacePropertyWithComFasterxmlJacksonDatabindDeserImplBeanPropertyMap:(ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *)props
                  withComFasterxmlJacksonDatabindDeserSettableBeanPropertyArray:(IOSObjectArray *)creatorProps
                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)origProp
                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)newProp;

/*!
 @brief Method that wraps given property with <code>ObjectIdReferenceProperty</code>
  in case where object id resolution is required.
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)_resolvedObjectIdPropertyWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop;

/*!
 @brief Helper method that will handle gruesome details of dealing with properties
  that have non-static inner class as value...
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)_resolveInnerClassValuedPropertyWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop;

/*!
 @brief Helper method called to see if given property is part of 'managed' property
  pair (managed + back reference), and if so, handle resolution details.
 */
- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)_resolveManagedReferencePropertyWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                       withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop;

- (ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)_resolveMergeAndNullSettingsWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                   withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop
                                                                                            withComFasterxmlJacksonDatabindPropertyMetadata:(ComFasterxmlJacksonDatabindPropertyMetadata *)propMetadata;

/*!
 @brief Fluent factory for creating a variant that can handle
  POJO output as a JSON Array.Implementations may ignore this request
  if no such input is possible.
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *)asArrayDeserializer;

/*!
 @brief Method called in cases where it looks like we got an Object Id
  to parse and use as a reference.
 */
- (id)deserializeFromObjectIdWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (id)deserializeFromObjectUsingNonDefaultWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                          withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Alternative deserialization method used when we expect to see Object Id;
  if so, we will need to ensure that the Id is seen before anything
  else, to ensure that it is available for solving references,
  even if JSON itself is not ordered that way.This may require
  buffering in some cases, but usually just a simple lookup to ensure
  that ordering is correct.
 */
- (id)deserializeWithObjectIdWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Helper method that can be used to see if specified property is annotated
  to indicate use of a converter for property value (in case of container types,
  it is container type itself, not key or content type).
 <p>
  NOTE: returned deserializer is NOT yet contextualized, caller needs to take
  care to do that.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findConvertingDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                        withComFasterxmlJacksonDatabindDeserSettableBeanProperty:(ComFasterxmlJacksonDatabindDeserSettableBeanProperty *)prop;

/*!
 @brief Method called when an explicitly ignored property (one specified with a
  name to match, either by property annotation or class annotation) is encountered.
 @since 2.3
 */
- (void)handleIgnoredPropertyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                            withId:(id)beanOrClass
                                                      withNSString:(NSString *)propName;

/*!
 @brief Method called in cases where we may have polymorphic deserialization
  case: that is, type of Creator-constructed bean is not the type
  of deserializer itself.It should be a sub-class or implementation
  class; either way, we may have more specific deserializer to use
  for handling it.
 @param p (optional) If not null, parser that has more properties to handle    (in addition to buffered properties); if null, all properties are passed
     in buffer
 */
- (id)handlePolymorphicWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
       withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                      withId:(id)bean
              withComFasterxmlJacksonDatabindUtilTokenBuffer:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)unknownTokens;

/*!
 @brief Method called to handle set of one or more unknown properties,
  stored in their entirety in given <code>TokenBuffer</code>
  (as field entries, name and value).
 */
- (id)handleUnknownPropertiesWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                            withId:(id)bean
                                    withComFasterxmlJacksonDatabindUtilTokenBuffer:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)unknownTokens;

/*!
 @brief Method called when a JSON property is encountered that has not matching
  setter, any-setter or field, and thus cannot be assigned.
 */
- (void)handleUnknownPropertyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
             withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                            withId:(id)beanOrClass
                                                      withNSString:(NSString *)propName;

/*!
 @brief Helper method called for an unknown property, when using "vanilla"
  processing.
 */
- (void)handleUnknownVanillaWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
            withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                           withId:(id)bean
                                                     withNSString:(NSString *)propName;

- (void)injectValuesWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                   withId:(id)bean;

- (id)wrapInstantiationProblemWithJavaLangThrowable:(JavaLangThrowable *)t
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _beanType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _serializationShape_, ComFasterxmlJacksonAnnotationJsonFormat_Shape *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _valueInstantiator_, ComFasterxmlJacksonDatabindDeserValueInstantiator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _delegateDeserializer_, ComFasterxmlJacksonDatabindJsonDeserializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _arrayDelegateDeserializer_, ComFasterxmlJacksonDatabindJsonDeserializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _propertyBasedCreator_, ComFasterxmlJacksonDatabindDeserImplPropertyBasedCreator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _beanProperties_, ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _injectables_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _anySetter_, ComFasterxmlJacksonDatabindDeserSettableAnyProperty *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _ignorableProps_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _backRefs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _subDeserializers_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _unwrappedPropertyHandler_, ComFasterxmlJacksonDatabindDeserImplUnwrappedPropertyHandler *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _externalTypeIdHandler_, ComFasterxmlJacksonDatabindDeserImplExternalTypeHandler *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, _objectIdReader_, ComFasterxmlJacksonDatabindDeserImplObjectIdReader *)

inline ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_get_TEMP_PROPERTY_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_TEMP_PROPERTY_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase, TEMP_PROPERTY_NAME, ComFasterxmlJacksonDatabindPropertyName *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder_withComFasterxmlJacksonDatabindBeanDescription_withComFasterxmlJacksonDatabindDeserImplBeanPropertyMap_withJavaUtilMap_withJavaUtilSet_withBoolean_withBoolean_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder *builder, ComFasterxmlJacksonDatabindBeanDescription *beanDesc, ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *properties, id<JavaUtilMap> backRefs, id<JavaUtilSet> ignorableProps, jboolean ignoreAllUnknown, jboolean hasViews);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_withBoolean_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src, jboolean ignoreAllUnknown);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src, ComFasterxmlJacksonDatabindUtilNameTransformer *unwrapper);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_withComFasterxmlJacksonDatabindDeserImplObjectIdReader_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src, ComFasterxmlJacksonDatabindDeserImplObjectIdReader *oir);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_withJavaUtilSet_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src, id<JavaUtilSet> ignorableProps);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerBase_initWithComFasterxmlJacksonDatabindDeserBeanDeserializerBase_withComFasterxmlJacksonDatabindDeserImplBeanPropertyMap_(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *self, ComFasterxmlJacksonDatabindDeserBeanDeserializerBase *src, ComFasterxmlJacksonDatabindDeserImplBeanPropertyMap *beanProps);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserBeanDeserializerBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerBase")
