//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBasicSerializerFactory")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBasicSerializerFactory
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBasicSerializerFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBasicSerializerFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBasicSerializerFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBasicSerializerFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBasicSerializerFactory || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBasicSerializerFactory))
#define ComFasterxmlJacksonDatabindSerBasicSerializerFactory_

#define RESTRICT_ComFasterxmlJacksonDatabindSerSerializerFactory 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerSerializerFactory 1
#include "com/fasterxml/jackson/databind/ser/SerializerFactory.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerBeanSerializerModifier;
@class ComFasterxmlJacksonDatabindSerContainerSerializer;
@class ComFasterxmlJacksonDatabindSerStdMapSerializer;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@class IOSClass;
@class JavaUtilHashMap;
@protocol ComFasterxmlJacksonDatabindSerSerializers;
@protocol ComFasterxmlJacksonDatabindUtilConverter;
@protocol JavaLangIterable;

/*!
 @brief Factory class that can provide serializers for standard JDK classes,
  as well as custom classes that extend standard classes or implement
  one of "well-known" interfaces (such as <code>java.util.Collection</code>).
 <p>
  Since all the serializers are eagerly instantiated, and there is
  no additional introspection or customizability of these types,
  this factory is essentially stateless.
 */
@interface ComFasterxmlJacksonDatabindSerBasicSerializerFactory : ComFasterxmlJacksonDatabindSerSerializerFactory < JavaIoSerializable > {
 @public
  /*!
   @brief Configuration settings for this factory; immutable instance (just like this
  factory), new version created via copy-constructor (fluent-style)
   */
  ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *_factoryConfig_;
}

#pragma mark Public

- (ComFasterxmlJacksonDatabindSerContainerSerializer *)buildCollectionSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)elemType
                                                                                                            withBoolean:(jboolean)staticTyping
                                                                  withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                                                          withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)buildEnumSetSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)enumType;

- (ComFasterxmlJacksonDatabindSerContainerSerializer *)buildIndexedListSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)elemType
                                                                                                             withBoolean:(jboolean)staticTyping
                                                                   withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                                                           withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
                                                                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)defaultImpl;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method called to construct a type serializer for values with given declared
  base type.This is called for values other than those of bean property
  types.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)createTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findReferenceSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                       withComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)refType
                                                                         withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                            withBoolean:(jboolean)staticTyping;

/*!
 @brief Method for getting current <code>SerializerFactoryConfig</code>.
 <p>
  Note that since instances are immutable, you can NOT change settings
  by accessing an instance and calling methods: this will simply create
  new instance of config object.
 */
- (ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)getFactoryConfig;

/*!
 @brief Convenience method for creating a new factory instance with an additional
  key serializer provider.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withAdditionalKeySerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)additional;

/*!
 @brief Convenience method for creating a new factory instance with an additional
  serializer provider.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withAdditionalSerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)additional;

/*!
 @brief Method used for creating a new instance of this factory, but with different
  configuration.Reason for specifying factory method (instead of plain constructor)
  is to allow proper sub-classing of factories.
 <p>
  Note that custom sub-classes generally <b>must override</b> implementation
  of this method, as it usually requires instantiating a new instance of
  factory type. Check out javadocs for 
 <code>com.fasterxml.jackson.databind.ser.BeanSerializerFactory</code> for more details.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withConfigWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig:(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)config;

/*!
 @brief Convenience method for creating a new factory instance with additional bean
  serializer modifier.
 */
- (ComFasterxmlJacksonDatabindSerSerializerFactory *)withSerializerModifierWithComFasterxmlJacksonDatabindSerBeanSerializerModifier:(ComFasterxmlJacksonDatabindSerBeanSerializerModifier *)modifier;

#pragma mark Protected

/*!
 @brief We will provide default constructor to allow sub-classing,
  but make it protected so that no non-singleton instances of
  the class will be instantiated.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig:(ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)config;

/*!
 @brief Helper method that does figures out content inclusion value to use, if any,
  and construct re-configured <code>MapSerializer</code> appropriately.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)_checkMapContentInclusionWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                            withComFasterxmlJacksonDatabindSerStdMapSerializer:(ComFasterxmlJacksonDatabindSerStdMapSerializer *)mapSer;

/*!
 @brief Helper method called to try to find whether there is an annotation in the
  class that indicates content ("value") serializer to use.
 If so, will try to instantiate value serializer and return it; otherwise returns null.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)_findContentSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                    withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Helper method used for finding inclusion definitions for structured
  container types like <code>Map</code>s and referential types
  (like <code>AtomicReference</code>).
 @param contentType Declared full content type of container
 @param configType Raw base type under which `configOverride`, if any, needs to be defined
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)_findInclusionWithContentWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)contentType
                                                                                                                  withIOSClass:(IOSClass *)configType;

/*!
 @brief Helper method called to try to find whether there is an annotation in the
  class that indicates key serializer to use.
 If so, will try to instantiate key serializer and return it; otherwise returns null.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)_findKeySerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Helper method that handles configuration details when constructing serializers for 
 <code>Object[]</code> (and subtypes, except for String).
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildArraySerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                        withComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)type
                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                         withBoolean:(jboolean)staticTyping
                                                               withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)elementTypeSerializer
                                                                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)elementValueSerializer;

- (ComFasterxmlJacksonDatabindJsonSerializer *)buildAtomicReferenceSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                              withComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)refType
                                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                                   withBoolean:(jboolean)staticTyping
                                                                         withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)contentTypeSerializer
                                                                                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)contentSerializer;

/*!
 @brief Helper method that handles configuration details when constructing serializers for 
 <code>java.util.List</code> types that support efficient by-index access
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildCollectionSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                        withComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)type
                                                                           withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                              withBoolean:(jboolean)staticTyping
                                                                    withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)elementTypeSerializer
                                                                            withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)elementValueSerializer;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildContainerSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                             withBoolean:(jboolean)staticTyping;

- (ComFasterxmlJacksonDatabindJsonSerializer *)buildEnumSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildIterableSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                             withBoolean:(jboolean)staticTyping
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @since 2.5
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildIteratorSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                             withBoolean:(jboolean)staticTyping
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildMapEntrySerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                         withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                            withBoolean:(jboolean)staticTyping
                                                                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
                                                                                withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType;

/*!
 @brief Helper method that handles configuration details when constructing serializers for 
 <code>java.util.Map</code> types.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)buildMapSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                        withComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)type
                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                       withBoolean:(jboolean)staticTyping
                                                                     withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
                                                             withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)elementTypeSerializer
                                                                     withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)elementValueSerializer;

- (id<JavaLangIterable>)customSerializers;

- (id<ComFasterxmlJacksonDatabindUtilConverter>)findConverterWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                            withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Helper method that will check whether given annotated entity (usually class,
  but may also be a property accessor) indicates that a <code>Converter</code> is to
  be used; and if so, to construct and return suitable serializer for it.
 If not, will simply return given serializer as is.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findConvertingSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                      withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                           withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Method called to find filter that is configured to be used with bean
  serializer being built, if any.
 */
- (id)findFilterIdWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Overridable method called after checking all other types.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findOptionalStdSerializerWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                           withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                              withBoolean:(jboolean)staticTyping;

/*!
 @brief Reflection-based serialized find method, which checks if
  given class implements one of recognized "add-on" interfaces.
 Add-on here means a role that is usually or can be a secondary
  trait: for example,
  bean classes may implement <code>Iterable</code>, but their main
  function is usually something else. The reason for
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findSerializerByAddonTypeWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)javaType
                                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                               withBoolean:(jboolean)staticTyping;

/*!
 @brief Method called to see if one of primary per-class annotations
  (or related, like implementing of <code>JsonSerializable</code>)
  determines the serializer to use.
 <p>
  Currently handles things like:
 <ul>
  <li>If type implements <code>JsonSerializable</code>, use that
   </li>
  <li>If type has <code>com.fasterxml.jackson.annotation.JsonValue</code> annotation (or equivalent), build serializer
     based on that property  
 </li>
 </ul>
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findSerializerByAnnotationsWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method that will use fast lookup (and identity comparison) methods to
  see if we know serializer to use for given type.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findSerializerByLookupWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                          withComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                 withBoolean:(jboolean)staticTyping;

/*!
 @brief Method for checking if we can determine serializer to use based on set of
  known primary types, checking for set of known base types (exact matches
  having been compared against with <code>findSerializerByLookup</code>).
 This does not include "secondary" interfaces, but
  mostly concrete or abstract base classes.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findSerializerByPrimaryTypeWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                                withBoolean:(jboolean)staticTyping;

/*!
 @brief Helper method called to check if a class or method
  has an annotation
  (@@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)
  that tells the class to use for serialization.
 Returns null if no such annotation found.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)findSerializerFromAnnotationWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                                          withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

- (jboolean)isIndexedListWithIOSClass:(IOSClass *)cls;

/*!
 @brief Helper method to check whether global settings and/or class
  annotations for the bean class indicate that static typing
  (declared types)  should be used for properties.
 (instead of dynamic runtime types).
 @since 2.1 (earlier had variant with additional 'property' parameter)
 */
- (jboolean)usesStaticTypingWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                         withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerBasicSerializerFactory)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerBasicSerializerFactory, _factoryConfig_, ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *)

/*!
 @brief Since these are all JDK classes, we shouldn't have to worry
  about ClassLoader used to load them.Rather, we can just
  use the class name, and keep things simple and efficient.
 */
inline JavaUtilHashMap *ComFasterxmlJacksonDatabindSerBasicSerializerFactory_get__concrete(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashMap *ComFasterxmlJacksonDatabindSerBasicSerializerFactory__concrete;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerBasicSerializerFactory, _concrete, JavaUtilHashMap *)

/*!
 @brief Actually it may not make much sense to eagerly instantiate all
  kinds of serializers: so this Map actually contains class references,
  not instances
 */
inline JavaUtilHashMap *ComFasterxmlJacksonDatabindSerBasicSerializerFactory_get__concreteLazy(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashMap *ComFasterxmlJacksonDatabindSerBasicSerializerFactory__concreteLazy;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerBasicSerializerFactory, _concreteLazy, JavaUtilHashMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBasicSerializerFactory_initWithComFasterxmlJacksonDatabindCfgSerializerFactoryConfig_(ComFasterxmlJacksonDatabindSerBasicSerializerFactory *self, ComFasterxmlJacksonDatabindCfgSerializerFactoryConfig *config);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBasicSerializerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBasicSerializerFactory")
