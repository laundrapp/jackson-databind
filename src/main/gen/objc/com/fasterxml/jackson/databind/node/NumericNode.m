//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/databind/node/JsonNodeType.h"
#include "com/fasterxml/jackson/databind/node/NumericNode.h"
#include "com/fasterxml/jackson/databind/node/ValueNode.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@implementation ComFasterxmlJacksonDatabindNodeNumericNode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindNodeNumericNode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComFasterxmlJacksonDatabindNodeJsonNodeType *)getNodeType {
  return JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, NUMBER);
}

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSNumber *)numberValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)intValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)longValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)doubleValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaMathBigDecimal *)decimalValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaMathBigInteger *)bigIntegerValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)canConvertToInt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)canConvertToLong {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)asText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)asInt {
  return [self intValue];
}

- (jint)asIntWithInt:(jint)defaultValue {
  return [self intValue];
}

- (jlong)asLong {
  return [self longValue];
}

- (jlong)asLongWithLong:(jlong)defaultValue {
  return [self longValue];
}

- (jdouble)asDouble {
  return [self doubleValue];
}

- (jdouble)asDoubleWithDouble:(jdouble)defaultValue {
  return [self doubleValue];
}

- (jboolean)isNaN {
  return false;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeJsonNodeType;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser_NumberType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNodeType);
  methods[2].selector = @selector(numberType);
  methods[3].selector = @selector(numberValue);
  methods[4].selector = @selector(intValue);
  methods[5].selector = @selector(longValue);
  methods[6].selector = @selector(doubleValue);
  methods[7].selector = @selector(decimalValue);
  methods[8].selector = @selector(bigIntegerValue);
  methods[9].selector = @selector(canConvertToInt);
  methods[10].selector = @selector(canConvertToLong);
  methods[11].selector = @selector(asText);
  methods[12].selector = @selector(asInt);
  methods[13].selector = @selector(asIntWithInt:);
  methods[14].selector = @selector(asLong);
  methods[15].selector = @selector(asLongWithLong:);
  methods[16].selector = @selector(asDouble);
  methods[17].selector = @selector(asDoubleWithDouble:);
  methods[18].selector = @selector(isNaN);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "asInt", "I", "asLong", "J", "asDouble", "D" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindNodeNumericNode = { "NumericNode", "com.fasterxml.jackson.databind.node", ptrTable, methods, NULL, 7, 0x401, 19, 0, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindNodeNumericNode;
}

@end

void ComFasterxmlJacksonDatabindNodeNumericNode_init(ComFasterxmlJacksonDatabindNodeNumericNode *self) {
  ComFasterxmlJacksonDatabindNodeValueNode_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindNodeNumericNode)
