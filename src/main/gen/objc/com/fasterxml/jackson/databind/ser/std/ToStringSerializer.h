//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdToStringSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdToStringSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdToStringSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdToStringSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdToStringSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdToStringSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdToStringSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdToStringSerializer))
#define ComFasterxmlJacksonDatabindSerStdToStringSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;

/*!
 @brief Simple general purpose serializer, useful for any
  type for which <code>Object.toString</code> returns the desired JSON
  value.
 */
@interface ComFasterxmlJacksonDatabindSerStdToStringSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer

#pragma mark Public

/*!
 @brief <p>
  Note: usually you should NOT create new instances, but instead use 
 <code>instance</code> which is stateless and fully thread-safe.
 However,
  there are cases where constructor is needed; for example,
  when using explicit serializer annotations like 
 <code>com.fasterxml.jackson.databind.annotation.JsonSerialize</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Sometimes it may actually make sense to retain actual handled type, so...
 @since 2.5
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)handledType;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                              withId:(id)value;

- (void)serializeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Default implementation will write type prefix, call regular serialization
  method (since assumption is that value itself does not need JSON
  Array or Object start/end markers), and then write type suffix.
 This should work for most cases; some sub-classes may want to
  change this behavior.
 */
- (void)serializeWithTypeWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdToStringSerializer)

/*!
 @brief Singleton instance to use.
 */
inline ComFasterxmlJacksonDatabindSerStdToStringSerializer *ComFasterxmlJacksonDatabindSerStdToStringSerializer_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdToStringSerializer *ComFasterxmlJacksonDatabindSerStdToStringSerializer_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdToStringSerializer, instance, ComFasterxmlJacksonDatabindSerStdToStringSerializer *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdToStringSerializer_init(ComFasterxmlJacksonDatabindSerStdToStringSerializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdToStringSerializer *new_ComFasterxmlJacksonDatabindSerStdToStringSerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdToStringSerializer *create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(ComFasterxmlJacksonDatabindSerStdToStringSerializer *self, IOSClass *handledType);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdToStringSerializer *new_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(IOSClass *handledType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdToStringSerializer *create_ComFasterxmlJacksonDatabindSerStdToStringSerializer_initWithIOSClass_(IOSClass *handledType);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdToStringSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdToStringSerializer")
