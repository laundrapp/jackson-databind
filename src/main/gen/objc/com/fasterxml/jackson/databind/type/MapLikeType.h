//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeMapLikeType")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindTypeMapLikeType
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeMapLikeType 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeMapLikeType 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindTypeMapLikeType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindTypeMapLikeType_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeMapLikeType || defined(INCLUDE_ComFasterxmlJacksonDatabindTypeMapLikeType))
#define ComFasterxmlJacksonDatabindTypeMapLikeType_

#define RESTRICT_ComFasterxmlJacksonDatabindTypeTypeBase 1
#define INCLUDE_ComFasterxmlJacksonDatabindTypeTypeBase 1
#include "com/fasterxml/jackson/databind/type/TypeBase.h"

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeTypeBindings;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangStringBuilder;

/*!
 @brief Type that represents Map-like types; things that consist of key/value pairs
  but that do not necessarily implement <code>java.util.Map</code>, but that do not
  have enough introspection functionality to allow for some level of generic
  handling.This specifically allows framework to check for configuration and
  annotation settings used for Map types, and pass these to custom handlers
  that may be more familiar with actual type.
 */
@interface ComFasterxmlJacksonDatabindTypeMapLikeType : ComFasterxmlJacksonDatabindTypeTypeBase {
 @public
  /*!
   @brief Type of keys of Map.
   */
  ComFasterxmlJacksonDatabindJavaType *_keyType_;
  /*!
   @brief Type of values of Map.
   */
  ComFasterxmlJacksonDatabindJavaType *_valueType_;
}

#pragma mark Public

+ (ComFasterxmlJacksonDatabindTypeMapLikeType *)constructWithIOSClass:(IOSClass *)rawType
                              withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyT
                              withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueT;

- (jboolean)isEqual:(id)o;

- (ComFasterxmlJacksonDatabindJavaType *)getContentType;

- (id)getContentTypeHandler;

- (id)getContentValueHandler;

- (JavaLangStringBuilder *)getErasedSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (JavaLangStringBuilder *)getGenericSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (ComFasterxmlJacksonDatabindJavaType *)getKeyType;

- (jboolean)hasHandlers;

- (jboolean)isContainerType;

- (jboolean)isMapLikeType;

/*!
 @brief Method that can be used for checking whether this type is a "real"
  Collection type; meaning whether it represents a parameterized subtype of 
 <code>java.util.Collection</code> or just something that acts like one.
 */
- (jboolean)isTrueMapType;

- (ComFasterxmlJacksonDatabindJavaType *)refineWithIOSClass:(IOSClass *)rawType
            withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
               withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (NSString *)description;

/*!
 @brief Factory method that can be used to "upgrade" a basic type into
  collection-like one; usually done via <code>TypeModifier</code>
 @since 2.7
 */
+ (ComFasterxmlJacksonDatabindTypeMapLikeType *)upgradeFromWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyT
                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueT;

- (ComFasterxmlJacksonDatabindJavaType *)withContentTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)contentType;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withContentTypeHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withContentValueHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindJavaType *)withHandlersFromWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)src;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withKeyTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withKeyTypeHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withKeyValueHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withStaticTyping;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withTypeHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeMapLikeType *)withValueHandlerWithId:(id)h;

#pragma mark Protected

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)mapType
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInts
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyT
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueT
                                    withId:(id)valueHandler
                                    withId:(id)typeHandler
                               withBoolean:(jboolean)asStatic;

/*!
 @since 2.7
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeTypeBase:(ComFasterxmlJacksonDatabindTypeTypeBase *)base
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyT
                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueT;

- (ComFasterxmlJacksonDatabindJavaType *)_narrowWithIOSClass:(IOSClass *)subclass;

- (NSString *)buildCanonicalName;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeTypeBase:(ComFasterxmlJacksonDatabindTypeTypeBase *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)arg1
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg2
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)arg3
                                   withInt:(jint)arg4
                                    withId:(id)arg5
                                    withId:(id)arg6
                               withBoolean:(jboolean)arg7 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindTypeMapLikeType)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeMapLikeType, _keyType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindTypeMapLikeType, _valueType_, ComFasterxmlJacksonDatabindJavaType *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeMapLikeType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withId_withId_withBoolean_(ComFasterxmlJacksonDatabindTypeMapLikeType *self, IOSClass *mapType, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *new_ComFasterxmlJacksonDatabindTypeMapLikeType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withId_withId_withBoolean_(IOSClass *mapType, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT, id valueHandler, id typeHandler, jboolean asStatic) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *create_ComFasterxmlJacksonDatabindTypeMapLikeType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withId_withId_withBoolean_(IOSClass *mapType, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeMapLikeType_initWithComFasterxmlJacksonDatabindTypeTypeBase_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindTypeMapLikeType *self, ComFasterxmlJacksonDatabindTypeTypeBase *base, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *new_ComFasterxmlJacksonDatabindTypeMapLikeType_initWithComFasterxmlJacksonDatabindTypeTypeBase_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindTypeTypeBase *base, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *create_ComFasterxmlJacksonDatabindTypeMapLikeType_initWithComFasterxmlJacksonDatabindTypeTypeBase_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindTypeTypeBase *base, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *ComFasterxmlJacksonDatabindTypeMapLikeType_upgradeFromWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *baseType, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeMapLikeType *ComFasterxmlJacksonDatabindTypeMapLikeType_constructWithIOSClass_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_(IOSClass *rawType, ComFasterxmlJacksonDatabindJavaType *keyT, ComFasterxmlJacksonDatabindJavaType *valueT);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindTypeMapLikeType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeMapLikeType")
