//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/util/LRUMap.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface ComFasterxmlJacksonDatabindUtilLRUMap ()

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

inline jlong ComFasterxmlJacksonDatabindUtilLRUMap_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindUtilLRUMap_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilLRUMap, serialVersionUID, jlong)

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilLRUMap_readObjectWithJavaIoObjectInputStream_(ComFasterxmlJacksonDatabindUtilLRUMap *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilLRUMap_writeObjectWithJavaIoObjectOutputStream_(ComFasterxmlJacksonDatabindUtilLRUMap *self, JavaIoObjectOutputStream *outArg);

@implementation ComFasterxmlJacksonDatabindUtilLRUMap

- (instancetype __nonnull)initWithInt:(jint)initialEntries
                              withInt:(jint)maxEntries {
  ComFasterxmlJacksonDatabindUtilLRUMap_initWithInt_withInt_(self, initialEntries, maxEntries);
  return self;
}

- (id)putWithId:(id)key
         withId:(id)value {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_map_)) size] >= _maxEntries_) {
    @synchronized(self) {
      if ([_map_ size] >= _maxEntries_) {
        [self clear];
      }
    }
  }
  return [_map_ putWithId:key withId:value];
}

- (id)putIfAbsentWithId:(id)key
                 withId:(id)value {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_map_)) size] >= _maxEntries_) {
    @synchronized(self) {
      if ([_map_ size] >= _maxEntries_) {
        [self clear];
      }
    }
  }
  return [_map_ putIfAbsentWithId:key withId:value];
}

- (id)getWithId:(id)key {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_map_)) getWithId:key];
}

- (void)clear {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_map_)) clear];
}

- (jint)size {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_map_)) size];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  ComFasterxmlJacksonDatabindUtilLRUMap_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  ComFasterxmlJacksonDatabindUtilLRUMap_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (id)readResolve {
  return create_ComFasterxmlJacksonDatabindUtilLRUMap_initWithInt_withInt_(_jdkSerializeMaxEntries_, _jdkSerializeMaxEntries_);
}

- (void)dealloc {
  RELEASE_(_map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 10, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(putWithId:withId:);
  methods[2].selector = @selector(putIfAbsentWithId:withId:);
  methods[3].selector = @selector(getWithId:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[7].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[8].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindUtilLRUMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_maxEntries_", "I", .constantValue.asLong = 0, 0x94, -1, -1, -1, -1 },
    { "_map_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x94, -1, -1, 13, -1 },
    { "_jdkSerializeMaxEntries_", "I", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "put", "LNSObject;LNSObject;", "(TK;TV;)TV;", "putIfAbsent", "get", "LNSObject;", "(Ljava/lang/Object;)TV;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;", "writeObject", "LJavaIoObjectOutputStream;", "Ljava/util/concurrent/ConcurrentHashMap<TK;TV;>;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilLRUMap = { "LRUMap", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, 14, -1 };
  return &_ComFasterxmlJacksonDatabindUtilLRUMap;
}

@end

void ComFasterxmlJacksonDatabindUtilLRUMap_initWithInt_withInt_(ComFasterxmlJacksonDatabindUtilLRUMap *self, jint initialEntries, jint maxEntries) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_map_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(initialEntries, 0.8f, 4));
  self->_maxEntries_ = maxEntries;
}

ComFasterxmlJacksonDatabindUtilLRUMap *new_ComFasterxmlJacksonDatabindUtilLRUMap_initWithInt_withInt_(jint initialEntries, jint maxEntries) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilLRUMap, initWithInt_withInt_, initialEntries, maxEntries)
}

ComFasterxmlJacksonDatabindUtilLRUMap *create_ComFasterxmlJacksonDatabindUtilLRUMap_initWithInt_withInt_(jint initialEntries, jint maxEntries) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilLRUMap, initWithInt_withInt_, initialEntries, maxEntries)
}

void ComFasterxmlJacksonDatabindUtilLRUMap_readObjectWithJavaIoObjectInputStream_(ComFasterxmlJacksonDatabindUtilLRUMap *self, JavaIoObjectInputStream *inArg) {
  self->_jdkSerializeMaxEntries_ = [((JavaIoObjectInputStream *) nil_chk(inArg)) readInt];
}

void ComFasterxmlJacksonDatabindUtilLRUMap_writeObjectWithJavaIoObjectOutputStream_(ComFasterxmlJacksonDatabindUtilLRUMap *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeIntWithInt:self->_jdkSerializeMaxEntries_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilLRUMap)
