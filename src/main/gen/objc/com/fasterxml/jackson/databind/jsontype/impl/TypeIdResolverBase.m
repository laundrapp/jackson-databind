//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/DatabindContext.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "java/lang/IllegalStateException.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                       withComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)typeFactory {
  ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(self, baseType, typeFactory);
  return self;
}

- (void)init__WithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)bt {
}

- (NSString *)idFromBaseType {
  return [self idFromValueAndTypeWithId:nil withIOSClass:[((ComFasterxmlJacksonDatabindJavaType *) nil_chk(_baseType_)) getRawClass]];
}

- (ComFasterxmlJacksonDatabindJavaType *)typeFromIdWithComFasterxmlJacksonDatabindDatabindContext:(ComFasterxmlJacksonDatabindDatabindContext *)context
                                                                                     withNSString:(NSString *)id_ {
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Sub-class ", [[self java_getClass] getName], @" MUST implement `typeFromId(DatabindContext,String)"));
}

- (NSString *)getDescForKnownTypeIds {
  return nil;
}

- (void)dealloc {
  RELEASE_(_typeFactory_);
  RELEASE_(_baseType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindTypeTypeFactory:);
  methods[2].selector = @selector(init__WithComFasterxmlJacksonDatabindJavaType:);
  methods[3].selector = @selector(idFromBaseType);
  methods[4].selector = @selector(typeFromIdWithComFasterxmlJacksonDatabindDatabindContext:withNSString:);
  methods[5].selector = @selector(getDescForKnownTypeIds);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_typeFactory_", "LComFasterxmlJacksonDatabindTypeTypeFactory;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_baseType_", "LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonDatabindTypeTypeFactory;", "init", "LComFasterxmlJacksonDatabindJavaType;", "typeFromId", "LComFasterxmlJacksonDatabindDatabindContext;LNSString;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase = { "TypeIdResolverBase", "com.fasterxml.jackson.databind.jsontype.impl", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase;
}

@end

void ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase_init(ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase *self) {
  ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(self, nil, nil);
}

void ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase *self, ComFasterxmlJacksonDatabindJavaType *baseType, ComFasterxmlJacksonDatabindTypeTypeFactory *typeFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->_baseType_, baseType);
  JreStrongAssign(&self->_typeFactory_, typeFactory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindJsontypeImplTypeIdResolverBase)
