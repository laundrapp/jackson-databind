//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/CompactStringObjectMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/util/CompactStringObjectMap.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComFasterxmlJacksonDatabindUtilCompactStringObjectMap () {
 @public
  jint _hashMask_;
  jint _spillCount_;
  IOSObjectArray *_hashArea_;
}

- (instancetype __nonnull)initWithInt:(jint)hashMask
                              withInt:(jint)spillCount
                    withNSObjectArray:(IOSObjectArray *)hashArea;

+ (jint)findSizeWithInt:(jint)size;

- (id)_find2WithNSString:(NSString *)key
                 withInt:(jint)slot
                  withId:(id)match;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap, _hashArea_, IOSObjectArray *)

inline jlong ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap, serialVersionUID, jlong)

/*!
 @brief Shared instance that can be used when there are no contents to Map.
 */
inline ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_get_EMPTY(void);
static ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap, EMPTY, ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *)

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *self, jint hashMask, jint spillCount, IOSObjectArray *hashArea);

__attribute__((unused)) static ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *new_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(jint hashMask, jint spillCount, IOSObjectArray *hashArea) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *create_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(jint hashMask, jint spillCount, IOSObjectArray *hashArea);

__attribute__((unused)) static jint ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_findSizeWithInt_(jint size);

__attribute__((unused)) static id ComFasterxmlJacksonDatabindUtilCompactStringObjectMap__find2WithNSString_withInt_withId_(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *self, NSString *key, jint slot, id match);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap)

@implementation ComFasterxmlJacksonDatabindUtilCompactStringObjectMap

- (instancetype __nonnull)initWithInt:(jint)hashMask
                              withInt:(jint)spillCount
                    withNSObjectArray:(IOSObjectArray *)hashArea {
  ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(self, hashMask, spillCount, hashArea);
  return self;
}

+ (ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *)constructWithJavaUtilMap:(id<JavaUtilMap>)all {
  return ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_constructWithJavaUtilMap_(all);
}

+ (jint)findSizeWithInt:(jint)size {
  return ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_findSizeWithInt_(size);
}

- (id)findWithNSString:(NSString *)key {
  jint slot = ((jint) [((NSString *) nil_chk(key)) hash]) & _hashMask_;
  jint ix = (JreLShift32(slot, 1));
  id match = IOSObjectArray_Get(nil_chk(_hashArea_), ix);
  if ((match == key) || [key isEqual:match]) {
    return IOSObjectArray_Get(_hashArea_, ix + 1);
  }
  return ComFasterxmlJacksonDatabindUtilCompactStringObjectMap__find2WithNSString_withInt_withId_(self, key, slot, match);
}

- (id)_find2WithNSString:(NSString *)key
                 withInt:(jint)slot
                  withId:(id)match {
  return ComFasterxmlJacksonDatabindUtilCompactStringObjectMap__find2WithNSString_withInt_withId_(self, key, slot, match);
}

- (id)findCaseInsensitiveWithNSString:(NSString *)key {
  for (jint i = 0, end = ((IOSObjectArray *) nil_chk(_hashArea_))->size_; i < end; i += 2) {
    id k2 = IOSObjectArray_Get(_hashArea_, i);
    if (k2 != nil) {
      NSString *s = (NSString *) cast_chk(k2, [NSString class]);
      if ([s java_equalsIgnoreCase:key]) {
        return IOSObjectArray_Get(_hashArea_, i + 1);
      }
    }
  }
  return nil;
}

- (id<JavaUtilList>)keys {
  jint end = ((IOSObjectArray *) nil_chk(_hashArea_))->size_;
  id<JavaUtilList> keys = create_JavaUtilArrayList_initWithInt_(JreRShift32(end, 2));
  for (jint i = 0; i < end; i += 2) {
    id key = IOSObjectArray_Get(_hashArea_, i);
    if (key != nil) {
      [keys addWithId:(NSString *) cast_chk(key, [NSString class])];
    }
  }
  return keys;
}

- (void)dealloc {
  RELEASE_(_hashArea_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilCompactStringObjectMap;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1a, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x12, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withNSObjectArray:);
  methods[1].selector = @selector(constructWithJavaUtilMap:);
  methods[2].selector = @selector(findSizeWithInt:);
  methods[3].selector = @selector(findWithNSString:);
  methods[4].selector = @selector(_find2WithNSString:withInt:withId:);
  methods[5].selector = @selector(findCaseInsensitiveWithNSString:);
  methods[6].selector = @selector(keys);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY", "LComFasterxmlJacksonDatabindUtilCompactStringObjectMap;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "_hashMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_spillCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_hashArea_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II[LNSObject;", "construct", "LJavaUtilMap;", "<T:Ljava/lang/Object;>(Ljava/util/Map<Ljava/lang/String;TT;>;)Lcom/fasterxml/jackson/databind/util/CompactStringObjectMap;", "findSize", "I", "find", "LNSString;", "_find2", "LNSString;ILNSObject;", "findCaseInsensitive", "()Ljava/util/List<Ljava/lang/String;>;", &ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_EMPTY };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilCompactStringObjectMap = { "CompactStringObjectMap", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x11, 7, 5, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindUtilCompactStringObjectMap class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_EMPTY, new_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(1, 0, [IOSObjectArray arrayWithLength:4 type:NSObject_class_()]));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap)
  }
}

@end

void ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *self, jint hashMask, jint spillCount, IOSObjectArray *hashArea) {
  NSObject_init(self);
  self->_hashMask_ = hashMask;
  self->_spillCount_ = spillCount;
  JreStrongAssign(&self->_hashArea_, hashArea);
}

ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *new_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(jint hashMask, jint spillCount, IOSObjectArray *hashArea) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap, initWithInt_withInt_withNSObjectArray_, hashMask, spillCount, hashArea)
}

ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *create_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(jint hashMask, jint spillCount, IOSObjectArray *hashArea) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap, initWithInt_withInt_withNSObjectArray_, hashMask, spillCount, hashArea)
}

ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_constructWithJavaUtilMap_(id<JavaUtilMap> all) {
  ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initialize();
  if ([((id<JavaUtilMap>) nil_chk(all)) isEmpty]) {
    return ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_EMPTY;
  }
  jint size = ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_findSizeWithInt_([all size]);
  jint mask = size - 1;
  jint alloc_ = (size + (JreRShift32(size, 1))) * 2;
  IOSObjectArray *hashArea = [IOSObjectArray arrayWithLength:alloc_ type:NSObject_class_()];
  jint spillCount = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([all entrySet])) {
    NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    jint slot = ((jint) [((NSString *) nil_chk(key)) hash]) & mask;
    jint ix = slot + slot;
    if (IOSObjectArray_Get(hashArea, ix) != nil) {
      ix = JreLShift32((size + (JreRShift32(slot, 1))), 1);
      if (IOSObjectArray_Get(hashArea, ix) != nil) {
        ix = (JreLShift32((size + (JreRShift32(size, 1))), 1)) + spillCount;
        spillCount += 2;
        if (ix >= hashArea->size_) {
          hashArea = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(hashArea, hashArea->size_ + 4);
        }
      }
    }
    IOSObjectArray_Set(nil_chk(hashArea), ix, key);
    IOSObjectArray_Set(hashArea, ix + 1, [entry_ getValue]);
  }
  return create_ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initWithInt_withInt_withNSObjectArray_(mask, spillCount, hashArea);
}

jint ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_findSizeWithInt_(jint size) {
  ComFasterxmlJacksonDatabindUtilCompactStringObjectMap_initialize();
  if (size <= 5) {
    return 8;
  }
  if (size <= 12) {
    return 16;
  }
  jint needed = size + (JreRShift32(size, 2));
  jint result = 32;
  while (result < needed) {
    result += result;
  }
  return result;
}

id ComFasterxmlJacksonDatabindUtilCompactStringObjectMap__find2WithNSString_withInt_withId_(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap *self, NSString *key, jint slot, id match) {
  if (match == nil) {
    return nil;
  }
  jint hashSize = self->_hashMask_ + 1;
  jint ix = JreLShift32(hashSize + (JreRShift32(slot, 1)), 1);
  match = IOSObjectArray_Get(nil_chk(self->_hashArea_), ix);
  if ([((NSString *) nil_chk(key)) isEqual:match]) {
    return IOSObjectArray_Get(self->_hashArea_, ix + 1);
  }
  if (match != nil) {
    jint i = JreLShift32((hashSize + (JreRShift32(hashSize, 1))), 1);
    for (jint end = i + self->_spillCount_; i < end; i += 2) {
      match = IOSObjectArray_Get(self->_hashArea_, i);
      if ((match == key) || [key isEqual:match]) {
        return IOSObjectArray_Get(self->_hashArea_, i + 1);
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilCompactStringObjectMap)
