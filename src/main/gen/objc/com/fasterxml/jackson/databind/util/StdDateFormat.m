//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/io/NumberInput.h"
#include "com/fasterxml/jackson/databind/util/StdDateFormat.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/DateFormat.h"
#include "java/text/FieldPosition.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComFasterxmlJacksonDatabindUtilStdDateFormat () {
 @public
  /*!
   @brief Lazily instantiated calendar used by this instance for serialization (<code>format(Date)</code>).
   @since 2.9.1
   */
  JavaUtilCalendar *_calendar_;
  JavaTextDateFormat *_formatRFC1123_;
  /*!
   @brief Whether the TZ offset must be formatted with a colon between hours and minutes (<code>HH:mm</code> format)
   @since 2.9.1
   */
  jboolean _tzSerializedWithColon_;
}

+ (void)pad2WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value;

+ (void)pad3WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value;

+ (void)pad4WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value;

- (JavaUtilDate *)_parseDateFromLongWithNSString:(NSString *)longStr
                       withJavaTextParsePosition:(JavaTextParsePosition *)pos;

+ (jint)_parse4DWithNSString:(NSString *)str
                     withInt:(jint)index;

+ (jint)_parse2DWithNSString:(NSString *)str
                     withInt:(jint)index;

+ (JavaTextDateFormat *)_cloneFormatWithJavaTextDateFormat:(JavaTextDateFormat *)df
                                              withNSString:(NSString *)format
                                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                        withJavaUtilLocale:(JavaUtilLocale *)loc
                                       withJavaLangBoolean:(JavaLangBoolean *)lenient;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilStdDateFormat, _calendar_, JavaUtilCalendar *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilStdDateFormat, _formatRFC1123_, JavaTextDateFormat *)

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value);

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad3WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value);

__attribute__((unused)) static void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad4WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value);

__attribute__((unused)) static JavaUtilDate *ComFasterxmlJacksonDatabindUtilStdDateFormat__parseDateFromLongWithNSString_withJavaTextParsePosition_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, NSString *longStr, JavaTextParsePosition *pos);

__attribute__((unused)) static jint ComFasterxmlJacksonDatabindUtilStdDateFormat__parse4DWithNSString_withInt_(NSString *str, jint index);

__attribute__((unused)) static jint ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(NSString *str, jint index);

__attribute__((unused)) static JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaTextDateFormat *df, NSString *format, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$2(void);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindUtilStdDateFormat)

NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN_STR = @"\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d";
JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN;
JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_ISO8601;
NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601 = @"yyyy-MM-dd'T'HH:mm:ss.SSSZ";
NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_PLAIN = @"yyyy-MM-dd";
NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123 = @"EEE, dd MMM yyyy HH:mm:ss zzz";
IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat_ALL_FORMATS;
JavaUtilTimeZone *ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
JavaUtilLocale *ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE;
JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123;
JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601;
ComFasterxmlJacksonDatabindUtilStdDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_instance;
JavaUtilCalendar *ComFasterxmlJacksonDatabindUtilStdDateFormat_CALENDAR;

@implementation ComFasterxmlJacksonDatabindUtilStdDateFormat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(self, tz, loc);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc
                               withJavaLangBoolean:(JavaLangBoolean *)lenient {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(self, tz, loc, lenient);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc
                               withJavaLangBoolean:(JavaLangBoolean *)lenient
                                       withBoolean:(jboolean)formatTzOffsetWithColon {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(self, tz, loc, lenient, formatTzOffsetWithColon);
  return self;
}

+ (JavaUtilTimeZone *)getDefaultTimeZone {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat_getDefaultTimeZone();
}

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  if (tz == nil) {
    tz = ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
  }
  if ((tz == _timezone_) || [((JavaUtilTimeZone *) nil_chk(tz)) isEqual:_timezone_]) {
    return self;
  }
  return create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(tz, _locale_, _lenient_, _tzSerializedWithColon_);
}

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)loc {
  if ([((JavaUtilLocale *) nil_chk(loc)) isEqual:_locale_]) {
    return self;
  }
  return create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(_timezone_, loc, _lenient_, _tzSerializedWithColon_);
}

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withLenientWithJavaLangBoolean:(JavaLangBoolean *)b {
  if (ComFasterxmlJacksonDatabindUtilStdDateFormat__equalsWithId_withId_(b, _lenient_)) {
    return self;
  }
  return create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(_timezone_, _locale_, b, _tzSerializedWithColon_);
}

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withColonInTimeZoneWithBoolean:(jboolean)b {
  if (_tzSerializedWithColon_ == b) {
    return self;
  }
  return create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(_timezone_, _locale_, _lenient_, b);
}

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)java_clone {
  return create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(_timezone_, _locale_, _lenient_, _tzSerializedWithColon_);
}

+ (JavaTextDateFormat *)getISO8601FormatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                          withJavaUtilLocale:(JavaUtilLocale *)loc {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat_getISO8601FormatWithJavaUtilTimeZone_withJavaUtilLocale_(tz, loc);
}

+ (JavaTextDateFormat *)getRFC1123FormatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                          withJavaUtilLocale:(JavaUtilLocale *)loc {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat_getRFC1123FormatWithJavaUtilTimeZone_withJavaUtilLocale_(tz, loc);
}

- (JavaUtilTimeZone *)getTimeZone {
  return _timezone_;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  if (![((JavaUtilTimeZone *) nil_chk(tz)) isEqual:_timezone_]) {
    [self _clearFormats];
    JreStrongAssign(&_timezone_, tz);
  }
}

- (void)setLenientWithBoolean:(jboolean)enabled {
  JavaLangBoolean *newValue = JavaLangBoolean_valueOfWithBoolean_(enabled);
  if (!ComFasterxmlJacksonDatabindUtilStdDateFormat__equalsWithId_withId_(newValue, _lenient_)) {
    JreStrongAssign(&_lenient_, newValue);
    [self _clearFormats];
  }
}

- (jboolean)isLenient {
  return (_lenient_ == nil) || [((JavaLangBoolean *) nil_chk(_lenient_)) booleanValue];
}

- (jboolean)isColonIncludedInTimeZone {
  return _tzSerializedWithColon_;
}

- (JavaUtilDate *)parseWithNSString:(NSString *)dateStr {
  dateStr = [((NSString *) nil_chk(dateStr)) java_trim];
  JavaTextParsePosition *pos = create_JavaTextParsePosition_initWithInt_(0);
  JavaUtilDate *dt = [self _parseDateWithNSString:dateStr withJavaTextParsePosition:pos];
  if (dt != nil) {
    return dt;
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = ComFasterxmlJacksonDatabindUtilStdDateFormat_ALL_FORMATS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *f = *b__++;
      if ([sb java_length] > 0) {
        [sb appendWithNSString:@"\", \""];
      }
      else {
        [sb appendWithChar:'"'];
      }
      [sb appendWithNSString:f];
    }
  }
  [sb appendWithChar:'"'];
  @throw create_JavaTextParseException_initWithNSString_withInt_(NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot parse date \"%s\": not compatible with any of standard forms (%s)", [IOSObjectArray arrayWithObjects:(id[]){ dateStr, [sb description] } count:2 type:NSObject_class_()]), [pos getErrorIndex]);
}

- (JavaUtilDate *)parseWithNSString:(NSString *)dateStr
          withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  @try {
    return [self _parseDateWithNSString:dateStr withJavaTextParsePosition:pos];
  }
  @catch (JavaTextParseException *e) {
  }
  return nil;
}

- (JavaUtilDate *)_parseDateWithNSString:(NSString *)dateStr
               withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  if ([self looksLikeISO8601WithNSString:dateStr]) {
    return [self parseAsISO8601WithNSString:dateStr withJavaTextParsePosition:pos];
  }
  jint i = [((NSString *) nil_chk(dateStr)) java_length];
  while (--i >= 0) {
    jchar ch = [dateStr charAtWithInt:i];
    if (ch < '0' || ch > '9') {
      if (i > 0 || ch != '-') {
        break;
      }
    }
  }
  if ((i < 0) && ([dateStr charAtWithInt:0] == '-' || ComFasterxmlJacksonCoreIoNumberInput_inLongRangeWithNSString_withBoolean_(dateStr, false))) {
    return ComFasterxmlJacksonDatabindUtilStdDateFormat__parseDateFromLongWithNSString_withJavaTextParsePosition_(self, dateStr, pos);
  }
  return [self parseAsRFC1123WithNSString:dateStr withJavaTextParsePosition:pos];
}

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition {
  JavaUtilTimeZone *tz = _timezone_;
  if (tz == nil) {
    tz = ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
  }
  [self _formatWithJavaUtilTimeZone:tz withJavaUtilLocale:_locale_ withJavaUtilDate:date withJavaLangStringBuffer:toAppendTo];
  return toAppendTo;
}

- (void)_formatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                 withJavaUtilLocale:(JavaUtilLocale *)loc
                   withJavaUtilDate:(JavaUtilDate *)date
           withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer {
  JavaUtilCalendar *cal = [self _getCalendarWithJavaUtilTimeZone:tz];
  [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:date];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad4WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_YEAR]);
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'-'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_MONTH] + 1);
  [buffer appendWithChar:'-'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_DAY_OF_MONTH]);
  [buffer appendWithChar:'T'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  [buffer appendWithChar:':'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_MINUTE]);
  [buffer appendWithChar:':'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_SECOND]);
  [buffer appendWithChar:'.'];
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad3WithJavaLangStringBuffer_withInt_(buffer, [cal getWithInt:JavaUtilCalendar_MILLISECOND]);
  jint offset = [((JavaUtilTimeZone *) nil_chk(tz)) getOffsetWithLong:[cal getTimeInMillis]];
  if (offset != 0) {
    jint hours = JavaLangMath_absWithInt_((offset / (60 * 1000)) / 60);
    jint minutes = JavaLangMath_absWithInt_((offset / (60 * 1000)) % 60);
    [buffer appendWithChar:offset < 0 ? '-' : '+'];
    ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, hours);
    if (_tzSerializedWithColon_) {
      [buffer appendWithChar:':'];
    }
    ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, minutes);
  }
  else {
    if (_tzSerializedWithColon_) {
      [buffer appendWithNSString:@"+00:00"];
    }
    else {
      [buffer appendWithNSString:@"+0000"];
    }
  }
}

+ (void)pad2WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, value);
}

+ (void)pad3WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad3WithJavaLangStringBuffer_withInt_(buffer, value);
}

+ (void)pad4WithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                             withInt:(jint)value {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad4WithJavaLangStringBuffer_withInt_(buffer, value);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getName], _timezone_, _locale_, _lenient_ } count:4 type:NSObject_class_()]);
}

- (NSString *)toPattern {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(100);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"[one of: '"])) appendWithNSString:ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601])) appendWithNSString:@"', '"])) appendWithNSString:ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123])) appendWithNSString:@"' ("];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, FALSE))) isEqual:_lenient_] ? @"strict" : @"lenient"])) appendWithNSString:@")]"];
  return [sb description];
}

- (jboolean)isEqual:(id)o {
  return o == self;
}

- (NSUInteger)hash {
  return JavaLangSystem_identityHashCodeWithId_(self);
}

- (jboolean)looksLikeISO8601WithNSString:(NSString *)dateStr {
  if ([((NSString *) nil_chk(dateStr)) java_length] >= 7 && JavaLangCharacter_isDigitWithChar_([dateStr charAtWithInt:0]) && JavaLangCharacter_isDigitWithChar_([dateStr charAtWithInt:3]) && [dateStr charAtWithInt:4] == '-' && JavaLangCharacter_isDigitWithChar_([dateStr charAtWithInt:5])) {
    return true;
  }
  return false;
}

- (JavaUtilDate *)_parseDateFromLongWithNSString:(NSString *)longStr
                       withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__parseDateFromLongWithNSString_withJavaTextParsePosition_(self, longStr, pos);
}

- (JavaUtilDate *)parseAsISO8601WithNSString:(NSString *)dateStr
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  @try {
    return [self _parseAsISO8601WithNSString:dateStr withJavaTextParsePosition:pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot parse date \"%s\", problem: %s", [IOSObjectArray arrayWithObjects:(id[]){ dateStr, [e getMessage] } count:2 type:NSObject_class_()]), [((JavaTextParsePosition *) nil_chk(pos)) getErrorIndex]);
  }
}

- (JavaUtilDate *)_parseAsISO8601WithNSString:(NSString *)dateStr
                    withJavaTextParsePosition:(JavaTextParsePosition *)bogus {
  jint totalLen = [((NSString *) nil_chk(dateStr)) java_length];
  JavaUtilTimeZone *tz = ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
  if ((_timezone_ != nil) && ('Z' != [dateStr charAtWithInt:totalLen - 1])) {
    tz = _timezone_;
  }
  JavaUtilCalendar *cal = [self _getCalendarWithJavaUtilTimeZone:tz];
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  NSString *formatStr;
  if (totalLen <= 10) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN)) matcherWithJavaLangCharSequence:dateStr];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      jint year = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse4DWithNSString_withInt_(dateStr, 0);
      jint month = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 5) - 1;
      jint day = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 8);
      [cal setWithInt:year withInt:month withInt:day withInt:0 withInt:0 withInt:0];
      [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
      return [cal getTime];
    }
    formatStr = ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_PLAIN;
  }
  else {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_ISO8601)) matcherWithJavaLangCharSequence:dateStr];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      jint start = [m startWithInt:2];
      jint end = [m endWithInt:2];
      jint len = end - start;
      if (len > 1) {
        jint offsetSecs = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, start + 1) * 3600;
        if (len >= 5) {
          offsetSecs += ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, end - 2) * 60;
        }
        if ([dateStr charAtWithInt:start] == '-') {
          offsetSecs *= -1000;
        }
        else {
          offsetSecs *= 1000;
        }
        [cal setWithInt:JavaUtilCalendar_ZONE_OFFSET withInt:offsetSecs];
        [cal setWithInt:JavaUtilCalendar_DST_OFFSET withInt:0];
      }
      jint year = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse4DWithNSString_withInt_(dateStr, 0);
      jint month = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 5) - 1;
      jint day = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 8);
      jint hour = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 11);
      jint minute = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 14);
      jint seconds;
      if ((totalLen > 16) && [dateStr charAtWithInt:16] == ':') {
        seconds = ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(dateStr, 17);
      }
      else {
        seconds = 0;
      }
      [cal setWithInt:year withInt:month withInt:day withInt:hour withInt:minute withInt:seconds];
      start = [m startWithInt:1] + 1;
      end = [m endWithInt:1];
      jint msecs = 0;
      if (start >= end) {
        [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
      }
      else {
        msecs = 0;
        jint fractLen = end - start;
        switch (fractLen) {
          default:
          if (fractLen > 9) {
            @throw create_JavaTextParseException_initWithNSString_withInt_(NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot parse date \"%s\": invalid fractional seconds '%s'; can use at most 9 digits", [IOSObjectArray arrayWithObjects:(id[]){ dateStr, [((NSString *) nil_chk([m groupWithInt:1])) java_substring:1] } count:2 type:NSObject_class_()]), start);
          }
          case 3:
          msecs += ([dateStr charAtWithInt:start + 2] - '0');
          case 2:
          msecs += 10 * ([dateStr charAtWithInt:start + 1] - '0');
          case 1:
          msecs += 100 * ([dateStr charAtWithInt:start] - '0');
          break;
          case 0:
          break;
        }
        [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:msecs];
      }
      return [cal getTime];
    }
    formatStr = ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601;
  }
  @throw create_JavaTextParseException_initWithNSString_withInt_(NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", [IOSObjectArray arrayWithObjects:(id[]){ dateStr, formatStr, _lenient_ } count:3 type:NSObject_class_()]), 0);
}

+ (jint)_parse4DWithNSString:(NSString *)str
                     withInt:(jint)index {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__parse4DWithNSString_withInt_(str, index);
}

+ (jint)_parse2DWithNSString:(NSString *)str
                     withInt:(jint)index {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(str, index);
}

- (JavaUtilDate *)parseAsRFC1123WithNSString:(NSString *)dateStr
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  if (_formatRFC1123_ == nil) {
    JreStrongAssign(&_formatRFC1123_, ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123, ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123, _timezone_, _locale_, _lenient_));
  }
  return [((JavaTextDateFormat *) nil_chk(_formatRFC1123_)) parseWithNSString:dateStr withJavaTextParsePosition:pos];
}

+ (JavaTextDateFormat *)_cloneFormatWithJavaTextDateFormat:(JavaTextDateFormat *)df
                                              withNSString:(NSString *)format
                                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                        withJavaUtilLocale:(JavaUtilLocale *)loc
                                       withJavaLangBoolean:(JavaLangBoolean *)lenient {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(df, format, tz, loc, lenient);
}

- (void)_clearFormats {
  JreStrongAssign(&_formatRFC1123_, nil);
}

- (JavaUtilCalendar *)_getCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  JavaUtilCalendar *cal = _calendar_;
  if (cal == nil) {
    JreStrongAssign(&_calendar_, cal = (JavaUtilCalendar *) cast_chk([((JavaUtilCalendar *) nil_chk(ComFasterxmlJacksonDatabindUtilStdDateFormat_CALENDAR)) java_clone], [JavaUtilCalendar class]));
  }
  if (![((JavaUtilTimeZone *) nil_chk([((JavaUtilCalendar *) nil_chk(cal)) getTimeZone])) isEqual:tz]) {
    [cal setTimeZoneWithJavaUtilTimeZone:tz];
  }
  [cal setLenientWithBoolean:[self isLenient]];
  return cal;
}

+ (jboolean)_equalsWithId:(id)value1
                   withId:(id)value2 {
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__equalsWithId_withId_(value1, value2);
}

- (void)dealloc {
  RELEASE_(_timezone_);
  RELEASE_(_locale_);
  RELEASE_(_lenient_);
  RELEASE_(_calendar_);
  RELEASE_(_formatRFC1123_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilStdDateFormat;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilStdDateFormat;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilStdDateFormat;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilStdDateFormat;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilStdDateFormat;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x9, 13, 0, -1, -1, 14, -1 },
    { NULL, "LJavaTextDateFormat;", 0x9, 15, 0, -1, -1, 16, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 19, 20, 21, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 19, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x4, 23, 22, 21, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 32, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 35, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 36, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 37, 22, 21, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x4, 38, 22, 21, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x4, 39, 22, 40, -1, -1, -1 },
    { NULL, "I", 0xa, 41, 42, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 43, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x4, 44, 22, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x1a, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x4, 47, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 48, 49, -1, 50, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilTimeZone:withJavaUtilLocale:);
  methods[2].selector = @selector(initWithJavaUtilTimeZone:withJavaUtilLocale:withJavaLangBoolean:);
  methods[3].selector = @selector(initWithJavaUtilTimeZone:withJavaUtilLocale:withJavaLangBoolean:withBoolean:);
  methods[4].selector = @selector(getDefaultTimeZone);
  methods[5].selector = @selector(withTimeZoneWithJavaUtilTimeZone:);
  methods[6].selector = @selector(withLocaleWithJavaUtilLocale:);
  methods[7].selector = @selector(withLenientWithJavaLangBoolean:);
  methods[8].selector = @selector(withColonInTimeZoneWithBoolean:);
  methods[9].selector = @selector(java_clone);
  methods[10].selector = @selector(getISO8601FormatWithJavaUtilTimeZone:withJavaUtilLocale:);
  methods[11].selector = @selector(getRFC1123FormatWithJavaUtilTimeZone:withJavaUtilLocale:);
  methods[12].selector = @selector(getTimeZone);
  methods[13].selector = @selector(setTimeZoneWithJavaUtilTimeZone:);
  methods[14].selector = @selector(setLenientWithBoolean:);
  methods[15].selector = @selector(isLenient);
  methods[16].selector = @selector(isColonIncludedInTimeZone);
  methods[17].selector = @selector(parseWithNSString:);
  methods[18].selector = @selector(parseWithNSString:withJavaTextParsePosition:);
  methods[19].selector = @selector(_parseDateWithNSString:withJavaTextParsePosition:);
  methods[20].selector = @selector(formatWithJavaUtilDate:withJavaLangStringBuffer:withJavaTextFieldPosition:);
  methods[21].selector = @selector(_formatWithJavaUtilTimeZone:withJavaUtilLocale:withJavaUtilDate:withJavaLangStringBuffer:);
  methods[22].selector = @selector(pad2WithJavaLangStringBuffer:withInt:);
  methods[23].selector = @selector(pad3WithJavaLangStringBuffer:withInt:);
  methods[24].selector = @selector(pad4WithJavaLangStringBuffer:withInt:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toPattern);
  methods[27].selector = @selector(isEqual:);
  methods[28].selector = @selector(hash);
  methods[29].selector = @selector(looksLikeISO8601WithNSString:);
  methods[30].selector = @selector(_parseDateFromLongWithNSString:withJavaTextParsePosition:);
  methods[31].selector = @selector(parseAsISO8601WithNSString:withJavaTextParsePosition:);
  methods[32].selector = @selector(_parseAsISO8601WithNSString:withJavaTextParsePosition:);
  methods[33].selector = @selector(_parse4DWithNSString:withInt:);
  methods[34].selector = @selector(_parse2DWithNSString:withInt:);
  methods[35].selector = @selector(parseAsRFC1123WithNSString:withJavaTextParsePosition:);
  methods[36].selector = @selector(_cloneFormatWithJavaTextDateFormat:withNSString:withJavaUtilTimeZone:withJavaUtilLocale:withJavaLangBoolean:);
  methods[37].selector = @selector(_clearFormats);
  methods[38].selector = @selector(_getCalendarWithJavaUtilTimeZone:);
  methods[39].selector = @selector(_equalsWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PATTERN_PLAIN_STR", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 51, -1, -1 },
    { "PATTERN_PLAIN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1c, -1, 52, -1, -1 },
    { "PATTERN_ISO8601", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1c, -1, 53, -1, -1 },
    { "DATE_FORMAT_STR_ISO8601", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "DATE_FORMAT_STR_PLAIN", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 55, -1, -1 },
    { "DATE_FORMAT_STR_RFC1123", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 56, -1, -1 },
    { "ALL_FORMATS", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 57, -1, -1 },
    { "DEFAULT_TIMEZONE", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x1c, -1, 58, -1, -1 },
    { "DEFAULT_LOCALE", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x1c, -1, 59, -1, -1 },
    { "DATE_FORMAT_RFC1123", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1c, -1, 60, -1, -1 },
    { "DATE_FORMAT_ISO8601", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1c, -1, 61, -1, -1 },
    { "instance", "LComFasterxmlJacksonDatabindUtilStdDateFormat;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "CALENDAR", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x1c, -1, 63, -1, -1 },
    { "_timezone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "_locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_lenient_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_calendar_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "_formatRFC1123_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "_tzSerializedWithColon_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilTimeZone;LJavaUtilLocale;", (void *)&ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$0, "LJavaUtilTimeZone;LJavaUtilLocale;LJavaLangBoolean;", "LJavaUtilTimeZone;LJavaUtilLocale;LJavaLangBoolean;Z", "withTimeZone", "LJavaUtilTimeZone;", "withLocale", "LJavaUtilLocale;", "withLenient", "LJavaLangBoolean;", "withColonInTimeZone", "Z", "clone", "getISO8601Format", (void *)&ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$1, "getRFC1123Format", (void *)&ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$2, "setTimeZone", "setLenient", "parse", "LNSString;", "LJavaTextParseException;", "LNSString;LJavaTextParsePosition;", "_parseDate", "format", "LJavaUtilDate;LJavaLangStringBuffer;LJavaTextFieldPosition;", "_format", "LJavaUtilTimeZone;LJavaUtilLocale;LJavaUtilDate;LJavaLangStringBuffer;", "pad2", "LJavaLangStringBuffer;I", "pad3", "pad4", "toString", "equals", "LNSObject;", "hashCode", "looksLikeISO8601", "_parseDateFromLong", "parseAsISO8601", "_parseAsISO8601", "LJavaLangIllegalArgumentException;LJavaTextParseException;", "_parse4D", "LNSString;I", "_parse2D", "parseAsRFC1123", "_cloneFormat", "LJavaTextDateFormat;LNSString;LJavaUtilTimeZone;LJavaUtilLocale;LJavaLangBoolean;", "_getCalendar", "_equals", "LNSObject;LNSObject;", "<T:Ljava/lang/Object;>(TT;TT;)Z", &ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN_STR, &ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN, &ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_ISO8601, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_PLAIN, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123, &ComFasterxmlJacksonDatabindUtilStdDateFormat_ALL_FORMATS, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123, &ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601, &ComFasterxmlJacksonDatabindUtilStdDateFormat_instance, &ComFasterxmlJacksonDatabindUtilStdDateFormat_CALENDAR };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindUtilStdDateFormat = { "StdDateFormat", "com.fasterxml.jackson.databind.util", ptrTable, methods, fields, 7, 0x1, 40, 19, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindUtilStdDateFormat;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindUtilStdDateFormat class]) {
    JreStrongAssign(&ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN, JavaUtilRegexPattern_compileWithNSString_(ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN_STR));
    {
      JavaUtilRegexPattern *p = nil;
      @try {
        p = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$", ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN_STR, @"[T]\\d\\d[:]\\d\\d(?:[:]\\d\\d)?(\\.\\d+)?(Z|[+-]\\d\\d(?:[:]?\\d\\d)?)?"));
      }
      @catch (JavaLangThrowable *t) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(t);
      }
      JreStrongAssign(&ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_ISO8601, p);
    }
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilStdDateFormat_ALL_FORMATS, [IOSObjectArray newArrayWithObjects:(id[]){ ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601, @"yyyy-MM-dd'T'HH:mm:ss.SSS", ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123, ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_PLAIN } count:4 type:NSString_class_()]);
    {
      JreStrongAssign(&ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE, JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
    }
    JreStrongAssign(&ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE, JreLoadStatic(JavaUtilLocale, US));
    {
      JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123, ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE));
      [ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123 setTimeZoneWithJavaUtilTimeZone:ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE];
      JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601, ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE));
      [ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601 setTimeZoneWithJavaUtilTimeZone:ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE];
    }
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilStdDateFormat_instance, new_ComFasterxmlJacksonDatabindUtilStdDateFormat_init());
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindUtilStdDateFormat_CALENDAR, new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE, ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindUtilStdDateFormat)
  }
}

@end

void ComFasterxmlJacksonDatabindUtilStdDateFormat_init(ComFasterxmlJacksonDatabindUtilStdDateFormat *self) {
  JavaTextDateFormat_init(self);
  self->_tzSerializedWithColon_ = false;
  JreStrongAssign(&self->_locale_, ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE);
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, init)
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, init)
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc) {
  JavaTextDateFormat_init(self);
  self->_tzSerializedWithColon_ = false;
  JreStrongAssign(&self->_timezone_, tz);
  JreStrongAssign(&self->_locale_, loc);
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_, tz, loc)
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_, tz, loc)
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(self, tz, loc, lenient, false);
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_, tz, loc, lenient)
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_, tz, loc, lenient)
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon) {
  JavaTextDateFormat_init(self);
  self->_tzSerializedWithColon_ = false;
  JreStrongAssign(&self->_timezone_, tz);
  JreStrongAssign(&self->_locale_, loc);
  JreStrongAssign(&self->_lenient_, lenient);
  self->_tzSerializedWithColon_ = formatTzOffsetWithColon;
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_, tz, loc, lenient, formatTzOffsetWithColon)
}

ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindUtilStdDateFormat, initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_, tz, loc, lenient, formatTzOffsetWithColon)
}

JavaUtilTimeZone *ComFasterxmlJacksonDatabindUtilStdDateFormat_getDefaultTimeZone() {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  return ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
}

JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_getISO8601FormatWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601, ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601, tz, loc, nil);
}

JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_getRFC1123FormatWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  return ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123, ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123, tz, loc, nil);
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  jint tens = value / 10;
  if (tens == 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:(jchar) ('0' + tens)];
    value -= 10 * tens;
  }
  [buffer appendWithChar:(jchar) ('0' + value)];
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad3WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  jint h = value / 100;
  if (h == 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:(jchar) ('0' + h)];
    value -= (h * 100);
  }
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, value);
}

void ComFasterxmlJacksonDatabindUtilStdDateFormat_pad4WithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  jint h = value / 100;
  if (h == 0) {
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'])) appendWithChar:'0'];
  }
  else {
    ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, h);
    value -= (100 * h);
  }
  ComFasterxmlJacksonDatabindUtilStdDateFormat_pad2WithJavaLangStringBuffer_withInt_(buffer, value);
}

JavaUtilDate *ComFasterxmlJacksonDatabindUtilStdDateFormat__parseDateFromLongWithNSString_withJavaTextParsePosition_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, NSString *longStr, JavaTextParsePosition *pos) {
  jlong ts;
  @try {
    ts = ComFasterxmlJacksonCoreIoNumberInput_parseLongWithNSString_(longStr);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(NSString_java_formatWithNSString_withNSObjectArray_(@"Timestamp value %s out of 64-bit value range", [IOSObjectArray arrayWithObjects:(id[]){ longStr } count:1 type:NSObject_class_()]), [((JavaTextParsePosition *) nil_chk(pos)) getErrorIndex]);
  }
  return create_JavaUtilDate_initWithLong_(ts);
}

jint ComFasterxmlJacksonDatabindUtilStdDateFormat__parse4DWithNSString_withInt_(NSString *str, jint index) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  return (1000 * ([((NSString *) nil_chk(str)) charAtWithInt:index] - '0')) + (100 * ([str charAtWithInt:index + 1] - '0')) + (10 * ([str charAtWithInt:index + 2] - '0')) + ([str charAtWithInt:index + 3] - '0');
}

jint ComFasterxmlJacksonDatabindUtilStdDateFormat__parse2DWithNSString_withInt_(NSString *str, jint index) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  return (10 * ([((NSString *) nil_chk(str)) charAtWithInt:index] - '0')) + ([str charAtWithInt:index + 1] - '0');
}

JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat__cloneFormatWithJavaTextDateFormat_withNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaTextDateFormat *df, NSString *format, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  if (![((JavaUtilLocale *) nil_chk(loc)) isEqual:ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE]) {
    df = create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(format, loc);
    [df setTimeZoneWithJavaUtilTimeZone:(tz == nil) ? ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE : tz];
  }
  else {
    df = (JavaTextDateFormat *) cast_chk([((JavaTextDateFormat *) nil_chk(df)) java_clone], [JavaTextDateFormat class]);
    if (tz != nil) {
      [((JavaTextDateFormat *) nil_chk(df)) setTimeZoneWithJavaUtilTimeZone:tz];
    }
  }
  if (lenient != nil) {
    [((JavaTextDateFormat *) nil_chk(df)) setLenientWithBoolean:[lenient booleanValue]];
  }
  return df;
}

jboolean ComFasterxmlJacksonDatabindUtilStdDateFormat__equalsWithId_withId_(id value1, id value2) {
  ComFasterxmlJacksonDatabindUtilStdDateFormat_initialize();
  if (value1 == value2) {
    return true;
  }
  return (value1 != nil) && [nil_chk(value1) isEqual:value2];
}

IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindUtilStdDateFormat)
