//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/package-info.java
//

/*!
 @brief Basic data binding (mapping) functionality that
 allows for reading JSON content into Java Objects (POJOs)
 and JSON Trees (<code>com.fasterxml.jackson.databind.JsonNode</code>), as well as
 writing Java Objects and trees as JSON.
 Reading and writing (as well as related additional functionality) is accessed through
 <code>com.fasterxml.jackson.databind.ObjectMapper</code>,
 <code>com.fasterxml.jackson.databind.ObjectReader</code> and
 <code>com.fasterxml.jackson.databind.ObjectWriter</code>
  classes.
  In addition to reading and writing JSON content, it is also possible to use the
  general databinding functionality for many other data formats, using
  Jackson extension modules that provide such support: if so, you typically
  simply construct an <code>com.fasterxml.jackson.databind.ObjectMapper</code> with
  different underlying streaming parser, generator implementation.
 <p>
 The main starting point for operations is <code>com.fasterxml.jackson.databind.ObjectMapper</code>,
 which can be used either directly (via multiple overloaded
 <code>readValue</code>,
 <code>readTree</code>,
 <code>writeValue</code> and
 <code>writeTree</code> methods, or it can be used as a configurable factory for constructing
 fully immutable, thread-safe and reusable <code>com.fasterxml.jackson.databind.ObjectReader</code>
 and <code>com.fasterxml.jackson.databind.ObjectWriter</code> objects.
 <p>
 In addition to simple reading and writing of JSON as POJOs or JSON trees (represented as
 <code>com.fasterxml.jackson.databind.JsonNode</code>, and configurability needed to change aspects
 of reading/writing, mapper contains additional functionality such as:
 <ul>
  <li>Value conversions using <code>com.fasterxml.jackson.databind.ObjectMapper</code>,
   <code>com.fasterxml.jackson.databind.ObjectMapper</code> and
   <code>com.fasterxml.jackson.databind.ObjectMapper</code> methods.
   </li>
  <li>Type introspection needed for things like generation of Schemas (like JSON Schema, Avro Schema, or protoc
    definitions), using <code>com.fasterxml.jackson.databind.ObjectMapper</code>
    (note: actual handles are usually provided by various Jackson modules: mapper simply initiates calling of
    callbacks, based on serializers registered)  
 </li>
 </ul>
 <p>
 Simplest usage is of form:
 @code

   final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!
   MyValue value = new MyValue();
   // ... and configure
   File newState = new File("my-stuff.json");
   mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance
   // or, read
   MyValue older = mapper.readValue(new File("my-older-stuff.json"), MyValue.class);
   // Or if you prefer JSON Tree representation:
   JsonNode root = mapper.readTree(newState);
   // and find values by, for example, using a <code>com.fasterxml.jackson.core.JsonPointer</code> expression:
   int age = root.at("/personal/age").getValueAsInt(); 
 
@endcode
 <p>
 For more usage, refer to
 <code>com.fasterxml.jackson.databind.ObjectMapper</code>,
 <code>com.fasterxml.jackson.databind.ObjectReader</code> and
 <code>com.fasterxml.jackson.databind.ObjectWriter</code>
 Javadocs.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindPackage_info")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindPackage_info
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindPackage_info 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindPackage_info 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindPackage_info

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindPackage_info")
