//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/io/NumberOutput.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/node/NumericNode.h"
#include "com/fasterxml/jackson/databind/node/ShortNode.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@implementation ComFasterxmlJacksonDatabindNodeShortNode

- (instancetype __nonnull)initWithShort:(jshort)v {
  ComFasterxmlJacksonDatabindNodeShortNode_initWithShort_(self, v);
  return self;
}

+ (ComFasterxmlJacksonDatabindNodeShortNode *)valueOfWithShort:(jshort)l {
  return ComFasterxmlJacksonDatabindNodeShortNode_valueOfWithShort_(l);
}

- (ComFasterxmlJacksonCoreJsonToken *)asToken {
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT);
}

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType {
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, INT);
}

- (jboolean)isIntegralNumber {
  return true;
}

- (jboolean)isShort {
  return true;
}

- (jboolean)canConvertToInt {
  return true;
}

- (jboolean)canConvertToLong {
  return true;
}

- (NSNumber *)numberValue {
  return JavaLangShort_valueOfWithShort_(_value_);
}

- (jshort)shortValue {
  return _value_;
}

- (jint)intValue {
  return _value_;
}

- (jlong)longValue {
  return _value_;
}

- (jfloat)floatValue {
  return _value_;
}

- (jdouble)doubleValue {
  return _value_;
}

- (JavaMathBigDecimal *)decimalValue {
  return JavaMathBigDecimal_valueOfWithLong_(_value_);
}

- (JavaMathBigInteger *)bigIntegerValue {
  return JavaMathBigInteger_valueOfWithLong_(_value_);
}

- (NSString *)asText {
  return ComFasterxmlJacksonCoreIoNumberOutput_toStringWithInt_(_value_);
}

- (jboolean)asBooleanWithBoolean:(jboolean)defaultValue {
  return _value_ != 0;
}

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jg
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(jg)) writeNumberWithShort:_value_];
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (o == nil) return false;
  if ([o isKindOfClass:[ComFasterxmlJacksonDatabindNodeShortNode class]]) {
    return ((ComFasterxmlJacksonDatabindNodeShortNode *) cast_chk(o, [ComFasterxmlJacksonDatabindNodeShortNode class]))->_value_ == _value_;
  }
  return false;
}

- (NSUInteger)hash {
  return _value_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeShortNode;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser_NumberType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:);
  methods[1].selector = @selector(valueOfWithShort:);
  methods[2].selector = @selector(asToken);
  methods[3].selector = @selector(numberType);
  methods[4].selector = @selector(isIntegralNumber);
  methods[5].selector = @selector(isShort);
  methods[6].selector = @selector(canConvertToInt);
  methods[7].selector = @selector(canConvertToLong);
  methods[8].selector = @selector(numberValue);
  methods[9].selector = @selector(shortValue);
  methods[10].selector = @selector(intValue);
  methods[11].selector = @selector(longValue);
  methods[12].selector = @selector(floatValue);
  methods[13].selector = @selector(doubleValue);
  methods[14].selector = @selector(decimalValue);
  methods[15].selector = @selector(bigIntegerValue);
  methods[16].selector = @selector(asText);
  methods[17].selector = @selector(asBooleanWithBoolean:);
  methods[18].selector = @selector(serializeWithComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_value_", "S", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "S", "valueOf", "asBoolean", "Z", "serialize", "LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonProcessingException;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindNodeShortNode = { "ShortNode", "com.fasterxml.jackson.databind.node", ptrTable, methods, fields, 7, 0x1, 21, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindNodeShortNode;
}

@end

void ComFasterxmlJacksonDatabindNodeShortNode_initWithShort_(ComFasterxmlJacksonDatabindNodeShortNode *self, jshort v) {
  ComFasterxmlJacksonDatabindNodeNumericNode_init(self);
  self->_value_ = v;
}

ComFasterxmlJacksonDatabindNodeShortNode *new_ComFasterxmlJacksonDatabindNodeShortNode_initWithShort_(jshort v) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindNodeShortNode, initWithShort_, v)
}

ComFasterxmlJacksonDatabindNodeShortNode *create_ComFasterxmlJacksonDatabindNodeShortNode_initWithShort_(jshort v) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindNodeShortNode, initWithShort_, v)
}

ComFasterxmlJacksonDatabindNodeShortNode *ComFasterxmlJacksonDatabindNodeShortNode_valueOfWithShort_(jshort l) {
  ComFasterxmlJacksonDatabindNodeShortNode_initialize();
  return create_ComFasterxmlJacksonDatabindNodeShortNode_initWithShort_(l);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindNodeShortNode)
