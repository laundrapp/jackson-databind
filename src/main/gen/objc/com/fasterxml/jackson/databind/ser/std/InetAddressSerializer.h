//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer))
#define ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdScalarSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContextualSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@class JavaNetInetAddress;
@protocol ComFasterxmlJacksonDatabindBeanProperty;

/*!
 @brief Simple serializer for <code>java.net.InetAddress</code>.Main complexity is
  with registration, since same serializer is to be used for sub-classes.
 <p>
  Since 2.9 allows use of <code>JsonFormat</code> configuration (annotation,
  per-type defaulting) so that if <code>JsonFormat.Shape.NUMBER</code>
  (or <code>ARRAY</code>) is used, will serialize as "host address"
  (dotted numbers) instead of simple conversion.
 */
@interface ComFasterxmlJacksonDatabindSerStdInetAddressSerializer : ComFasterxmlJacksonDatabindSerStdStdScalarSerializer < ComFasterxmlJacksonDatabindSerContextualSerializer > {
 @public
  /*!
   @since 2.9
   */
  jboolean _asNumeric_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)asNumeric;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createContextualWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)serializers
                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (void)serializeWithId:(JavaNetInetAddress *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)serializeWithTypeWithId:(JavaNetInetAddress *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdInetAddressSerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_init(ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *new_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *create_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_initWithBoolean_(ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *self, jboolean asNumeric);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *new_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_initWithBoolean_(jboolean asNumeric) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdInetAddressSerializer *create_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer_initWithBoolean_(jboolean asNumeric);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdInetAddressSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdInetAddressSerializer")
