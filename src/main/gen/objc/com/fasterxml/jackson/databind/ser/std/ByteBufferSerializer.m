//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.h"
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.h"
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.h"
#include "com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.h"
#include "com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream.h"
#include "java/io/InputStream.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"

@implementation ComFasterxmlJacksonDatabindSerStdByteBufferSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdByteBufferSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)serializeWithId:(JavaNioByteBuffer *)bbuf
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  if ([((JavaNioByteBuffer *) nil_chk(bbuf)) hasArray]) {
    [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeBinaryWithByteArray:[bbuf array] withInt:0 withInt:[bbuf limit]];
    return;
  }
  JavaNioByteBuffer *copy_ = [bbuf asReadOnlyBuffer];
  if ([((JavaNioByteBuffer *) nil_chk(copy_)) position] > 0) {
    [copy_ rewind];
  }
  JavaIoInputStream *in = create_ComFasterxmlJacksonDatabindUtilByteBufferBackedInputStream_initWithJavaNioByteBuffer_(copy_);
  [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) writeBinaryWithJavaIoInputStream:in withInt:[copy_ remaining]];
  [in close];
}

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint {
  id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonArrayFormatVisitor> v2 = [((id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>) nil_chk(visitor)) expectArrayFormatWithComFasterxmlJacksonDatabindJavaType:typeHint];
  if (v2 != nil) {
    [v2 itemsFormatWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatTypes:JreLoadEnum(ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatTypes, INTEGER)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[2].selector = @selector(acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:withComFasterxmlJacksonDatabindJavaType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "serialize", "LJavaNioByteBuffer;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;", "acceptJsonFormatVisitor", "LComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;LComFasterxmlJacksonDatabindJavaType;", "LComFasterxmlJacksonDatabindJsonMappingException;", "Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/nio/ByteBuffer;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdByteBufferSerializer = { "ByteBufferSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 6, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdByteBufferSerializer;
}

@end

void ComFasterxmlJacksonDatabindSerStdByteBufferSerializer_init(ComFasterxmlJacksonDatabindSerStdByteBufferSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_(self, JavaNioByteBuffer_class_());
}

ComFasterxmlJacksonDatabindSerStdByteBufferSerializer *new_ComFasterxmlJacksonDatabindSerStdByteBufferSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdByteBufferSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdByteBufferSerializer *create_ComFasterxmlJacksonDatabindSerStdByteBufferSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdByteBufferSerializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdByteBufferSerializer)
