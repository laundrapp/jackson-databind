//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers || defined(INCLUDE_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers))
#define ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers_

#define RESTRICT_ComFasterxmlJacksonDatabindDeserKeyDeserializers 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserKeyDeserializers 1
#include "com/fasterxml/jackson/databind/deser/KeyDeserializers.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class IOSClass;
@class JavaUtilHashMap;

/*!
 @brief Simple implementation <code>KeyDeserializers</code> which allows registration of
  deserializers based on raw (type erased class).
 It can work well for basic bean and scalar type deserializers, but is not
  a good fit for handling generic types (like <code>Map</code>s and <code>Collection</code>s
  or array types).
 <p>
  Unlike <code>SimpleSerializers</code>, this class does not currently support generic mappings;
  all mappings must be to exact declared deserialization type.
 */
@interface ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers : NSObject < ComFasterxmlJacksonDatabindDeserKeyDeserializers, JavaIoSerializable > {
 @public
  JavaUtilHashMap *_classMappings_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *)addDeserializerWithIOSClass:(IOSClass *)forClass
                                          withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)deser;

- (ComFasterxmlJacksonDatabindKeyDeserializer *)findKeyDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                      withComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers, _classMappings_, JavaUtilHashMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers_init(ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *new_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers *create_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleKeyDeserializers")
