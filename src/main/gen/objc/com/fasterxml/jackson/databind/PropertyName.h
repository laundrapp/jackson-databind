//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/PropertyName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindPropertyName")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindPropertyName
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindPropertyName 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindPropertyName 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindPropertyName

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindPropertyName_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindPropertyName || defined(INCLUDE_ComFasterxmlJacksonDatabindPropertyName))
#define ComFasterxmlJacksonDatabindPropertyName_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindCfgMapperConfig;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief Simple value class used for containing names of properties as defined
  by annotations (and possibly other configuration sources).
 @since 2.1
 */
@interface ComFasterxmlJacksonDatabindPropertyName : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief Basic name of the property.
   */
  NSString *_simpleName_;
  /*!
   @brief Additional namespace, for formats that have such concept (JSON
  does not, XML does, for example).
   */
  NSString *_namespace_;
  /*!
   @brief Lazily-constructed efficient representation of the simple name.
   <p>
  NOTE: not defined as volatile to avoid performance problem with
  concurrent access in multi-core environments; due to statelessness
  of <code>SerializedString</code> at most leads to multiple instantiations.
   @since 2.4
   */
  id<ComFasterxmlJacksonCoreSerializableString> _encodedSimple_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)simpleName;

- (instancetype __nonnull)initWithNSString:(NSString *)simpleName
                              withNSString:(NSString *)namespace_;

/*!
 @since 2.6
 */
+ (ComFasterxmlJacksonDatabindPropertyName *)constructWithNSString:(NSString *)simpleName;

+ (ComFasterxmlJacksonDatabindPropertyName *)constructWithNSString:(NSString *)simpleName
                                                      withNSString:(NSString *)ns;

- (jboolean)isEqual:(id)o;

- (NSString *)getNamespace;

- (NSString *)getSimpleName;

- (NSUInteger)hash;

- (jboolean)hasNamespace;

- (jboolean)hasSimpleName;

/*!
 @since 2.3
 */
- (jboolean)hasSimpleNameWithNSString:(NSString *)str;

- (ComFasterxmlJacksonDatabindPropertyName *)internSimpleName;

/*!
 @brief Method that is basically equivalent of:
 @code

    !
 hasSimpleName() &lt;&lt; !hasNamespace();
 
@endcode
 @since 2.4
 */
- (jboolean)isEmpty;

/*!
 @brief Accessor that may be used to get lazily-constructed efficient
  representation of the simple name.
 @since 2.4
 */
- (id<ComFasterxmlJacksonCoreSerializableString>)simpleAsEncodedWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config;

- (NSString *)description;

/*!
 @brief Fluent factory method for constructing an instance with different
  namespace.
 */
- (ComFasterxmlJacksonDatabindPropertyName *)withNamespaceWithNSString:(NSString *)ns;

/*!
 @brief Fluent factory method for constructing an instance with different
  simple name.
 */
- (ComFasterxmlJacksonDatabindPropertyName *)withSimpleNameWithNSString:(NSString *)simpleName;

#pragma mark Protected

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindPropertyName)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindPropertyName, _simpleName_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindPropertyName, _namespace_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindPropertyName, _encodedSimple_, id<ComFasterxmlJacksonCoreSerializableString>)

/*!
 @brief Special placeholder value that indicates that name to use should be
  based on the standard heuristics.This can be different from returning
  null, as null means "no information available, whereas this value
  indicates explicit defaulting.
 */
inline ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_get_USE_DEFAULT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_USE_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindPropertyName, USE_DEFAULT, ComFasterxmlJacksonDatabindPropertyName *)

/*!
 @brief Special placeholder value that indicates that there is no name associated.
 Exact semantics to use (if any) depend on actual annotation in use, but
  commonly this value disables behavior for which name would be needed.
 */
inline ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_get_NO_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_NO_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindPropertyName, NO_NAME, ComFasterxmlJacksonDatabindPropertyName *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindPropertyName_initWithNSString_(ComFasterxmlJacksonDatabindPropertyName *self, NSString *simpleName);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *new_ComFasterxmlJacksonDatabindPropertyName_initWithNSString_(NSString *simpleName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *create_ComFasterxmlJacksonDatabindPropertyName_initWithNSString_(NSString *simpleName);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindPropertyName_initWithNSString_withNSString_(ComFasterxmlJacksonDatabindPropertyName *self, NSString *simpleName, NSString *namespace_);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *new_ComFasterxmlJacksonDatabindPropertyName_initWithNSString_withNSString_(NSString *simpleName, NSString *namespace_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *create_ComFasterxmlJacksonDatabindPropertyName_initWithNSString_withNSString_(NSString *simpleName, NSString *namespace_);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_constructWithNSString_(NSString *simpleName);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindPropertyName *ComFasterxmlJacksonDatabindPropertyName_constructWithNSString_withNSString_(NSString *simpleName, NSString *ns);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindPropertyName)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindPropertyName")
