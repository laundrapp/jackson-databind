//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerializationFeature")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerializationFeature
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerializationFeature 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerializationFeature 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerializationFeature

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerializationFeature_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerializationFeature || defined(INCLUDE_ComFasterxmlJacksonDatabindSerializationFeature))
#define ComFasterxmlJacksonDatabindSerializationFeature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#define INCLUDE_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#include "com/fasterxml/jackson/databind/cfg/ConfigFeature.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindSerializationFeature_Enum) {
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRAP_ROOT_VALUE = 0,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_INDENT_OUTPUT = 1,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_FAIL_ON_EMPTY_BEANS = 2,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_FAIL_ON_SELF_REFERENCES = 3,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRAP_EXCEPTIONS = 4,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS = 5,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_CLOSE_CLOSEABLE = 6,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_FLUSH_AFTER_WRITE_VALUE = 7,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_DATES_AS_TIMESTAMPS = 8,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_DATE_KEYS_AS_TIMESTAMPS = 9,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_DATES_WITH_ZONE_ID = 10,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_DURATIONS_AS_TIMESTAMPS = 11,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS = 12,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_ENUMS_USING_TO_STRING = 13,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_ENUMS_USING_INDEX = 14,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_NULL_MAP_VALUES = 15,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_EMPTY_JSON_ARRAYS = 16,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED = 17,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_BIGDECIMAL_AS_PLAIN = 18,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS = 19,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_ORDER_MAP_ENTRIES_BY_KEYS = 20,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_EAGER_SERIALIZER_FETCH = 21,
  ComFasterxmlJacksonDatabindSerializationFeature_Enum_USE_EQUALITY_FOR_OBJECT_ID = 22,
};

/*!
 @brief Enumeration that defines simple on/off features that affect
  the way Java objects are serialized.
 <p>
  Note that features can be set both through 
 <code>ObjectMapper</code> (as sort of defaults) and through 
 <code>ObjectWriter</code>.
  In first case these defaults must follow "config-then-use" patterns
  (i.e. defined once, not changed afterwards); all per-call
  changes must be done using <code>ObjectWriter</code>.
 */
@interface ComFasterxmlJacksonDatabindSerializationFeature : JavaLangEnum < ComFasterxmlJacksonDatabindCfgConfigFeature >

#pragma mark Public

- (jboolean)enabledByDefault;

- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonDatabindSerializationFeature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerializationFeature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_values_[];

/*!
 @brief Feature that can be enabled to make root value (usually JSON
  Object but can be any type) wrapped within a single property
  JSON object, where key as the "root name", as determined by
  annotation introspector (esp.for JAXB that uses 
 <code>@@XmlRootElement.name</code>) or fallback (non-qualified
  class name).
 Feature is mostly intended for JAXB compatibility.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRAP_ROOT_VALUE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRAP_ROOT_VALUE)

/*!
 @brief Feature that allows enabling (or disabling) indentation
  for the underlying generator, using the default pretty
  printer configured for <code>ObjectMapper</code> (and 
 <code>ObjectWriter</code>s created from mapper).
 <p>
  Note that the default pretty printer is only used if
  no explicit <code>com.fasterxml.jackson.core.PrettyPrinter</code> has been configured
  for the generator or <code>ObjectWriter</code>.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_INDENT_OUTPUT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, INDENT_OUTPUT)

/*!
 @brief Feature that determines what happens when no accessors are
  found for a type (and there are no annotations to indicate
  it is meant to be serialized).If enabled (default), an
  exception is thrown to indicate these as non-serializable
  types; if disabled, they are serialized as empty Objects,
  i.e. without any properties.
 <p>
  Note that empty types that this feature has only effect on
  those "empty" beans that do not have any recognized annotations
  (like <code>@@JsonSerialize</code>): ones that do have annotations
  do not result in an exception being thrown.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_FAIL_ON_EMPTY_BEANS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, FAIL_ON_EMPTY_BEANS)

/*!
 @brief Feature that determines what happens when a direct self-reference
  is detected by a POJO (and no Object Id handling is enabled for it):
  either a <code>JsonMappingException</code> is
  thrown (if true), or reference is normally processed (false).
 <p>
  Feature is enabled by default.
 @since 2.4
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_FAIL_ON_SELF_REFERENCES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, FAIL_ON_SELF_REFERENCES)

/*!
 @brief Feature that determines whether Jackson code should catch
  and wrap <code>Exception</code>s (but never <code>Error</code>s!)
 to add additional information about
  location (within input) of problem or not.If enabled,
  most exceptions will be caught and re-thrown (exception
  specifically being that <code>java.io.IOException</code>s may be passed
  as is, since they are declared as throwable); this can be
  convenient both in that all exceptions will be checked and
  declared, and so there is more contextual information.
  However, sometimes calling application may just want "raw"
  unchecked exceptions passed as is.
 <p>
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRAP_EXCEPTIONS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRAP_EXCEPTIONS)

/*!
 @brief Feature that determines what happens when an object which
  normally has type information included by Jackson is used
  in conjunction with <code>com.fasterxml.jackson.annotation.JsonUnwrapped</code>.
 In the default (enabled) state, an error will be thrown when
  an unwrapped object has type information. When disabled, the
  object will be unwrapped and the type information discarded.
 <p>
  Feature is enabled by default.
 @since 2.4
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)

/*!
 @brief Feature that determines whether <code>close</code> method of
  serialized <b>root level</b> objects (ones for which <code>ObjectMapper</code>'s
  writeValue() (or equivalent) method is called)
  that implement <code>java.io.Closeable</code>
  is called after serialization or not.If enabled, <b>close()</b> will
  be called after serialization completes (whether succesfully, or
  due to an error manifested by an exception being thrown).
 You can
  think of this as sort of "finally" processing.
 <p>
  NOTE: only affects behavior with <b>root</b> objects, and not other
  objects reachable from the root object. Put another way, only one
  call will be made for each 'writeValue' call.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_CLOSE_CLOSEABLE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, CLOSE_CLOSEABLE)

/*!
 @brief Feature that determines whether <code>JsonGenerator.flush()</code> is
  called after <code>writeValue()</code> method <b>that takes JsonGenerator
  as an argument</b> completes (i.e.does NOT affect methods
  that use other destinations); same for methods in <code>ObjectWriter</code>.
 This usually makes sense; but there are cases where flushing
  should not be forced: for example when underlying stream is
  compressing and flush() causes compression state to be flushed
  (which occurs with some compression codecs).
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_FLUSH_AFTER_WRITE_VALUE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, FLUSH_AFTER_WRITE_VALUE)

/*!
 @brief Feature that determines whether Date (and date/time) values
  (and Date-based things like <code>java.util.Calendar</code>s) are to be
  serialized as numeric timestamps (true; the default),
  or as something else (usually textual representation).
 If textual representation is used, the actual format is
  one returned by a call to 
 <code>com.fasterxml.jackson.databind.SerializationConfig</code>:
  the default setting being <code>com.fasterxml.jackson.databind.util.StdDateFormat</code>,
  which corresponds to format String of "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
  (see <code>java.text.DateFormat</code> for details of format Strings).
 <p>
  Note: whether this feature affects handling of other date-related
  types depend on handlers of those types, although ideally they
  should use this feature
 <p>
  Note: whether <code>java.util.Map</code> keys are serialized as Strings
  or not is controlled using <code>WRITE_DATE_KEYS_AS_TIMESTAMPS</code>.
 <p>
  Feature is enabled by default, so that date/time are by default
  serialized as timestamps.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_DATES_AS_TIMESTAMPS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_DATES_AS_TIMESTAMPS)

/*!
 @brief Feature that determines whether <code>java.util.Date</code>s
  (and sub-types) used as <code>java.util.Map</code> keys are serialized
  as timestamps or not (if not, will be serialized as textual
  values).
 <p>
  Default value is 'false', meaning that Date-valued Map keys are serialized
  as textual (ISO-8601) values.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_DATE_KEYS_AS_TIMESTAMPS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_DATE_KEYS_AS_TIMESTAMPS)

/*!
 @brief Feature that determines whether date/date-time values should be serialized
  so that they include timezone id, in cases where type itself contains
  timezone information.Including this information may lead to compatibility
  issues because ISO-8601 specification does not define formats that include
  such information.
 <p>
  If enabled, Timezone id should be included using format specified
  with Java 8 <code>DateTimeFormatter#ISO_ZONED_DATE_TIME</code> definition
  (for example, '2011-12-03T10:15:30+01:00[Europe/Paris]').
 <p>
  Note: setting has no relevance if date/time values are serialized as timestamps.
 <p>
  Feature is disabled by default, so that zone id is NOT included; rather, timezone
  offset is used for ISO-8601 compatibility (if any timezone information is
  included in value).
 @since 2.6
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_DATES_WITH_ZONE_ID(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_DATES_WITH_ZONE_ID)

/*!
 @brief Feature that determines whether time values that represents time periods
  (durations, periods, ranges) are to be serialized by default using
  a numeric (true) or textual (false) representations.Note that numeric
  representation may mean either simple number, or an array of numbers,
  depending on type.
 <p>
  Note: whether <code>java.util.Map</code> keys are serialized as Strings
  or not is controlled using <code>WRITE_DATE_KEYS_AS_TIMESTAMPS</code>.
 <p>
  Feature is enabled by default, so that period/duration are by default
  serialized as timestamps.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_DURATIONS_AS_TIMESTAMPS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_DURATIONS_AS_TIMESTAMPS)

/*!
 @brief Feature that determines how type <code>char[]</code> is serialized:
  when enabled, will be serialized as an explict JSON array (with
  single-character Strings as values); when disabled, defaults to
  serializing them as Strings (which is more compact).
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS)

/*!
 @brief Feature that determines standard serialization mechanism used for
  Enum values: if enabled, return value of <code>Enum.toString()</code>
  is used; if disabled, return value of <code>Enum.name()</code> is used.
 <p>
  Note: this feature should usually have same value
  as <code>DeserializationFeature.READ_ENUMS_USING_TO_STRING</code>.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_ENUMS_USING_TO_STRING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_ENUMS_USING_TO_STRING)

/*!
 @brief Feature that determines whethere Java Enum values are serialized
  as numbers (true), or textual values (false).If textual values are
  used, other settings are also considered.
 If this feature is enabled,
   return value of <code>Enum.ordinal()</code>
  (an integer) will be used as the serialization.
 <p>
  Note that this feature has precedence over <code>WRITE_ENUMS_USING_TO_STRING</code>,
  which is only considered if this feature is set to false.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_ENUMS_USING_INDEX(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_ENUMS_USING_INDEX)

/*!
 @brief Feature that determines whether Map entries with null values are
  to be serialized (true) or not (false).
 <p>
  NOTE: unlike other <code>SerializationFeature</code>s, this feature <b>cannot</b> be
  dynamically changed on per-call basis, because its effect is considered during
  construction of serializers and property handlers.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_NULL_MAP_VALUES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_NULL_MAP_VALUES)

/*!
 @brief Feature that determines whether Container properties (POJO properties
  with declared value of Collection or array; i.e.things that produce JSON
  arrays) that are empty (have no elements)
  will be serialized as empty JSON arrays (true), or suppressed from output (false).
 <p>
  Note that this does not change behavior of <code>java.util.Map</code>s, or
  "Collection-like" types.
 <p>
  NOTE: unlike other <code>SerializationFeature</code>s, this feature <b>cannot</b> be
  dynamically changed on per-call basis, because its effect is considered during
  construction of serializers and property handlers.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_EMPTY_JSON_ARRAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_EMPTY_JSON_ARRAYS)

/*!
 @brief Feature added for interoperability, to work with oddities of
  so-called "BadgerFish" convention.
 Feature determines handling of single element <code>java.util.Collection</code>s
  and arrays: if enabled, <code>java.util.Collection</code>s and arrays that contain exactly
  one element will be serialized as if that element itself was serialized.
 <p>
  When enabled, a POJO with array that normally looks like this:
 @code

   { "arrayProperty" : [ 1 ] }
 
@endcode
  will instead be serialized as
 @code

   { "arrayProperty" : 1 }
 
@endcode
 <p>
  Note that this feature is counterpart to <code>DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY</code>
  (that is, usually both are enabled, or neither is).
 <p>
  Feature is disabled by default, so that no special handling is done.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)

/*!
 @brief Feature that determines whether <code>java.math.BigDecimal</code> entries are
  serialized using <code>java.math.BigDecimal</code> to prevent
  values to be written using scientific notation.
 <p>
  NOTE: since this feature typically requires use of 
 <code>com.fasterxml.jackson.core.JsonGenerator</code>
  it may cause compatibility problems since not all <code>com.fasterxml.jackson.core.JsonGenerator</code>
  implementations support such mode of output: usually only text-based formats
  support it.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_BIGDECIMAL_AS_PLAIN(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_BIGDECIMAL_AS_PLAIN)

/*!
 @brief Feature that controls whether numeric timestamp values are
  to be written using nanosecond timestamps (enabled) or not (disabled); 
 <b>if and only if</b> datatype supports such resolution.
 Only newer datatypes (such as Java8 Date/Time) support such resolution --
  older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --
  and this setting <b>has no effect</b> on such types.
 <p>
  If disabled, standard millisecond timestamps are assumed.
  This is the counterpart to <code>SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS</code>.
 <p>
  Feature is enabled by default, to support most accurate time values possible.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS)

/*!
 @brief Feature that determines whether <code>java.util.Map</code> entries are first
  sorted by key before serialization or not: if enabled, additional sorting
  step is performed if necessary (not necessary for <code>java.util.SortedMap</code>s),
  if disabled, no additional sorting is needed.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_ORDER_MAP_ENTRIES_BY_KEYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, ORDER_MAP_ENTRIES_BY_KEYS)

/*!
 @brief Feature that determines whether <code>ObjectWriter</code> should
  try to eagerly fetch necessary <code>JsonSerializer</code> when
  possible.This improves performance in cases where similarly
  configured <code>ObjectWriter</code> instance is used multiple
  times; and should not significantly affect single-use cases.
 <p>
  Note that there should not be any need to normally disable this
  feature: only consider that if there are actual perceived problems.
 <p>
  Feature is enabled by default.
 @since 2.1
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_EAGER_SERIALIZER_FETCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, EAGER_SERIALIZER_FETCH)

/*!
 @brief Feature that determines whether Object Identity is compared using
  true JVM-level identity of Object (false); or, <code>equals()</code> method.
 Latter is sometimes useful when dealing with Database-bound objects with
  ORM libraries (like Hibernate). Note that Object itself is actually compared,
  and NOT Object Id; naming of this feature is somewhat confusing, so it is important
  that Object <b>for which identity is to be preserved</b> are considered equal,
  above and beyond ids (which are always compared using equality anyway).
 <p>
  NOTE: due to the way functionality is implemented, it is very important that
  in addition to overriding <code>Object.equals</code> for Objects to match (to be considered
  "same") it is also necessary to ensure that <code>Object.hashCode()</code> is overridden
  to produce the exact same value for equal instances.
 <p>
  Feature is disabled by default; meaning that strict identity is used, not 
 <code>equals()</code>
 @since 2.3
 */
inline ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_get_USE_EQUALITY_FOR_OBJECT_ID(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindSerializationFeature, USE_EQUALITY_FOR_OBJECT_ID)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindSerializationFeature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerializationFeature *ComFasterxmlJacksonDatabindSerializationFeature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerializationFeature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerializationFeature")
