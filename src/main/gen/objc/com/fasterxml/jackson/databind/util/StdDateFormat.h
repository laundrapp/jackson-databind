//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilStdDateFormat")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilStdDateFormat
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilStdDateFormat 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilStdDateFormat 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilStdDateFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilStdDateFormat_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilStdDateFormat || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilStdDateFormat))
#define ComFasterxmlJacksonDatabindUtilStdDateFormat_

#define RESTRICT_JavaTextDateFormat 1
#define INCLUDE_JavaTextDateFormat 1
#include "java/text/DateFormat.h"

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangStringBuffer;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilRegexPattern;
@class JavaUtilTimeZone;

/*!
 @brief Default <code>DateFormat</code> implementation used by standard Date
  serializers and deserializers.For serialization defaults to using
  an ISO-8601 compliant format (format String "yyyy-MM-dd'T'HH:mm:ss.SSSZ")
  and for deserialization, both ISO-8601 and RFC-1123.
 */
@interface ComFasterxmlJacksonDatabindUtilStdDateFormat : JavaTextDateFormat {
 @public
  /*!
   @brief Caller may want to explicitly override timezone to use; if so,
  we will have non-null value here.
   */
  JavaUtilTimeZone *_timezone_;
  JavaUtilLocale *_locale_;
  /*!
   @brief Explicit override for leniency, if specified.
   <p>
  Cannot be `final` because <code>setLenient(boolean)</code> returns
  `void`.
   @since 2.7
   */
  JavaLangBoolean *_lenient_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc;

- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)java_clone;

- (jboolean)isEqual:(id)o;

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition;

+ (JavaUtilTimeZone *)getDefaultTimeZone;

/*!
 @brief Method for getting a non-shared DateFormat instance
  that uses specified timezone and can handle simple ISO-8601
  compliant date format.
 @since 2.4
 */
+ (JavaTextDateFormat *)getISO8601FormatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                          withJavaUtilLocale:(JavaUtilLocale *)loc;

/*!
 @brief Method for getting a non-shared DateFormat instance
  that uses specific timezone and can handle RFC-1123
  compliant date format.
 @since 2.4
 */
+ (JavaTextDateFormat *)getRFC1123FormatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                          withJavaUtilLocale:(JavaUtilLocale *)loc;

- (JavaUtilTimeZone *)getTimeZone;

- (NSUInteger)hash;

/*!
 @brief Accessor for checking whether this instance would include colon
  within timezone serialization or not: if {code true}, timezone offset
  is serialized like <code>-06:00</code>; if {code false} as <code>-0600</code>.
 <p>
  NOTE: only relevant for serialization (formatting), as deserialization
  (parsing) always accepts optional colon but does not require it, regardless
  of this setting.
 @return <code>true</code> if a colon is to be inserted between the hours and minutes 
  of the TZ offset when serializing as String; otherwise <code>false</code>
 @since 2.9.1
 */
- (jboolean)isColonIncludedInTimeZone;

- (jboolean)isLenient;

- (JavaUtilDate *)parseWithNSString:(NSString *)dateStr;

- (JavaUtilDate *)parseWithNSString:(NSString *)dateStr
          withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Need to override since we need to keep track of leniency locally,
  and not via underlying <code>Calendar</code> instance like base class
  does.
 */
- (void)setLenientWithBoolean:(jboolean)enabled;

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

- (NSString *)toPattern;

- (NSString *)description;

/*!
 @brief "Mutant factory" method that will return an instance that has specified
  handling of colon when serializing timezone (timezone either written
  like <code>+0500</code> or <code>+05:00</code>):
  either <code>this</code> instance (if setting would not change), or newly
  constructed instance with desired setting for colon inclusion.
 <p>
  NOTE: does NOT affect deserialization as colon is optional accepted
  but not required -- put another way, either serialization is accepted
  by this class.
 @since 2.9.1
 */
- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withColonInTimeZoneWithBoolean:(jboolean)b;

/*!
 @brief "Mutant factory" method that will return an instance that has specified leniency
  setting: either <code>this</code> instance (if setting would not change), or newly
  constructed instance.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withLenientWithJavaLangBoolean:(JavaLangBoolean *)b;

/*!
 @brief "Mutant factory" method that will return an instance that uses specified 
 <code>Locale</code>:
  either <code>this</code> instance (if setting would not change), or newly
  constructed instance with different <code>Locale</code> to use.
 */
- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)loc;

/*!
 @brief Method used for creating a new instance with specified timezone;
  if no timezone specified, defaults to the default timezone (UTC).
 */
- (ComFasterxmlJacksonDatabindUtilStdDateFormat *)withTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

#pragma mark Protected

- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc
                               withJavaLangBoolean:(JavaLangBoolean *)lenient;

/*!
 @since 2.9.1
 */
- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                withJavaUtilLocale:(JavaUtilLocale *)loc
                               withJavaLangBoolean:(JavaLangBoolean *)lenient
                                       withBoolean:(jboolean)formatTzOffsetWithColon;

- (void)_clearFormats;

+ (jboolean)_equalsWithId:(id)value1
                   withId:(id)value2;

- (void)_formatWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                 withJavaUtilLocale:(JavaUtilLocale *)loc
                   withJavaUtilDate:(JavaUtilDate *)date
           withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer;

- (JavaUtilCalendar *)_getCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

- (JavaUtilDate *)_parseAsISO8601WithNSString:(NSString *)dateStr
                    withJavaTextParsePosition:(JavaTextParsePosition *)bogus;

- (JavaUtilDate *)_parseDateWithNSString:(NSString *)dateStr
               withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Helper method used to figure out if input looks like valid
  ISO-8601 string.
 */
- (jboolean)looksLikeISO8601WithNSString:(NSString *)dateStr;

- (JavaUtilDate *)parseAsISO8601WithNSString:(NSString *)dateStr
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos;

- (JavaUtilDate *)parseAsRFC1123WithNSString:(NSString *)dateStr
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindUtilStdDateFormat)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilStdDateFormat, _timezone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilStdDateFormat, _locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilStdDateFormat, _lenient_, JavaLangBoolean *)

inline NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_PATTERN_PLAIN_STR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN_STR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, PATTERN_PLAIN_STR, NSString *)

inline JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_PATTERN_PLAIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_PLAIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, PATTERN_PLAIN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_PATTERN_ISO8601(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ComFasterxmlJacksonDatabindUtilStdDateFormat_PATTERN_ISO8601;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, PATTERN_ISO8601, JavaUtilRegexPattern *)

/*!
 @brief Defines a commonly used date format that conforms
  to ISO-8601 date formatting standard, when it includes basic undecorated
  timezone definition.
 */
inline NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DATE_FORMAT_STR_ISO8601(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_ISO8601;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DATE_FORMAT_STR_ISO8601, NSString *)

/*!
 @brief ISO-8601 with just the Date part, no time: needed for error messages
 */
inline NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DATE_FORMAT_STR_PLAIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_PLAIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DATE_FORMAT_STR_PLAIN, NSString *)

/*!
 @brief This constant defines the date format specified by
  RFC 1123 / RFC 822.Used for parsing via `SimpleDateFormat` as well as
  error messages.
 */
inline NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DATE_FORMAT_STR_RFC1123(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_STR_RFC1123;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DATE_FORMAT_STR_RFC1123, NSString *)

/*!
 @brief For error messages we'll also need a list of all formats.
 */
inline IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_ALL_FORMATS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindUtilStdDateFormat_ALL_FORMATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, ALL_FORMATS, IOSObjectArray *)

/*!
 @brief By default we use UTC for everything, with Jackson 2.7 and later
  (2.6 and earlier relied on GMT)
 */
inline JavaUtilTimeZone *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DEFAULT_TIMEZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilTimeZone *ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_TIMEZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DEFAULT_TIMEZONE, JavaUtilTimeZone *)

inline JavaUtilLocale *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DEFAULT_LOCALE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLocale *ComFasterxmlJacksonDatabindUtilStdDateFormat_DEFAULT_LOCALE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DEFAULT_LOCALE, JavaUtilLocale *)

inline JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DATE_FORMAT_RFC1123(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_RFC1123;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DATE_FORMAT_RFC1123, JavaTextDateFormat *)

inline JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_DATE_FORMAT_ISO8601(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_DATE_FORMAT_ISO8601;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, DATE_FORMAT_ISO8601, JavaTextDateFormat *)

/*!
 @brief A singleton instance can be used for cloning purposes, as a blueprint of sorts.
 */
inline ComFasterxmlJacksonDatabindUtilStdDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, instance, ComFasterxmlJacksonDatabindUtilStdDateFormat *)

/*!
 @brief Blueprint "Calendar" instance for use during formatting.Cannot be used as is,
  due to thread-safety issues, but can be used for constructing actual instances 
  more cheaply by cloning.
 @since 2.9.1
 */
inline JavaUtilCalendar *ComFasterxmlJacksonDatabindUtilStdDateFormat_get_CALENDAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilCalendar *ComFasterxmlJacksonDatabindUtilStdDateFormat_CALENDAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilStdDateFormat, CALENDAR, JavaUtilCalendar *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilStdDateFormat_init(ComFasterxmlJacksonDatabindUtilStdDateFormat *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(ComFasterxmlJacksonDatabindUtilStdDateFormat *self, JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *new_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilStdDateFormat *create_ComFasterxmlJacksonDatabindUtilStdDateFormat_initWithJavaUtilTimeZone_withJavaUtilLocale_withJavaLangBoolean_withBoolean_(JavaUtilTimeZone *tz, JavaUtilLocale *loc, JavaLangBoolean *lenient, jboolean formatTzOffsetWithColon);

FOUNDATION_EXPORT JavaUtilTimeZone *ComFasterxmlJacksonDatabindUtilStdDateFormat_getDefaultTimeZone(void);

FOUNDATION_EXPORT JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_getISO8601FormatWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc);

FOUNDATION_EXPORT JavaTextDateFormat *ComFasterxmlJacksonDatabindUtilStdDateFormat_getRFC1123FormatWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *tz, JavaUtilLocale *loc);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonDatabindUtilStdDateFormat__equalsWithId_withId_(id value1, id value2);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilStdDateFormat)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilStdDateFormat")
