//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerResolvableSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerResolvableSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerResolvableSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerResolvableSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerResolvableSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerResolvableSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerResolvableSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerResolvableSerializer))
#define ComFasterxmlJacksonDatabindSerResolvableSerializer_

@class ComFasterxmlJacksonDatabindSerializerProvider;

/*!
 @brief Interface used to indicate serializers that want to do post-processing
  after construction and being added to <code>SerializerProvider</code>,
  but before being used.This is typically used to resolve references
  to other contained types; for example, bean serializers use this
  to eagerly find serializers for contained field types.
 <p>
  Note that in cases where serializer needs both contextualization and
  resolution -- that is, implements both this interface and <code>ContextualSerializer</code>
  -- resolution via this interface occurs first, and contextual
  resolution (using <code>ContextualSerializer</code>) later on.
 */
@protocol ComFasterxmlJacksonDatabindSerResolvableSerializer < JavaObject >

/*!
 @brief Method called after <code>SerializerProvider</code> has registered
  the serializer, but before it has returned it to the caller.
 Called object can then resolve its dependencies to other types,
  including self-references (direct or indirect).
 <p>
  Note that this method does NOT return serializer, since resolution
  is not allowed to change actual serializer to use.
 @param provider Provider that has constructed serializer this method    is called on.
 */
- (void)resolveWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerResolvableSerializer)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerResolvableSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerResolvableSerializer")
