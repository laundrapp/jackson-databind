//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver || defined(INCLUDE_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver))
#define ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver_

#define RESTRICT_ComFasterxmlJacksonDatabindAbstractTypeResolver 1
#define INCLUDE_ComFasterxmlJacksonDatabindAbstractTypeResolver 1
#include "com/fasterxml/jackson/databind/AbstractTypeResolver.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class IOSClass;
@class JavaUtilHashMap;

/*!
 @brief Simple <code>AbstractTypeResolver</code> implementation, which is
  based on static mapping from abstract super types into
  sub types (concrete or abstract), but retaining generic
  parameterization.
 Can be used for things like specifying which implementation of 
 <code>java.util.Collection</code> to use:
 @code

   SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();
   // To make all properties declared as Collection, List, to LinkedList
   resolver.addMapping(Collection.class, LinkedList.class);
   resolver.addMapping(List.class, LinkedList.class);
 
@endcode
  Can also be used as an alternative to per-class annotations when defining
  concrete implementations; however, only works with abstract types (since
  this is only called for abstract types)
 */
@interface ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver : ComFasterxmlJacksonDatabindAbstractTypeResolver < JavaIoSerializable > {
 @public
  /*!
   @brief Mappings from super types to subtypes
   */
  JavaUtilHashMap *_mappings_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method for adding a mapping from super type to specific subtype.
 Arguments will be checked by method, to ensure that <code>superType</code>
  is abstract (since resolver is never called for concrete classes);
  as well as to ensure that there is supertype/subtype relationship
  (to ensure there won't be cycles during resolution).
 @param superType Abstract type to resolve
 @param subType Sub-class of superType, to map superTo to
 @return This resolver, to allow chaining of initializations
 */
- (ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *)addMappingWithIOSClass:(IOSClass *)superType
                                                                           withIOSClass:(IOSClass *)subType;

- (ComFasterxmlJacksonDatabindJavaType *)findTypeMappingWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindJavaType *)resolveAbstractTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                  withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)typeDesc;

- (ComFasterxmlJacksonDatabindJavaType *)resolveAbstractTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver, _mappings_, JavaUtilHashMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver_init(ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *new_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver *create_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModuleSimpleAbstractTypeResolver")
