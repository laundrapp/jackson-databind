//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer))
#define ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer_

#define RESTRICT_ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer 1
#include "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.h"

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindUtilTokenBuffer;
@class IOSClass;

/*!
 @brief We also want to directly support deserialization of <code>TokenBuffer</code>.
 <p>
  Note that we use scalar deserializer base just because we claim
  to be of scalar for type information inclusion purposes; actual
  underlying content can be of any (Object, Array, scalar) type.
 <p>
  Since 2.3, another important thing is that possible native ids
  (type id, object id) should be properly copied even when converting
  with <code>TokenBuffer</code>. Such ids are supported if (and only if!)
  source <code>JsonParser</code> supports them.
 */
@interface ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer : ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer

#pragma mark Public

- (instancetype __nonnull)init;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)deserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                                           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)deserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0
                                           withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)arg1
                                                                                          withId:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)arg2;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)getNullValue;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)getNullValueWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)arg0;

#pragma mark Protected

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)_deserializeFromArrayWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0
                                                     withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)arg1;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)_deserializeFromEmptyWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0
                                                     withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)arg1;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)_deserializeWrappedValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0
                                                        withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)arg1;

- (ComFasterxmlJacksonDatabindUtilTokenBuffer *)createBufferInstanceWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer:(ComFasterxmlJacksonDatabindDeserStdStdScalarDeserializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer_init(ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer *new_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer *create_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserStdTokenBufferDeserializer")
