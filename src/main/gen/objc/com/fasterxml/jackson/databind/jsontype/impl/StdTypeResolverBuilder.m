//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/annotation/JsonTypeInfo.h"
#include "com/fasterxml/jackson/databind/DeserializationConfig.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/SerializationConfig.h"
#include "com/fasterxml/jackson/databind/annotation/NoClass.h"
#include "com/fasterxml/jackson/databind/cfg/MapperConfig.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeIdResolver.h"
#include "com/fasterxml/jackson/databind/jsontype/TypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Void.h"
#include "java/util/Collection.h"

@implementation ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)idType
                              withComFasterxmlJacksonAnnotationJsonTypeInfo_As:(ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)idAs
                                                                  withNSString:(NSString *)propName {
  ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_(self, idType, idAs, propName);
  return self;
}

+ (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)noTypeInfoBuilder {
  return ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_noTypeInfoBuilder();
}

- (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)init__WithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)idType
                                                                    withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:(id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idRes {
  if (idType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"idType cannot be null");
  }
  JreStrongAssign(&_idType_, idType);
  JreStrongAssign(&_customIdResolver_, idRes);
  JreStrongAssign(&_typeProperty_, [idType getDefaultPropertyName]);
  return self;
}

- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)buildTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withJavaUtilCollection:(id<JavaUtilCollection>)subtypes {
  if (_idType_ == JreLoadEnum(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id, NONE)) {
    return nil;
  }
  if ([((ComFasterxmlJacksonDatabindJavaType *) nil_chk(baseType)) isPrimitive]) {
    return nil;
  }
  id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver> idRes = [self idResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:config withComFasterxmlJacksonDatabindJavaType:baseType withJavaUtilCollection:subtypes withBoolean:true withBoolean:false];
  switch ([_includeAs_ ordinal]) {
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_WRAPPER_ARRAY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsArrayTypeSerializer_initWithComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withComFasterxmlJacksonDatabindBeanProperty_(idRes, nil);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_PROPERTY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsPropertyTypeSerializer_initWithComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withComFasterxmlJacksonDatabindBeanProperty_withNSString_(idRes, nil, _typeProperty_);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_WRAPPER_OBJECT:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsWrapperTypeSerializer_initWithComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withComFasterxmlJacksonDatabindBeanProperty_(idRes, nil);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_EXTERNAL_PROPERTY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsExternalTypeSerializer_initWithComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withComFasterxmlJacksonDatabindBeanProperty_withNSString_(idRes, nil, _typeProperty_);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_EXISTING_PROPERTY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsExistingPropertyTypeSerializer_initWithComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withComFasterxmlJacksonDatabindBeanProperty_withNSString_(idRes, nil, _typeProperty_);
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Do not know how to construct standard type serializer for inclusion type: ", _includeAs_));
}

- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)buildTypeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                            withJavaUtilCollection:(id<JavaUtilCollection>)subtypes {
  if (_idType_ == JreLoadEnum(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id, NONE)) {
    return nil;
  }
  if ([((ComFasterxmlJacksonDatabindJavaType *) nil_chk(baseType)) isPrimitive]) {
    return nil;
  }
  id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver> idRes = [self idResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:config withComFasterxmlJacksonDatabindJavaType:baseType withJavaUtilCollection:subtypes withBoolean:false withBoolean:true];
  ComFasterxmlJacksonDatabindJavaType *defaultImpl;
  if (_defaultImpl_ == nil) {
    defaultImpl = nil;
  }
  else {
    if ((_defaultImpl_ == JavaLangVoid_class_()) || (_defaultImpl_ == ComFasterxmlJacksonDatabindAnnotationNoClass_class_())) {
      defaultImpl = [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk([((ComFasterxmlJacksonDatabindDeserializationConfig *) nil_chk(config)) getTypeFactory])) constructTypeWithJavaLangReflectType:_defaultImpl_];
    }
    else {
      defaultImpl = [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk([((ComFasterxmlJacksonDatabindDeserializationConfig *) nil_chk(config)) getTypeFactory])) constructSpecializedTypeWithComFasterxmlJacksonDatabindJavaType:baseType withIOSClass:_defaultImpl_];
    }
  }
  switch ([_includeAs_ ordinal]) {
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_WRAPPER_ARRAY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsArrayTypeDeserializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withNSString_withBoolean_withComFasterxmlJacksonDatabindJavaType_(baseType, idRes, _typeProperty_, _typeIdVisible_, defaultImpl);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_PROPERTY:
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_EXISTING_PROPERTY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsPropertyTypeDeserializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withNSString_withBoolean_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_(baseType, idRes, _typeProperty_, _typeIdVisible_, defaultImpl, _includeAs_);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_WRAPPER_OBJECT:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsWrapperTypeDeserializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withNSString_withBoolean_withComFasterxmlJacksonDatabindJavaType_(baseType, idRes, _typeProperty_, _typeIdVisible_, defaultImpl);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_As_Enum_EXTERNAL_PROPERTY:
    return create_ComFasterxmlJacksonDatabindJsontypeImplAsExternalTypeDeserializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJsontypeTypeIdResolver_withNSString_withBoolean_withComFasterxmlJacksonDatabindJavaType_(baseType, idRes, _typeProperty_, _typeIdVisible_, defaultImpl);
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Do not know how to construct standard type serializer for inclusion type: ", _includeAs_));
}

- (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)inclusionWithComFasterxmlJacksonAnnotationJsonTypeInfo_As:(ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)includeAs {
  if (includeAs == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"includeAs cannot be null");
  }
  JreStrongAssign(&_includeAs_, includeAs);
  return self;
}

- (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)typePropertyWithNSString:(NSString *)typeIdPropName {
  if (typeIdPropName == nil || [typeIdPropName java_length] == 0) {
    typeIdPropName = [((ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *) nil_chk(_idType_)) getDefaultPropertyName];
  }
  JreStrongAssign(&_typeProperty_, typeIdPropName);
  return self;
}

- (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)defaultImplWithIOSClass:(IOSClass *)defaultImpl {
  JreStrongAssign(&_defaultImpl_, defaultImpl);
  return self;
}

- (ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *)typeIdVisibilityWithBoolean:(jboolean)isVisible {
  _typeIdVisible_ = isVisible;
  return self;
}

- (IOSClass *)getDefaultImpl {
  return _defaultImpl_;
}

- (NSString *)getTypeProperty {
  return _typeProperty_;
}

- (jboolean)isTypeIdVisible {
  return _typeIdVisible_;
}

- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)idResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)config
                                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                           withJavaUtilCollection:(id<JavaUtilCollection>)subtypes
                                                                                                      withBoolean:(jboolean)forSer
                                                                                                      withBoolean:(jboolean)forDeser {
  if (_customIdResolver_ != nil) {
    return _customIdResolver_;
  }
  if (_idType_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot build, 'init()' not yet called");
  switch ([_idType_ ordinal]) {
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_Id_Enum_CLASS:
    return create_ComFasterxmlJacksonDatabindJsontypeImplClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(baseType, [((ComFasterxmlJacksonDatabindCfgMapperConfig *) nil_chk(config)) getTypeFactory]);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_Id_Enum_MINIMAL_CLASS:
    return create_ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(baseType, [((ComFasterxmlJacksonDatabindCfgMapperConfig *) nil_chk(config)) getTypeFactory]);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_Id_Enum_NAME:
    return ComFasterxmlJacksonDatabindJsontypeImplTypeNameIdResolver_constructWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindJavaType_withJavaUtilCollection_withBoolean_withBoolean_(config, baseType, subtypes, forSer, forDeser);
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_Id_Enum_NONE:
    return nil;
    case ComFasterxmlJacksonAnnotationJsonTypeInfo_Id_Enum_CUSTOM:
    ;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Do not know how to construct standard type id resolver for idType: ", _idType_));
}

- (void)dealloc {
  RELEASE_(_idType_);
  RELEASE_(_includeAs_);
  RELEASE_(_typeProperty_);
  RELEASE_(_defaultImpl_);
  RELEASE_(_customIdResolver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeTypeSerializer;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeTypeDeserializer;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsontypeTypeIdResolver;", 0x4, 19, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:withComFasterxmlJacksonAnnotationJsonTypeInfo_As:withNSString:);
  methods[2].selector = @selector(noTypeInfoBuilder);
  methods[3].selector = @selector(init__WithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:);
  methods[4].selector = @selector(buildTypeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:withComFasterxmlJacksonDatabindJavaType:withJavaUtilCollection:);
  methods[5].selector = @selector(buildTypeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:withComFasterxmlJacksonDatabindJavaType:withJavaUtilCollection:);
  methods[6].selector = @selector(inclusionWithComFasterxmlJacksonAnnotationJsonTypeInfo_As:);
  methods[7].selector = @selector(typePropertyWithNSString:);
  methods[8].selector = @selector(defaultImplWithIOSClass:);
  methods[9].selector = @selector(typeIdVisibilityWithBoolean:);
  methods[10].selector = @selector(getDefaultImpl);
  methods[11].selector = @selector(getTypeProperty);
  methods[12].selector = @selector(isTypeIdVisible);
  methods[13].selector = @selector(idResolverWithComFasterxmlJacksonDatabindCfgMapperConfig:withComFasterxmlJacksonDatabindJavaType:withJavaUtilCollection:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_idType_", "LComFasterxmlJacksonAnnotationJsonTypeInfo_Id;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_includeAs_", "LComFasterxmlJacksonAnnotationJsonTypeInfo_As;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_typeProperty_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_typeIdVisible_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_defaultImpl_", "LIOSClass;", .constantValue.asLong = 0, 0x4, -1, -1, 22, -1 },
    { "_customIdResolver_", "LComFasterxmlJacksonDatabindJsontypeTypeIdResolver;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonAnnotationJsonTypeInfo_Id;LComFasterxmlJacksonAnnotationJsonTypeInfo_As;LNSString;", "init", "LComFasterxmlJacksonAnnotationJsonTypeInfo_Id;LComFasterxmlJacksonDatabindJsontypeTypeIdResolver;", "buildTypeSerializer", "LComFasterxmlJacksonDatabindSerializationConfig;LComFasterxmlJacksonDatabindJavaType;LJavaUtilCollection;", "(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/JavaType;Ljava/util/Collection<Lcom/fasterxml/jackson/databind/jsontype/NamedType;>;)Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;", "buildTypeDeserializer", "LComFasterxmlJacksonDatabindDeserializationConfig;LComFasterxmlJacksonDatabindJavaType;LJavaUtilCollection;", "(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/JavaType;Ljava/util/Collection<Lcom/fasterxml/jackson/databind/jsontype/NamedType;>;)Lcom/fasterxml/jackson/databind/jsontype/TypeDeserializer;", "inclusion", "LComFasterxmlJacksonAnnotationJsonTypeInfo_As;", "typeProperty", "LNSString;", "defaultImpl", "LIOSClass;", "(Ljava/lang/Class<*>;)Lcom/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder;", "typeIdVisibility", "Z", "()Ljava/lang/Class<*>;", "idResolver", "LComFasterxmlJacksonDatabindCfgMapperConfig;LComFasterxmlJacksonDatabindJavaType;LJavaUtilCollection;ZZ", "(Lcom/fasterxml/jackson/databind/cfg/MapperConfig<*>;Lcom/fasterxml/jackson/databind/JavaType;Ljava/util/Collection<Lcom/fasterxml/jackson/databind/jsontype/NamedType;>;ZZ)Lcom/fasterxml/jackson/databind/jsontype/TypeIdResolver;", "Ljava/lang/Class<*>;", "Ljava/lang/Object;Lcom/fasterxml/jackson/databind/jsontype/TypeResolverBuilder<Lcom/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder = { "StdTypeResolverBuilder", "com.fasterxml.jackson.databind.jsontype.impl", ptrTable, methods, fields, 7, 0x1, 14, 6, -1, -1, -1, 23, -1 };
  return &_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder;
}

@end

void ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_init(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *self) {
  NSObject_init(self);
  self->_typeIdVisible_ = false;
}

ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *new_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder, init)
}

ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *create_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder, init)
}

void ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *self, ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *idType, ComFasterxmlJacksonAnnotationJsonTypeInfo_As *idAs, NSString *propName) {
  NSObject_init(self);
  self->_typeIdVisible_ = false;
  JreStrongAssign(&self->_idType_, idType);
  JreStrongAssign(&self->_includeAs_, idAs);
  JreStrongAssign(&self->_typeProperty_, propName);
}

ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *new_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *idType, ComFasterxmlJacksonAnnotationJsonTypeInfo_As *idAs, NSString *propName) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder, initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_, idType, idAs, propName)
}

ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *create_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *idType, ComFasterxmlJacksonAnnotationJsonTypeInfo_As *idAs, NSString *propName) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder, initWithComFasterxmlJacksonAnnotationJsonTypeInfo_Id_withComFasterxmlJacksonAnnotationJsonTypeInfo_As_withNSString_, idType, idAs, propName)
}

ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder *ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_noTypeInfoBuilder() {
  ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_initialize();
  return [create_ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder_init() init__WithComFasterxmlJacksonAnnotationJsonTypeInfo_Id:JreLoadEnum(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id, NONE) withComFasterxmlJacksonDatabindJsontypeTypeIdResolver:nil];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindJsontypeImplStdTypeResolverBuilder)
