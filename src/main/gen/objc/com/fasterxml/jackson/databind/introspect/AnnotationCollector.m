//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/introspect/AnnotationCollector.h"
#include "com/fasterxml/jackson/databind/introspect/AnnotationMap.h"
#include "com/fasterxml/jackson/databind/util/Annotations.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector () {
 @public
  IOSClass *_type_;
  id<JavaLangAnnotationAnnotation> _value_;
}

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector, _type_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector, _value_, id<JavaLangAnnotationAnnotation>)

inline jlong ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations, serialVersionUID, jlong)

@interface ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation () {
 @public
  IOSClass *_type_;
  id<JavaLangAnnotationAnnotation> _value_;
}

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation, _type_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation, _value_, id<JavaLangAnnotationAnnotation>)

inline jlong ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation, serialVersionUID, jlong)

@interface ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations () {
 @public
  IOSClass *_type1_;
  IOSClass *_type2_;
  id<JavaLangAnnotationAnnotation> _value1_;
  id<JavaLangAnnotationAnnotation> _value2_;
}

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, _type1_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, _type2_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, _value1_, id<JavaLangAnnotationAnnotation>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, _value2_, id<JavaLangAnnotationAnnotation>)

inline jlong ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector)

id<ComFasterxmlJacksonDatabindUtilAnnotations> ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NO_ANNOTATIONS;

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector

- (instancetype __nonnull)initWithId:(id)d {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initWithId_(self, d);
  return self;
}

+ (id<ComFasterxmlJacksonDatabindUtilAnnotations>)emptyAnnotations {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyAnnotations();
}

+ (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)emptyCollector {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyCollector();
}

+ (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)emptyCollectorWithId:(id)data {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyCollectorWithId_(data);
}

- (id<ComFasterxmlJacksonDatabindUtilAnnotations>)asAnnotations {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)asAnnotationMap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getData {
  return _data_;
}

- (jboolean)isPresentWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)addOrOverrideWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilAnnotations;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilAnnotations;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x401, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(emptyAnnotations);
  methods[2].selector = @selector(emptyCollector);
  methods[3].selector = @selector(emptyCollectorWithId:);
  methods[4].selector = @selector(asAnnotations);
  methods[5].selector = @selector(asAnnotationMap);
  methods[6].selector = @selector(getData);
  methods[7].selector = @selector(isPresentWithJavaLangAnnotationAnnotation:);
  methods[8].selector = @selector(addOrOverrideWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_ANNOTATIONS", "LComFasterxmlJacksonDatabindUtilAnnotations;", .constantValue.asLong = 0, 0x1c, -1, 5, -1, -1 },
    { "_data_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "emptyCollector", "isPresent", "LJavaLangAnnotationAnnotation;", "addOrOverride", &ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NO_ANNOTATIONS, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector;LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector;LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector;LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations;LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation;LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector = { "AnnotationCollector", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x401, 9, 2, -1, 6, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindIntrospectAnnotationCollector class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NO_ANNOTATIONS, new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector)
  }
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initWithId_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *self, id d) {
  NSObject_init(self);
  JreStrongAssign(&self->_data_, d);
}

id<ComFasterxmlJacksonDatabindUtilAnnotations> ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyAnnotations() {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initialize();
  return ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NO_ANNOTATIONS;
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyCollector() {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initialize();
  return JreLoadStatic(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector, instance);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_emptyCollectorWithId_(id data) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initialize();
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(data);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector)

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector *ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_instance;

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector

- (instancetype __nonnull)initWithId:(id)data {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(self, data);
  return self;
}

- (id<ComFasterxmlJacksonDatabindUtilAnnotations>)asAnnotations {
  return JreLoadStatic(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector, NO_ANNOTATIONS);
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)asAnnotationMap {
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init();
}

- (jboolean)isPresentWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return false;
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)addOrOverrideWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_(_data_, [((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType], ann);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilAnnotations;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(asAnnotations);
  methods[2].selector = @selector(asAnnotationMap);
  methods[3].selector = @selector(isPresentWithJavaLangAnnotationAnnotation:);
  methods[4].selector = @selector(addOrOverrideWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instance", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "isPresent", "LJavaLangAnnotationAnnotation;", "addOrOverride", &ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_instance, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector = { "EmptyCollector", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x8, 5, 1, 5, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_instance, new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(nil));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector)
  }
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector *self, id data) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initWithId_(self, data);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(id data) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector, initWithId_, data)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector_initWithId_(id data) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector, initWithId_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_EmptyCollector)

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector

- (instancetype __nonnull)initWithId:(id)data
                        withIOSClass:(IOSClass *)type
    withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_(self, data, type, value);
  return self;
}

- (id<ComFasterxmlJacksonDatabindUtilAnnotations>)asAnnotations {
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_initWithIOSClass_withJavaLangAnnotationAnnotation_(_type_, _value_);
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)asAnnotationMap {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationMap_ofWithIOSClass_withJavaLangAnnotationAnnotation_(_type_, _value_);
}

- (jboolean)isPresentWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return [((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType] == _type_;
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)addOrOverrideWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  IOSClass *type = [((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType];
  if (_type_ == type) {
    JreStrongAssign(&_value_, ann);
    return self;
  }
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(_data_, _type_, _value_, type, ann);
}

- (void)dealloc {
  RELEASE_(_type_);
  RELEASE_(_value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilAnnotations;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withIOSClass:withJavaLangAnnotationAnnotation:);
  methods[1].selector = @selector(asAnnotations);
  methods[2].selector = @selector(asAnnotationMap);
  methods[3].selector = @selector(isPresentWithJavaLangAnnotationAnnotation:);
  methods[4].selector = @selector(addOrOverrideWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_type_", "LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "_value_", "LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LIOSClass;LJavaLangAnnotationAnnotation;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;)V", "isPresent", "LJavaLangAnnotationAnnotation;", "addOrOverride", "Ljava/lang/Class<*>;", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector = { "OneCollector", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x8, 5, 2, 6, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector *self, id data, IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initWithId_(self, data);
  JreStrongAssign(&self->_type_, type);
  JreStrongAssign(&self->_value_, value);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_(id data, IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector, initWithId_withIOSClass_withJavaLangAnnotationAnnotation_, data, type, value)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_(id data, IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector, initWithId_withIOSClass_withJavaLangAnnotationAnnotation_, data, type, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneCollector)

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector

- (instancetype __nonnull)initWithId:(id)data
                        withIOSClass:(IOSClass *)type1
    withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value1
                        withIOSClass:(IOSClass *)type2
    withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value2 {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(self, data, type1, value1, type2, value2);
  return self;
}

- (id<ComFasterxmlJacksonDatabindUtilAnnotations>)asAnnotations {
  if ([((JavaUtilHashMap *) nil_chk(_annotations_)) size] == 2) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([_annotations_ entrySet])) iterator];
    id<JavaUtilMap_Entry> en1 = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<JavaUtilMap_Entry> en2 = [it next];
    return create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_([((id<JavaUtilMap_Entry>) nil_chk(en1)) getKey], [en1 getValue], [((id<JavaUtilMap_Entry>) nil_chk(en2)) getKey], [en2 getValue]);
  }
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(_annotations_);
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)asAnnotationMap {
  ComFasterxmlJacksonDatabindIntrospectAnnotationMap *result = create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init();
  for (id<JavaLangAnnotationAnnotation> __strong ann in nil_chk([((JavaUtilHashMap *) nil_chk(_annotations_)) values])) {
    [result addWithJavaLangAnnotationAnnotation:ann];
  }
  return result;
}

- (jboolean)isPresentWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return [((JavaUtilHashMap *) nil_chk(_annotations_)) containsKeyWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType]];
}

- (ComFasterxmlJacksonDatabindIntrospectAnnotationCollector *)addOrOverrideWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  [((JavaUtilHashMap *) nil_chk(_annotations_)) putWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType] withId:ann];
  return self;
}

- (void)dealloc {
  RELEASE_(_annotations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindUtilAnnotations;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withIOSClass:withJavaLangAnnotationAnnotation:withIOSClass:withJavaLangAnnotationAnnotation:);
  methods[1].selector = @selector(asAnnotations);
  methods[2].selector = @selector(asAnnotationMap);
  methods[3].selector = @selector(isPresentWithJavaLangAnnotationAnnotation:);
  methods[4].selector = @selector(addOrOverrideWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_annotations_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x14, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LIOSClass;LJavaLangAnnotationAnnotation;LIOSClass;LJavaLangAnnotationAnnotation;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;)V", "isPresent", "LJavaLangAnnotationAnnotation;", "addOrOverride", "Ljava/util/HashMap<Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;>;", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector = { "NCollector", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x8, 5, 1, 6, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector *self, id data, IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_initWithId_(self, data);
  JreStrongAssignAndConsume(&self->_annotations_, new_JavaUtilHashMap_init());
  [self->_annotations_ putWithId:type1 withId:value1];
  [self->_annotations_ putWithId:type2 withId:value2];
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(id data, IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector, initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_, data, type1, value1, type2, value2)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector_initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(id data, IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector, initWithId_withIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_, data, type1, value1, type2, value2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NCollector)

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangAnnotationAnnotation>)getWithIOSClass:(IOSClass *)cls {
  return nil;
}

- (jboolean)hasWithIOSClass:(IOSClass *)cls {
  return false;
}

- (jboolean)hasOneOfWithIOSClassArray:(IOSObjectArray *)annoClasses {
  return false;
}

- (jint)size {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithIOSClass:);
  methods[2].selector = @selector(hasWithIOSClass:);
  methods[3].selector = @selector(hasOneOfWithIOSClassArray:);
  methods[4].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LIOSClass;", "<A::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TA;>;)TA;", "has", "(Ljava/lang/Class<*>;)Z", "hasOneOf", "[LIOSClass;", "([Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations = { "NoAnnotations", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x9, 5, 1, 8, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_init(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations, init)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_NoAnnotations)

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
          withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_initWithIOSClass_withJavaLangAnnotationAnnotation_(self, type, value);
  return self;
}

- (id<JavaLangAnnotationAnnotation>)getWithIOSClass:(IOSClass *)cls {
  if (_type_ == cls) {
    return _value_;
  }
  return nil;
}

- (jboolean)hasWithIOSClass:(IOSClass *)cls {
  return _type_ == cls;
}

- (jboolean)hasOneOfWithIOSClassArray:(IOSObjectArray *)annoClasses {
  {
    IOSObjectArray *a__ = annoClasses;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *cls = *b__++;
      if (cls == _type_) {
        return true;
      }
    }
  }
  return false;
}

- (jint)size {
  return 1;
}

- (void)dealloc {
  RELEASE_(_type_);
  RELEASE_(_value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangAnnotationAnnotation:);
  methods[1].selector = @selector(getWithIOSClass:);
  methods[2].selector = @selector(hasWithIOSClass:);
  methods[3].selector = @selector(hasOneOfWithIOSClassArray:);
  methods[4].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_type_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_value_", "LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangAnnotationAnnotation;", "(Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;)V", "get", "LIOSClass;", "<A::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TA;>;)TA;", "has", "(Ljava/lang/Class<*>;)Z", "hasOneOf", "[LIOSClass;", "([Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "Ljava/lang/Class<*>;", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation = { "OneAnnotation", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x9, 5, 3, 11, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_initWithIOSClass_withJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation *self, IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  NSObject_init(self);
  JreStrongAssign(&self->_type_, type);
  JreStrongAssign(&self->_value_, value);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_initWithIOSClass_withJavaLangAnnotationAnnotation_(IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation, initWithIOSClass_withJavaLangAnnotationAnnotation_, type, value)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation_initWithIOSClass_withJavaLangAnnotationAnnotation_(IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation, initWithIOSClass_withJavaLangAnnotationAnnotation_, type, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_OneAnnotation)

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type1
          withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value1
                              withIOSClass:(IOSClass *)type2
          withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value2 {
  ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(self, type1, value1, type2, value2);
  return self;
}

- (id<JavaLangAnnotationAnnotation>)getWithIOSClass:(IOSClass *)cls {
  if (_type1_ == cls) {
    return _value1_;
  }
  if (_type2_ == cls) {
    return _value2_;
  }
  return nil;
}

- (jboolean)hasWithIOSClass:(IOSClass *)cls {
  return (_type1_ == cls) || (_type2_ == cls);
}

- (jboolean)hasOneOfWithIOSClassArray:(IOSObjectArray *)annoClasses {
  {
    IOSObjectArray *a__ = annoClasses;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *cls = *b__++;
      if ((cls == _type1_) || (cls == _type2_)) {
        return true;
      }
    }
  }
  return false;
}

- (jint)size {
  return 2;
}

- (void)dealloc {
  RELEASE_(_type1_);
  RELEASE_(_type2_);
  RELEASE_(_value1_);
  RELEASE_(_value2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangAnnotationAnnotation:withIOSClass:withJavaLangAnnotationAnnotation:);
  methods[1].selector = @selector(getWithIOSClass:);
  methods[2].selector = @selector(hasWithIOSClass:);
  methods[3].selector = @selector(hasOneOfWithIOSClassArray:);
  methods[4].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_type1_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_type2_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_value1_", "LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_value2_", "LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangAnnotationAnnotation;LIOSClass;LJavaLangAnnotationAnnotation;", "(Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;)V", "get", "LIOSClass;", "<A::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TA;>;)TA;", "has", "(Ljava/lang/Class<*>;)Z", "hasOneOf", "[LIOSClass;", "([Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "Ljava/lang/Class<*>;", "LComFasterxmlJacksonDatabindIntrospectAnnotationCollector;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations = { "TwoAnnotations", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x9, 5, 5, 11, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations *self, IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  NSObject_init(self);
  JreStrongAssign(&self->_type1_, type1);
  JreStrongAssign(&self->_value1_, value1);
  JreStrongAssign(&self->_type2_, type2);
  JreStrongAssign(&self->_value2_, value2);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations *new_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_, type1, value1, type2, value2)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations *create_ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations_initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_(IOSClass *type1, id<JavaLangAnnotationAnnotation> value1, IOSClass *type2, id<JavaLangAnnotationAnnotation> value2) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations, initWithIOSClass_withJavaLangAnnotationAnnotation_withIOSClass_withJavaLangAnnotationAnnotation_, type1, value1, type2, value2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationCollector_TwoAnnotations)
