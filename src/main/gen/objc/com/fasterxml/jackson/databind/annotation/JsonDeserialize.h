//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindAnnotationJsonDeserialize_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize || defined(INCLUDE_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize))
#define ComFasterxmlJacksonDatabindAnnotationJsonDeserialize_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Annotation use for configuring deserialization aspects, by attaching
  to "setter" methods or fields, or to value classes.
 When annotating value classes, configuration is used for instances
  of the value class but can be overridden by more specific annotations
  (ones that attach to methods or fields).
 <p>
  An example annotation would be:
 @code

    &#64;JsonDeserialize(using=MySerializer.class,
     as=MyHashMap.class,
     keyAs=MyHashKey.class,
     contentAs=MyHashValue.class
   )
 
@endcode
 <p>
  Something to note on usage:
 <ul>
  <li>All other annotations regarding behavior during building should be on <b>Builder</b>
     class and NOT on target POJO class: for example &#64;JsonIgnoreProperties should be on
     Builder to prevent "unknown property" errors.  
 </li>
  <li>Similarly configuration overrides (see <code>com.fasterxml.jackson.databind.ObjectMapper</code>)
     should be targeted at Builder class, not target POJO class.  
 </li>
  </ul>
 */
@protocol ComFasterxmlJacksonDatabindAnnotationJsonDeserialize < JavaLangAnnotationAnnotation >

@property (readonly) IOSClass *using__;
@property (readonly) IOSClass *contentUsing;
@property (readonly) IOSClass *keyUsing;
@property (readonly) IOSClass *builder;
@property (readonly) IOSClass *converter;
@property (readonly) IOSClass *contentConverter;
@property (readonly) IOSClass *as;
@property (readonly) IOSClass *keyAs;
@property (readonly) IOSClass *contentAs;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonDatabindAnnotationJsonDeserialize : NSObject < ComFasterxmlJacksonDatabindAnnotationJsonDeserialize > {
 @public
  IOSClass *using___;
  IOSClass *contentUsing_;
  IOSClass *keyUsing_;
  IOSClass *builder_;
  IOSClass *converter_;
  IOSClass *contentConverter_;
  IOSClass *as_;
  IOSClass *keyAs_;
  IOSClass *contentAs_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindAnnotationJsonDeserialize)

FOUNDATION_EXPORT id<ComFasterxmlJacksonDatabindAnnotationJsonDeserialize> create_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize(IOSClass *as, IOSClass *builder, IOSClass *contentAs, IOSClass *contentConverter, IOSClass *contentUsing, IOSClass *converter, IOSClass *keyAs, IOSClass *keyUsing, IOSClass *using__);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAnnotationJsonDeserialize)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAnnotationJsonDeserialize")
