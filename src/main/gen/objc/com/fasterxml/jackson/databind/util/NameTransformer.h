//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/NameTransformer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilNameTransformer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilNameTransformer
#ifdef INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer_Chained
#define INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer 1
#endif
#ifdef INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer
#define INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilNameTransformer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer))
#define ComFasterxmlJacksonDatabindUtilNameTransformer_

/*!
 @brief Helper class used to encapsulate details of name mangling, transforming
  of names using different strategies (prefixes, suffixes).
 Default implementation is "no-operation" (aka identity transformation).
 */
@interface ComFasterxmlJacksonDatabindUtilNameTransformer : NSObject

#pragma mark Public

/*!
 @brief Method that constructs transformer that applies given transformers
  as a sequence; essentially combines separate transform operations
  into one logical transformation.
 */
+ (ComFasterxmlJacksonDatabindUtilNameTransformer *)chainedTransformerWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)t1
                                                                      withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)t2;

/*!
 @brief Method called when reversal of transformation is needed; should return
  null if this is not possible, that is, given name cannot have been
  result of calling <code>transform</code> of this object.
 */
- (NSString *)reverseWithNSString:(NSString *)transformed;

/*!
 @brief Factory method for constructing a simple transformer based on
  prefix and/or suffix.
 */
+ (ComFasterxmlJacksonDatabindUtilNameTransformer *)simpleTransformerWithNSString:(NSString *)prefix
                                                                     withNSString:(NSString *)suffix;

/*!
 @brief Method called when (forward) transformation is needed.
 */
- (NSString *)transformWithNSString:(NSString *)name;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindUtilNameTransformer)

/*!
 @brief Singleton "no-operation" transformer which simply returns given
  name as is.Used commonly as placeholder or marker.
 */
inline ComFasterxmlJacksonDatabindUtilNameTransformer *ComFasterxmlJacksonDatabindUtilNameTransformer_get_NOP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer *ComFasterxmlJacksonDatabindUtilNameTransformer_NOP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindUtilNameTransformer, NOP, ComFasterxmlJacksonDatabindUtilNameTransformer *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilNameTransformer_init(ComFasterxmlJacksonDatabindUtilNameTransformer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer *ComFasterxmlJacksonDatabindUtilNameTransformer_simpleTransformerWithNSString_withNSString_(NSString *prefix, NSString *suffix);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer *ComFasterxmlJacksonDatabindUtilNameTransformer_chainedTransformerWithComFasterxmlJacksonDatabindUtilNameTransformer_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindUtilNameTransformer *t1, ComFasterxmlJacksonDatabindUtilNameTransformer *t2);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilNameTransformer)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer))
#define ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@interface ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer : ComFasterxmlJacksonDatabindUtilNameTransformer < JavaIoSerializable >

#pragma mark Public

- (NSString *)reverseWithNSString:(NSString *)transformed;

- (NSString *)transformWithNSString:(NSString *)name;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer_init(ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer *new_ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer *create_ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilNameTransformer_NopTransformer)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilNameTransformer_Chained_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilNameTransformer_Chained))
#define ComFasterxmlJacksonDatabindUtilNameTransformer_Chained_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindUtilNameTransformer;

@interface ComFasterxmlJacksonDatabindUtilNameTransformer_Chained : ComFasterxmlJacksonDatabindUtilNameTransformer < JavaIoSerializable > {
 @public
  ComFasterxmlJacksonDatabindUtilNameTransformer *_t1_;
  ComFasterxmlJacksonDatabindUtilNameTransformer *_t2_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)t1
                              withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)t2;

- (NSString *)reverseWithNSString:(NSString *)transformed;

- (NSString *)description;

- (NSString *)transformWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilNameTransformer_Chained)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilNameTransformer_Chained, _t1_, ComFasterxmlJacksonDatabindUtilNameTransformer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilNameTransformer_Chained, _t2_, ComFasterxmlJacksonDatabindUtilNameTransformer *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilNameTransformer_Chained_initWithComFasterxmlJacksonDatabindUtilNameTransformer_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindUtilNameTransformer_Chained *self, ComFasterxmlJacksonDatabindUtilNameTransformer *t1, ComFasterxmlJacksonDatabindUtilNameTransformer *t2);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer_Chained *new_ComFasterxmlJacksonDatabindUtilNameTransformer_Chained_initWithComFasterxmlJacksonDatabindUtilNameTransformer_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindUtilNameTransformer *t1, ComFasterxmlJacksonDatabindUtilNameTransformer *t2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilNameTransformer_Chained *create_ComFasterxmlJacksonDatabindUtilNameTransformer_Chained_initWithComFasterxmlJacksonDatabindUtilNameTransformer_withComFasterxmlJacksonDatabindUtilNameTransformer_(ComFasterxmlJacksonDatabindUtilNameTransformer *t1, ComFasterxmlJacksonDatabindUtilNameTransformer *t2);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilNameTransformer_Chained)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilNameTransformer")
