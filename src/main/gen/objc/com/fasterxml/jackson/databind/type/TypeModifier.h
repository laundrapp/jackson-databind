//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeModifier")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindTypeTypeModifier
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeModifier 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeModifier 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindTypeTypeModifier

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindTypeTypeModifier_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeModifier || defined(INCLUDE_ComFasterxmlJacksonDatabindTypeTypeModifier))
#define ComFasterxmlJacksonDatabindTypeTypeModifier_

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeTypeBindings;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@protocol JavaLangReflectType;

/*!
 @brief Class that defines API that can be used to modify details of 
 <code>JavaType</code> instances constructed using <code>TypeFactory</code>.
 Registered modifiers are called in order, to let them modify (or
  replace) basic type instance factory constructs.
  This is typically needed to support creation of 
 <code>MapLikeType</code> and <code>CollectionLikeType</code> instances,
  as those cannot be constructed in generic fashion.
 */
@interface ComFasterxmlJacksonDatabindTypeTypeModifier : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to let modifier change constructed type definition.
 Note that this is only guaranteed to be called for
  non-container types ("simple" types not recognized as arrays, 
 <code>java.util.Collection</code> or <code>java.util.Map</code>).
 @param type Instance to modify
 @param jdkType JDK type that was used to construct instance to modify
 @param context Type resolution context used for the type
 @param typeFactory Type factory that can be used to construct parameter type; note,    however, that care must be taken to avoid infinite loops -- specifically, do not
     construct instance of primary type itself
 @return Actual type instance to use; usually either <code>type</code> (as is or with
     modifications), or a newly constructed type instance based on it. Cannot be null.
 */
- (ComFasterxmlJacksonDatabindJavaType *)modifyTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                   withJavaLangReflectType:(id<JavaLangReflectType>)jdkType
                                           withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)context
                                            withComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)typeFactory;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindTypeTypeModifier)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeTypeModifier_init(ComFasterxmlJacksonDatabindTypeTypeModifier *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindTypeTypeModifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeTypeModifier")
