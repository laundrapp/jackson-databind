//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfig")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindCfgMapperConfig
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfig 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfig 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindCfgMapperConfig

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindCfgMapperConfig_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfig || defined(INCLUDE_ComFasterxmlJacksonDatabindCfgMapperConfig))
#define ComFasterxmlJacksonDatabindCfgMapperConfig_

#define RESTRICT_ComFasterxmlJacksonDatabindIntrospectClassIntrospector 1
#define INCLUDE_ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver 1
#include "com/fasterxml/jackson/databind/introspect/ClassIntrospector.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value;
@class ComFasterxmlJacksonAnnotationJsonInclude_Value;
@class ComFasterxmlJacksonAnnotationJsonSetter_Value;
@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreTypeTypeReference;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindCfgBaseSettings;
@class ComFasterxmlJacksonDatabindCfgConfigOverride;
@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@class ComFasterxmlJacksonDatabindCfgHandlerInstantiator;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedClass;
@class ComFasterxmlJacksonDatabindIntrospectClassIntrospector;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsontypeSubtypeResolver;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindPropertyName;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaTextDateFormat;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol ComFasterxmlJacksonDatabindIntrospectVisibilityChecker;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder;

/*!
 @brief Interface that defines functionality accessible through both
  serialization and deserialization configuration objects;
  accessors to mode-independent configuration settings
  and such.
 In addition, shared features are defined
  in <code>MapperFeature</code>.
 <p>
  Small part of implementation is included here by aggregating 
 <code>BaseSettings</code> instance that contains configuration
  that is shared between different types of instances.
 */
@interface ComFasterxmlJacksonDatabindCfgMapperConfig : NSObject < ComFasterxmlJacksonDatabindIntrospectClassIntrospector_MixInResolver, JavaIoSerializable > {
 @public
  /*!
   @brief Set of shared mapper features enabled.
   */
  jint _mapperFeatures_;
  /*!
   @brief Immutable container object for simple configuration settings.
   */
  ComFasterxmlJacksonDatabindCfgBaseSettings *_base_;
}

#pragma mark Public

/*!
 @brief Accessor for determining whether it is ok to try to force override of access
  modifiers to be able to get or set values of non-public Methods, Fields;
  to invoke non-public Constructors, Methods; or to instantiate non-public
  Classes.By default this is enabled, but on some platforms it needs to be
  prevented since if this would violate security constraints and cause failures.
 @return True if access modifier overriding is allowed (and may be done for
    any Field, Method, Constructor or Class); false to prevent any attempts
    to override.
 */
- (jboolean)canOverrideAccessModifiers;

/*!
 @brief Method that calculates bit set (flags) of all features that
  are enabled by default.
 */
+ (jint)collectFeatureDefaultsWithIOSClass:(IOSClass *)enumClass;

/*!
 @brief Method for constructing a specialized textual object that can typically
  be serialized faster than basic <code>java.lang.String</code> (depending
  on escaping needed if any, char-to-byte encoding if needed).
 @param src Text to represent
 @return Optimized text object constructed
 @since 2.4
 */
- (id<ComFasterxmlJacksonCoreSerializableString>)compileStringWithNSString:(NSString *)src;

- (ComFasterxmlJacksonDatabindJavaType *)constructSpecializedTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                            withIOSClass:(IOSClass *)subclass;

/*!
 @brief Helper method that will construct <code>JavaType</code> for given
  raw class.
 This is a simple short-cut for:
 @code

     getTypeFactory().constructType(cls);
 
@endcode
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithIOSClass:(IOSClass *)cls;

/*!
 @brief Helper method that will construct <code>JavaType</code> for given
  type reference
  This is a simple short-cut for:
 @code

     getTypeFactory().constructType(valueTypeRef);
 
@endcode
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef;

/*!
 @brief Accessor for finding <code>ConfigOverride</code> to use for
  properties of given type, if any exist; or return `null` if not.
 <p>
  Note that only directly associated override
  is found; no type hierarchy traversal is performed.
 @since 2.8
 @return Override object to use for the type, if defined; null if none.
 */
- (ComFasterxmlJacksonDatabindCfgConfigOverride *)findConfigOverrideWithIOSClass:(IOSClass *)type;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findRootNameWithIOSClass:(IOSClass *)rawRootType;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonDatabindPropertyName *)findRootNameWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)rootType;

/*!
 @brief Accessor for finding currently active view, if any (null if none)
 */
- (IOSClass *)getActiveView;

/*!
 @brief Method for getting <code>AnnotationIntrospector</code> configured
  to introspect annotation values used for configuration.
 <p>
  Non-final since it is actually overridden by sub-classes (for now?)
 */
- (ComFasterxmlJacksonDatabindAnnotationIntrospector *)getAnnotationIntrospector;

/*!
 @brief Method for accessing per-instance shared (baseline/default)
  attribute values; these are used as the basis for per-call
  attributes.
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgContextAttributes *)getAttributes;

/*!
 @brief Method called during deserialization if Base64 encoded content
  needs to be decoded.Default version just returns default Jackson
  uses, which is modified-mime which does not add linefeeds (because
  those would have to be escaped in JSON strings); but this can
  be configured on <code>ObjectWriter</code>.
 */
- (ComFasterxmlJacksonCoreBase64Variant *)getBase64Variant;

- (ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)getClassIntrospector;

/*!
 @brief Accessor for finding <code>ConfigOverride</code> to use for
  properties of given type, if any exist; or if none, return an immutable
  "empty" instance with no overrides.
 <p>
  Note that only directly associated override
  is found; no type hierarchy traversal is performed.
 @since 2.9
 @return Override object to use for the type, never null (but may be empty)
 */
- (ComFasterxmlJacksonDatabindCfgConfigOverride *)getConfigOverrideWithIOSClass:(IOSClass *)type;

/*!
 @brief Method for accessing currently configured (textual) date format
  that will be used for reading or writing date values (in case
  of writing, only if textual output is configured; not if dates
  are to be serialized as time stamps).
 <p>
  Note that typically <code>DateFormat</code> instances are <b>not thread-safe</b>
  (at least ones provided by JDK):
  this means that calling code should clone format instance before
  using it.
 <p>
  This method is usually only called by framework itself, since there
  are convenience methods available via 
 <code>DeserializationContext</code> and <code>SerializerProvider</code> that
  take care of cloning and thread-safe reuse.
 */
- (JavaTextDateFormat *)getDateFormat;

/*!
 @brief Accessor for default property inclusion to use for serialization,
  considering possible per-type override for given base type and
  possible per-type override for given property type.
 <br>
  NOTE: if no override found, defaults to value returned by 
 <code>getDefaultPropertyInclusion()</code>.
 @param baseType Type of the instance containing the targeted property.
 @param propertyType Type of the property to look up inclusion setting for.
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultInclusionWithIOSClass:(IOSClass *)baseType
                                                                       withIOSClass:(IOSClass *)propertyType;

/*!
 @brief Accessor for default property inclusion to use for serialization,
  considering possible per-type override for given base type and
  possible per-type override for given property type; but
  if none found, returning given <code>defaultIncl</code>
 @param baseType Type of the instance containing the targeted property.
 @param propertyType Type of the property to look up inclusion setting for.
 @param defaultIncl Inclusion setting to return if no overrides found.
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultInclusionWithIOSClass:(IOSClass *)baseType
                                                                       withIOSClass:(IOSClass *)propertyType
                                 withComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)defaultIncl;

/*!
 @brief Accessor for the baseline merge info used as the global baseline,
  not considering possible per-type overrides.
 @return Global base settings, if any; `null` if none.
 @since 2.9
 */
- (JavaLangBoolean *)getDefaultMergeable;

/*!
 @brief Accessor for the baseline merge info used for given type, including global
  defaults if no type-specific overrides defined.
 @return Type-specific settings (if any); global defaults (same as
     <code>getDefaultMergeable()</code>) otherwise, if any defined; or `null`
     if neither defined
 @since 2.9
 */
- (JavaLangBoolean *)getDefaultMergeableWithIOSClass:(IOSClass *)baseType;

/*!
 @brief Accessor for default format settings to use for serialization (and, to a degree
  deserialization), considering baseline settings and per-type defaults
  for given base type (if any).
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)getDefaultPropertyFormatWithIOSClass:(IOSClass *)baseType;

/*!
 @brief Accessor for default property ignorals to use, if any, for given base type,
  based on config overrides settings (see <code>findConfigOverride(Class)</code>).
 @since 2.8
 */
- (ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value *)getDefaultPropertyIgnoralsWithIOSClass:(IOSClass *)baseType;

/*!
 @brief Helper method that may be called to see if there are property ignoral
  definitions from annotations (via <code>AnnotatedClass</code>) or through
  "config overrides".If both exist, config overrides have precedence
  over class annotations.
 @since 2.8
 */
- (ComFasterxmlJacksonAnnotationJsonIgnoreProperties_Value *)getDefaultPropertyIgnoralsWithIOSClass:(IOSClass *)baseType
                                            withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)actualClass;

/*!
 @brief Accessor for default property inclusion to use for serialization,
  used unless overridden by per-type or per-property overrides.
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultPropertyInclusion;

/*!
 @brief Accessor for default property inclusion to use for serialization,
  considering possible per-type override for given base type.
 <br>
  NOTE: if no override found, defaults to value returned by 
 <code>getDefaultPropertyInclusion()</code>.
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultPropertyInclusionWithIOSClass:(IOSClass *)baseType;

/*!
 @brief Accessor for default property inclusion to use for serialization,
  considering possible per-type override for given base type; but
  if none found, returning given <code>defaultIncl</code>
 @param defaultIncl Inclusion setting to return if no overrides found.
 @since 2.8.2
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)getDefaultPropertyInclusionWithIOSClass:(IOSClass *)baseType
                                         withComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)defaultIncl;

/*!
 @brief Accessor for the baseline setter info used as the global baseline,
  not considering possible per-type overrides.
 @return Global base settings; never null
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonSetter_Value *)getDefaultSetterInfo;

/*!
 @brief Method called to locate a type info handler for types that do not have
  one explicitly declared via annotations (or other configuration).
 If such default handler is configured, it is returned; otherwise
  null is returned.
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)getDefaultTyperWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Accessor for object used for determining whether specific property elements
  (method, constructors, fields) can be auto-detected based on
  their visibility (access modifiers).Can be changed to allow
  different minimum visibility levels for auto-detection.
 Note
  that this is the global handler; individual types (classes)
  can further override active checker used (using 
 <code>JsonAutoDetect</code> annotation)
 */
- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)getDefaultVisibilityChecker;

/*!
 @brief Accessor for object used for determining whether specific property elements
  (method, constructors, fields) can be auto-detected based on
  their visibility (access modifiers).This is based on global defaults
  (as would be returned by <code>getDefaultVisibilityChecker()</code>, but
  then modified by possible class annotation (see <code>JsonAutoDetect</code>)
  and/or per-type config override (see <code>ConfigOverride.getVisibility()</code>).
 @since 2.9
 */
- (id<ComFasterxmlJacksonDatabindIntrospectVisibilityChecker>)getDefaultVisibilityCheckerWithIOSClass:(IOSClass *)baseType
                                              withComFasterxmlJacksonDatabindIntrospectAnnotatedClass:(ComFasterxmlJacksonDatabindIntrospectAnnotatedClass *)actualClass;

- (ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)getHandlerInstantiator;

/*!
 @brief Method for accessing the default <code>java.util.Locale</code> to use
  for formatting, unless overridden by local annotations.
 Initially set to <code>Locale.getDefault()</code>.
 */
- (JavaUtilLocale *)getLocale;

- (ComFasterxmlJacksonDatabindPropertyNamingStrategy *)getPropertyNamingStrategy;

- (ComFasterxmlJacksonDatabindJsontypeSubtypeResolver *)getSubtypeResolver;

/*!
 @brief Method for accessing the default <code>java.util.TimeZone</code> to use
  for formatting, unless overridden by local annotations.
 Initially set to <code>TimeZone.getDefault()</code>.
 */
- (JavaUtilTimeZone *)getTimeZone;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

/*!
 @brief "Bulk" access method for checking that all features specified by
  mask are enabled.
 @since 2.3
 */
- (jboolean)hasMapperFeaturesWithInt:(jint)featureMask;

/*!
 @brief Accessor for getting bean description that only contains class
  annotations: useful if no getter/setter/creator information is needed.
 */
- (ComFasterxmlJacksonDatabindBeanDescription *)introspectClassAnnotationsWithIOSClass:(IOSClass *)cls;

/*!
 @brief Accessor for getting bean description that only contains class
  annotations: useful if no getter/setter/creator information is needed.
 */
- (ComFasterxmlJacksonDatabindBeanDescription *)introspectClassAnnotationsWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Accessor for getting bean description that only contains immediate class
  annotations: ones from the class, and its direct mix-in, if any, but
  not from super types.
 */
- (ComFasterxmlJacksonDatabindBeanDescription *)introspectDirectClassAnnotationsWithIOSClass:(IOSClass *)cls;

/*!
 @brief Accessor for getting bean description that only contains immediate class
  annotations: ones from the class, and its direct mix-in, if any, but
  not from super types.
 */
- (ComFasterxmlJacksonDatabindBeanDescription *)introspectDirectClassAnnotationsWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method for determining whether annotation processing is enabled or not
  (default settings are typically that it is enabled; must explicitly disable).
 @return True if annotation processing is enabled; false if not
 */
- (jboolean)isAnnotationProcessingEnabled;

/*!
 @brief Accessor for simple mapper features (which are shared for
  serialization, deserialization)
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f;

/*!
 @brief Accessor for checking whether default settings for property handling
  indicate that properties should be alphabetically ordered or not.
 */
- (jboolean)shouldSortPropertiesAlphabetically;

/*!
 @brief Method that can be called to obtain an instance of <code>TypeIdResolver</code> of
  specified type.
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)typeIdResolverInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                                     withIOSClass:(IOSClass *)resolverClass;

/*!
 @brief Method that can be called to obtain an instance of <code>TypeIdResolver</code> of
  specified type.
 */
- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typeResolverBuilderInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                                               withIOSClass:(IOSClass *)builderClass;

/*!
 @brief Accessor for checking whether configuration indicates that
  "root wrapping" (use of an extra property/name pair at root level)
  is expected or not.
 */
- (jboolean)useRootWrapping;

/*!
 @brief Method for constructing and returning a new instance with specified
  mapper features enabled.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfig *)withWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)features;

/*!
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfig *)withWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)feature
                                                                                     withBoolean:(jboolean)state;

/*!
 @brief Method for constructing and returning a new instance with specified
  mapper features disabled.
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfig *)withoutWithComFasterxmlJacksonDatabindMapperFeatureArray:(IOSObjectArray *)features;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgBaseSettings:(ComFasterxmlJacksonDatabindCfgBaseSettings *)base
                                                                     withInt:(jint)mapperFeatures;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)src;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)src
                              withComFasterxmlJacksonDatabindCfgBaseSettings:(ComFasterxmlJacksonDatabindCfgBaseSettings *)base;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindCfgMapperConfig:(ComFasterxmlJacksonDatabindCfgMapperConfig *)src
                                                                     withInt:(jint)mapperFeatures;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindCfgMapperConfig)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgMapperConfig, _base_, ComFasterxmlJacksonDatabindCfgBaseSettings *)

/*!
 @since 2.7
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonDatabindCfgMapperConfig_get_EMPTY_INCLUDE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonDatabindCfgMapperConfig_EMPTY_INCLUDE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindCfgMapperConfig, EMPTY_INCLUDE, ComFasterxmlJacksonAnnotationJsonInclude_Value *)

/*!
 @since 2.7
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonDatabindCfgMapperConfig_get_EMPTY_FORMAT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonDatabindCfgMapperConfig_EMPTY_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindCfgMapperConfig, EMPTY_FORMAT, ComFasterxmlJacksonAnnotationJsonFormat_Value *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfig_initWithComFasterxmlJacksonDatabindCfgBaseSettings_withInt_(ComFasterxmlJacksonDatabindCfgMapperConfig *self, ComFasterxmlJacksonDatabindCfgBaseSettings *base, jint mapperFeatures);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfig_initWithComFasterxmlJacksonDatabindCfgMapperConfig_withInt_(ComFasterxmlJacksonDatabindCfgMapperConfig *self, ComFasterxmlJacksonDatabindCfgMapperConfig *src, jint mapperFeatures);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfig_initWithComFasterxmlJacksonDatabindCfgMapperConfig_withComFasterxmlJacksonDatabindCfgBaseSettings_(ComFasterxmlJacksonDatabindCfgMapperConfig *self, ComFasterxmlJacksonDatabindCfgMapperConfig *src, ComFasterxmlJacksonDatabindCfgBaseSettings *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgMapperConfig_initWithComFasterxmlJacksonDatabindCfgMapperConfig_(ComFasterxmlJacksonDatabindCfgMapperConfig *self, ComFasterxmlJacksonDatabindCfgMapperConfig *src);

FOUNDATION_EXPORT jint ComFasterxmlJacksonDatabindCfgMapperConfig_collectFeatureDefaultsWithIOSClass_(IOSClass *enumClass);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindCfgMapperConfig)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgMapperConfig")
