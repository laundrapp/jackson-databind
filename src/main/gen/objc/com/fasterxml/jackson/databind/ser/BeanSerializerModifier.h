//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerModifier")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializerModifier
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerModifier 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerModifier 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializerModifier

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBeanSerializerModifier_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerModifier || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBeanSerializerModifier))
#define ComFasterxmlJacksonDatabindSerBeanSerializerModifier_

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerBeanSerializerBuilder;
@class ComFasterxmlJacksonDatabindSerializationConfig;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@protocol JavaUtilList;

/*!
 @brief Abstract class that defines API for objects that can be registered (for <code>BeanSerializerFactory</code>
  to participate in constructing <code>BeanSerializer</code> instances.
 This is typically done by modules that want alter some aspects of serialization
  process; and is preferable to sub-classing of <code>BeanSerializerFactory</code>.
 <p>
  Sequence in which callback methods are called is as follows: 
 <ol>
   <li>After factory has collected tentative set of properties (instances of
      <code>BeanPropertyWriter</code>) is sent for modification via
      <code>changeProperties</code>. Changes can include removal, addition and
      replacement of suggested properties.  
 <li>Resulting set of properties are ordered (sorted) by factory, as per
      configuration, and then <code>orderProperties</code> is called to allow
      modifiers to alter ordering.  
 <li>After all bean properties and related information is accumulated,
      <code>updateBuilder</code> is called with builder, to allow builder state
      to be modified (including possibly replacing builder itself if necessary)  
 <li>Once all bean information has been determined,
      factory creates default <code>BeanSerializer</code> instance and passes
      it to modifiers using <code>modifySerializer</code>, for possible
      modification or replacement (by any <code>com.fasterxml.jackson.databind.JsonSerializer</code> instance) 
 </ol>
 <p>
  Default method implementations are "no-op"s, meaning that methods are implemented
  but have no effect.
 */
@interface ComFasterxmlJacksonDatabindSerBeanSerializerModifier : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called by <code>BeanSerializerFactory</code> with tentative set
  of discovered properties.
 Implementations can add, remove or replace any of passed properties.
  Properties <code>List</code> passed as argument is modifiable, and returned List must
  likewise be modifiable as it may be passed to multiple registered
  modifiers.
 */
- (id<JavaUtilList>)changePropertiesWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                        withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                      withJavaUtilList:(id<JavaUtilList>)beanProperties;

/*!
 @brief Method called by <code>DeserializerFactory</code> after it has constructed the
  standard serializer for given 
 <code>ArrayType</code>
  to make it possible to either replace or augment this serializer with
  additional functionality.
 @param config Configuration in use
 @param valueType Type of the value serializer is used for.
 @param beanDesc Details of the type in question, to allow checking class annotations
 @param serializer Default serializer that would be used.
 @return Serializer to use; either <code>serializer</code> that was passed
    in, or an instance method constructed.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyArraySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)valueType
                                                                        withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                         withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyCollectionLikeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindTypeCollectionLikeType:(ComFasterxmlJacksonDatabindTypeCollectionLikeType *)valueType
                                                                                 withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                  withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyCollectionSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)valueType
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                              withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyEnumSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                              withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                                                       withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                        withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @brief Method called by <code>DeserializerFactory</code> after it has constructed the
  default key serializer to use for serializing <code>java.util.Map</code> keys of
  given type.
 This makes it possible to either replace or augment default serializer with
  additional functionality.
 @param config Configuration in use
 @param valueType Type of keys the serializer is used for.
 @param beanDesc Details of the type in question, to allow checking class annotations
 @param serializer Default serializer that would be used.
 @return Serializer to use; either <code>serializer</code> that was passed
    in, or an instance method constructed.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyKeySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyMapLikeSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindTypeMapLikeType:(ComFasterxmlJacksonDatabindTypeMapLikeType *)valueType
                                                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                           withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifyMapSerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)valueType
                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @brief Method called by <code>BeanSerializerFactory</code> after constructing default
  bean serializer instance with properties collected and ordered earlier.
 Implementations can modify or replace given serializer and return serializer
  to use. Note that although initial serializer being passed is of type 
 <code>BeanSerializer</code>, modifiers may return serializers of other types;
  and this is why implementations must check for type before casting.
 <p>
  NOTE: since 2.2, gets called for serializer of those non-POJO types that
  do not go through any of more specific <code>modifyXxxSerializer</code>
  methods; mostly for JDK types like <code>java.util.Iterator</code> and such.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)modifySerializerWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                    withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)serializer;

/*!
 @brief Method called by <code>BeanSerializerFactory</code> with set of properties
  to serialize, in default ordering (based on defaults as well as 
  possible type annotations).
 Implementations can change ordering any way they like.
  Properties <code>List</code> passed as argument is modifiable, and returned List must
  likewise be modifiable as it may be passed to multiple registered
  modifiers.
 */
- (id<JavaUtilList>)orderPropertiesWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                       withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                     withJavaUtilList:(id<JavaUtilList>)beanProperties;

/*!
 @brief Method called by <code>BeanSerializerFactory</code> after collecting all information
  regarding POJO to serialize and updating builder with it, but before constructing
  serializer.
 Implementations may choose to modify state of builder (to affect serializer being
  built), or even completely replace it (if they want to build different kind of
  serializer). Typically, however, passed-in builder is returned, possibly with
  some modifications.
 */
- (ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)updateBuilderWithComFasterxmlJacksonDatabindSerializationConfig:(ComFasterxmlJacksonDatabindSerializationConfig *)config
                                                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                 withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerBeanSerializerModifier)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializerModifier_init(ComFasterxmlJacksonDatabindSerBeanSerializerModifier *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBeanSerializerModifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializerModifier")
