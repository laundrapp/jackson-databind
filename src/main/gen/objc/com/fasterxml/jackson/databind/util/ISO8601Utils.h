//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilISO8601Utils")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilISO8601Utils
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilISO8601Utils 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilISO8601Utils 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilISO8601Utils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilISO8601Utils_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilISO8601Utils || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilISO8601Utils))
#define ComFasterxmlJacksonDatabindUtilISO8601Utils_

@class JavaTextParsePosition;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;

/*!
 @brief Utilities methods for manipulating dates in iso8601 format.This is much much faster and GC friendly than using SimpleDateFormat so
  highly suitable if you (un)serialize lots of date objects.
 Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]
 - seealso: <a href="http://www.w3.org/TR/NOTE-datetime">this specification</a>
 */
@interface ComFasterxmlJacksonDatabindUtilISO8601Utils : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Format a date into 'yyyy-MM-ddThh:mm:ssZ' (default timezone, no milliseconds precision)
 @param date the date to format
 @return the date formatted as 'yyyy-MM-ddThh:mm:ssZ'
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Format a date into 'yyyy-MM-ddThh:mm:ss[.sss]Z' (GMT timezone)
 @param date the date to format
 @param millis true to include millis precision otherwise false
 @return the date formatted as 'yyyy-MM-ddThh:mm:ss[.sss]Z'
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)millis;

+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)millis
                withJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @brief Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
 @param date the date to format
 @param millis true to include millis precision otherwise false
 @param tz timezone to use for the formatting (UTC will produce 'Z')
 @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
 @since 2.9
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)millis
                withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                  withJavaUtilLocale:(JavaUtilLocale *)loc;

/*!
 @brief Parse a date from ISO-8601 formatted string.It expects a format
  [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?
 [Z|[+-]hh:mm]]
 @param date ISO string to parse in the appropriate format.
 @param pos The position to start parsing from, updated to where parsing stopped.
 @return the parsed date
 @throw ParseExceptionif the date is not in the appropriate format
 */
+ (JavaUtilDate *)parseWithNSString:(NSString *)date
          withJavaTextParsePosition:(JavaTextParsePosition *)pos;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindUtilISO8601Utils)

inline jint ComFasterxmlJacksonDatabindUtilISO8601Utils_get_DEF_8601_LEN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonDatabindUtilISO8601Utils_DEF_8601_LEN;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonDatabindUtilISO8601Utils, DEF_8601_LEN, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilISO8601Utils_init(ComFasterxmlJacksonDatabindUtilISO8601Utils *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilISO8601Utils *new_ComFasterxmlJacksonDatabindUtilISO8601Utils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilISO8601Utils *create_ComFasterxmlJacksonDatabindUtilISO8601Utils_init(void);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilISO8601Utils_formatWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilISO8601Utils_formatWithJavaUtilDate_withBoolean_(JavaUtilDate *date, jboolean millis);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilISO8601Utils_formatWithJavaUtilDate_withBoolean_withJavaUtilTimeZone_(JavaUtilDate *date, jboolean millis, JavaUtilTimeZone *tz);

FOUNDATION_EXPORT NSString *ComFasterxmlJacksonDatabindUtilISO8601Utils_formatWithJavaUtilDate_withBoolean_withJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilDate *date, jboolean millis, JavaUtilTimeZone *tz, JavaUtilLocale *loc);

FOUNDATION_EXPORT JavaUtilDate *ComFasterxmlJacksonDatabindUtilISO8601Utils_parseWithNSString_withJavaTextParsePosition_(NSString *date, JavaTextParsePosition *pos);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilISO8601Utils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilISO8601Utils")
