//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgBaseSettings")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindCfgBaseSettings
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgBaseSettings 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgBaseSettings 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindCfgBaseSettings

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindCfgBaseSettings_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgBaseSettings || defined(INCLUDE_ComFasterxmlJacksonDatabindCfgBaseSettings))
#define ComFasterxmlJacksonDatabindCfgBaseSettings_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgHandlerInstantiator;
@class ComFasterxmlJacksonDatabindIntrospectClassIntrospector;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class JavaTextDateFormat;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder;

/*!
 @brief Immutable container class used to store simple configuration
  settings.Since instances are fully immutable, instances can
  be freely shared and used without synchronization.
 */
@interface ComFasterxmlJacksonDatabindCfgBaseSettings : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief Introspector used to figure out Bean properties needed for bean serialization
  and deserialization.Overridable so that it is possible to change low-level
  details of introspection, like adding new annotation types.
   */
  ComFasterxmlJacksonDatabindIntrospectClassIntrospector *_classIntrospector_;
  /*!
   @brief Introspector used for accessing annotation value based configuration.
   */
  ComFasterxmlJacksonDatabindAnnotationIntrospector *_annotationIntrospector_;
  /*!
   @brief Custom property naming strategy in use, if any.
   */
  ComFasterxmlJacksonDatabindPropertyNamingStrategy *_propertyNamingStrategy_;
  /*!
   @brief Specific factory used for creating <code>JavaType</code> instances;
  needed to allow modules to add more custom type handling
  (mostly to support types of non-Java JVM languages)
   */
  ComFasterxmlJacksonDatabindTypeTypeFactory *_typeFactory_;
  /*!
   @brief Type information handler used for "untyped" values (ones declared
  to have type <code>Object.class</code>)
   */
  id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder> _typeResolverBuilder_;
  /*!
   @brief Custom date format to use for de-serialization.If specified, will be
  used instead of <code>com.fasterxml.jackson.databind.util.StdDateFormat</code>.
   <p>
  Note that the configured format object will be cloned once per
  deserialization process (first time it is needed)
   */
  JavaTextDateFormat *_dateFormat_;
  /*!
   @brief Object used for creating instances of handlers (serializers, deserializers,
  type and type id resolvers), given class to instantiate.This is typically
  used to do additional configuration (with dependency injection, for example)
  beyond simply construction of instances; or to use alternative constructors.
   */
  ComFasterxmlJacksonDatabindCfgHandlerInstantiator *_handlerInstantiator_;
  /*!
   @brief Default <code>java.util.Locale</code> used with serialization formats.
   Default value is <code>Locale.getDefault()</code>.
   */
  JavaUtilLocale *_locale_;
  /*!
   @brief Default <code>java.util.TimeZone</code> used with serialization formats,
  if (and only if!)
   explicitly set by use; otherwise `null` to indicate
  "use default", which means "UTC" (from Jackson 2.7); earlier versions
  (up to 2.6) used "GMT".
 <p>
  Note that if a new value is set, timezone is also assigned to 
 <code>_dateFormat</code> of this object.
   */
  JavaUtilTimeZone *_timeZone_;
  /*!
   @brief Explicitly default <code>Base64Variant</code> to use for handling
  binary data (<code>byte[]</code>), used with data formats
  that use base64 encoding (like JSON, CSV).
   @since 2.1
   */
  ComFasterxmlJacksonCoreBase64Variant *_defaultBase64_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectClassIntrospector:(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)ci
                                   withComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai
                                   withComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)pns
                                          withComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)tf
                              withComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder:(id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typer
                                                                  withJavaTextDateFormat:(JavaTextDateFormat *)dateFormat
                                   withComFasterxmlJacksonDatabindCfgHandlerInstantiator:(ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)hi
                                                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                    withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                                withComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)defaultBase64;

- (ComFasterxmlJacksonDatabindAnnotationIntrospector *)getAnnotationIntrospector;

- (ComFasterxmlJacksonCoreBase64Variant *)getBase64Variant;

- (ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)getClassIntrospector;

- (JavaTextDateFormat *)getDateFormat;

- (ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)getHandlerInstantiator;

- (JavaUtilLocale *)getLocale;

- (ComFasterxmlJacksonDatabindPropertyNamingStrategy *)getPropertyNamingStrategy;

- (JavaUtilTimeZone *)getTimeZone;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

- (id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)getTypeResolverBuilder;

/*!
 @brief Accessor that may be called to determine whether this settings object
  has been explicitly configured with a TimeZone (true), or is still
  relying on the default settings (false).
 @since 2.7
 */
- (jboolean)hasExplicitTimeZone;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)base64;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Fluent factory for constructing a new instance that uses specified TimeZone.
 Note that timezone used with also be assigned to configured <code>DateFormat</code>,
  changing time formatting defaults.
 */
- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withAppendedAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withClassIntrospectorWithComFasterxmlJacksonDatabindIntrospectClassIntrospector:(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)ci;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)df;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withHandlerInstantiatorWithComFasterxmlJacksonDatabindCfgHandlerInstantiator:(ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)hi;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withInsertedAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withPropertyNamingStrategyWithComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)pns;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withTypeFactoryWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)tf;

- (ComFasterxmlJacksonDatabindCfgBaseSettings *)withTypeResolverBuilderWithComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder:(id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)typer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindCfgBaseSettings)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _classIntrospector_, ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _annotationIntrospector_, ComFasterxmlJacksonDatabindAnnotationIntrospector *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _propertyNamingStrategy_, ComFasterxmlJacksonDatabindPropertyNamingStrategy *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _typeFactory_, ComFasterxmlJacksonDatabindTypeTypeFactory *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _typeResolverBuilder_, id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _dateFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _handlerInstantiator_, ComFasterxmlJacksonDatabindCfgHandlerInstantiator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _timeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgBaseSettings, _defaultBase64_, ComFasterxmlJacksonCoreBase64Variant *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgBaseSettings_initWithComFasterxmlJacksonDatabindIntrospectClassIntrospector_withComFasterxmlJacksonDatabindAnnotationIntrospector_withComFasterxmlJacksonDatabindPropertyNamingStrategy_withComFasterxmlJacksonDatabindTypeTypeFactory_withComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder_withJavaTextDateFormat_withComFasterxmlJacksonDatabindCfgHandlerInstantiator_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonCoreBase64Variant_(ComFasterxmlJacksonDatabindCfgBaseSettings *self, ComFasterxmlJacksonDatabindIntrospectClassIntrospector *ci, ComFasterxmlJacksonDatabindAnnotationIntrospector *ai, ComFasterxmlJacksonDatabindPropertyNamingStrategy *pns, ComFasterxmlJacksonDatabindTypeTypeFactory *tf, id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder> typer, JavaTextDateFormat *dateFormat, ComFasterxmlJacksonDatabindCfgHandlerInstantiator *hi, JavaUtilLocale *locale, JavaUtilTimeZone *tz, ComFasterxmlJacksonCoreBase64Variant *defaultBase64);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgBaseSettings *new_ComFasterxmlJacksonDatabindCfgBaseSettings_initWithComFasterxmlJacksonDatabindIntrospectClassIntrospector_withComFasterxmlJacksonDatabindAnnotationIntrospector_withComFasterxmlJacksonDatabindPropertyNamingStrategy_withComFasterxmlJacksonDatabindTypeTypeFactory_withComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder_withJavaTextDateFormat_withComFasterxmlJacksonDatabindCfgHandlerInstantiator_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonCoreBase64Variant_(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *ci, ComFasterxmlJacksonDatabindAnnotationIntrospector *ai, ComFasterxmlJacksonDatabindPropertyNamingStrategy *pns, ComFasterxmlJacksonDatabindTypeTypeFactory *tf, id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder> typer, JavaTextDateFormat *dateFormat, ComFasterxmlJacksonDatabindCfgHandlerInstantiator *hi, JavaUtilLocale *locale, JavaUtilTimeZone *tz, ComFasterxmlJacksonCoreBase64Variant *defaultBase64) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgBaseSettings *create_ComFasterxmlJacksonDatabindCfgBaseSettings_initWithComFasterxmlJacksonDatabindIntrospectClassIntrospector_withComFasterxmlJacksonDatabindAnnotationIntrospector_withComFasterxmlJacksonDatabindPropertyNamingStrategy_withComFasterxmlJacksonDatabindTypeTypeFactory_withComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder_withJavaTextDateFormat_withComFasterxmlJacksonDatabindCfgHandlerInstantiator_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonCoreBase64Variant_(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *ci, ComFasterxmlJacksonDatabindAnnotationIntrospector *ai, ComFasterxmlJacksonDatabindPropertyNamingStrategy *pns, ComFasterxmlJacksonDatabindTypeTypeFactory *tf, id<ComFasterxmlJacksonDatabindJsontypeTypeResolverBuilder> typer, JavaTextDateFormat *dateFormat, ComFasterxmlJacksonDatabindCfgHandlerInstantiator *hi, JavaUtilLocale *locale, JavaUtilTimeZone *tz, ComFasterxmlJacksonCoreBase64Variant *defaultBase64);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindCfgBaseSettings)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgBaseSettings")
