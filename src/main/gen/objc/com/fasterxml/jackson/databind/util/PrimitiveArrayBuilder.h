//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/PrimitiveArrayBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder))
#define ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_

@class ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node;

/*!
 @brief Base class for specialized primitive array builders.
 */
@interface ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder : NSObject {
 @public
  id _freeBuffer_;
  ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *_bufferHead_;
  ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *_bufferTail_;
  /*!
   @brief Number of total buffered entries in this buffer, counting all instances
  within linked list formed by following <code>_bufferHead</code>.
   */
  jint _bufferedEntryCount_;
}

#pragma mark Public

/*!
 @return Length of the next chunk to allocate
 */
- (id)appendCompletedChunkWithId:(id)fullChunk
                         withInt:(jint)fullChunkLength;

- (jint)bufferedSize;

- (id)completeAndClearBufferWithId:(id)lastChunk
                           withInt:(jint)lastChunkEntries;

- (id)resetAndStart;

#pragma mark Protected

- (instancetype __nonnull)init;

- (id)_constructArrayWithInt:(jint)len;

- (void)_reset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, _freeBuffer_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, _bufferHead_, ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, _bufferTail_, ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *)

/*!
 @brief Let's start with small chunks; typical usage is for small arrays anyway.
 */
inline jint ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_get_INITIAL_CHUNK_SIZE(void);
#define ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_INITIAL_CHUNK_SIZE 12
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, INITIAL_CHUNK_SIZE, jint)

/*!
 @brief Also: let's expand by doubling up until 64k chunks (which is 16k entries for
  32-bit machines)
 */
inline jint ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_get_SMALL_CHUNK_SIZE(void);
#define ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_SMALL_CHUNK_SIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, SMALL_CHUNK_SIZE, jint)

/*!
 @brief Let's limit maximum size of chunks we use; helps avoid excessive allocation
  overhead for huge data sets.
 For now, let's limit to quarter million entries, 1 meg chunks for 32-bit
  machines.
 */
inline jint ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_get_MAX_CHUNK_SIZE(void);
#define ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_MAX_CHUNK_SIZE 262144
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder, MAX_CHUNK_SIZE, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_init(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node))
#define ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node_

/*!
 @brief For actual buffering beyond the current buffer, we can actually
  use shared class which only deals with opaque "untyped" chunks.
 This works because <code>java.lang.System</code> does not
  take type; hence we can implement some aspects of primitive data
  handling in generic fashion.
 */
@interface ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node : NSObject {
 @public
  /*!
   @brief Data stored in this node.
   */
  id _data_;
  /*!
   @brief Number entries in the (untyped) array.Offset is assumed to be 0.
   */
  jint _dataLength_;
  ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *_next_;
}

#pragma mark Public

- (instancetype __nonnull)initWithId:(id)data
                             withInt:(jint)dataLen;

- (jint)copyDataWithId:(id)dst
               withInt:(jint)ptr OBJC_METHOD_FAMILY_NONE;

- (id)getData;

- (void)linkNextWithComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node:(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *)next;

- (ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node, _data_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node, _next_, ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node_initWithId_withInt_(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *self, id data, jint dataLen);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *new_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node_initWithId_withInt_(id data, jint dataLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node *create_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node_initWithId_withInt_(id data, jint dataLen);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder_Node)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilPrimitiveArrayBuilder")
