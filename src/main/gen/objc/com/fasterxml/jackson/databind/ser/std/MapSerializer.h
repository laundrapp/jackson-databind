//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdMapSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdMapSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdMapSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdMapSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdMapSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdMapSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdMapSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdMapSerializer))
#define ComFasterxmlJacksonDatabindSerStdMapSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerContainerSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContainerSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContainerSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContextualSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerImplPropertySerializerMap;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@class IOSObjectArray;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol ComFasterxmlJacksonDatabindSerPropertyFilter;
@protocol JavaLangReflectType;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Standard serializer implementation for serializing {link java.util.Map} types.
 <p>
  Note: about the only configurable setting currently is ability to filter out
  entries with specified names.
 */
@interface ComFasterxmlJacksonDatabindSerStdMapSerializer : ComFasterxmlJacksonDatabindSerContainerSerializer < ComFasterxmlJacksonDatabindSerContextualSerializer > {
 @public
  /*!
   @brief Map-valued property being serialized with this instance
   */
  id<ComFasterxmlJacksonDatabindBeanProperty> _property_;
  /*!
   @brief Whether static types should be used for serialization of values
  or not (if not, dynamic runtime type is used)
   */
  jboolean _valueTypeIsStatic_;
  /*!
   @brief Declared type of keys
   */
  ComFasterxmlJacksonDatabindJavaType *_keyType_;
  /*!
   @brief Declared type of contained values
   */
  ComFasterxmlJacksonDatabindJavaType *_valueType_;
  /*!
   @brief Key serializer to use, if it can be statically determined
   */
  ComFasterxmlJacksonDatabindJsonSerializer *_keySerializer_;
  /*!
   @brief Value serializer to use, if it can be statically determined
   */
  ComFasterxmlJacksonDatabindJsonSerializer *_valueSerializer_;
  /*!
   @brief Type identifier serializer used for values, if any.
   */
  ComFasterxmlJacksonDatabindJsontypeTypeSerializer *_valueTypeSerializer_;
  /*!
   @brief If value type cannot be statically determined, mapping from
  runtime value types to serializers are stored in this object.
   */
  ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *_dynamicValueSerializers_;
  /*!
   @brief Set of entries to omit during serialization, if any
   */
  id<JavaUtilSet> _ignoredEntries_;
  /*!
   @brief Id of the property filter to use, if any; null if none.
   @since 2.3
   */
  id _filterId_;
  /*!
   @brief Value that indicates suppression mechanism to use for <b>values contained</b>;
  either "filter" (of which <code>equals()</code> is called), or marker
  value of <code>MARKER_FOR_EMPTY</code>, or null to indicate no filtering for
  non-null values.
   Note that inclusion value for Map instance itself is handled by caller (POJO
  property that refers to the Map value).
   @since 2.5
   */
  id _suppressableValue_;
  /*!
   @brief Flag that indicates what to do with `null` values, distinct from
  handling of <code>_suppressableValue</code>
   @since 2.9
   */
  jboolean _suppressNulls_;
  /*!
   @brief Flag set if output is forced to be sorted by keys (usually due
  to annotation).
   @since 2.4
   */
  jboolean _sortKeys_;
}

#pragma mark Public

- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)_withValueTypeSerializerWithComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

/*!
 @since 2.8
 */
+ (ComFasterxmlJacksonDatabindSerStdMapSerializer *)constructWithJavaUtilSet:(id<JavaUtilSet>)ignoredEntries
                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)mapType
                                                                 withBoolean:(jboolean)staticValueType
                       withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                               withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
                               withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer
                                                                      withId:(id)filterId;

/*!
 @since 2.3
 */
+ (ComFasterxmlJacksonDatabindSerStdMapSerializer *)constructWithNSStringArray:(IOSObjectArray *)ignoredList
                                       withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)mapType
                                                                   withBoolean:(jboolean)staticValueType
                         withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
                                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer
                                                                        withId:(id)filterId;

- (ComFasterxmlJacksonDatabindJsonSerializer *)createContextualWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindJsonSerializer *)getContentSerializer;

- (ComFasterxmlJacksonDatabindJavaType *)getContentType;

/*!
 @brief Accessor for currently assigned key serializer.Note that
  this may return null during construction of <code>MapSerializer</code>:
  depedencies are resolved during <code>createContextual</code> method
  (which can be overridden by custom implementations), but for some
  dynamic types, it is possible that serializer is only resolved
  during actual serialization.
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)getKeySerializer;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (jboolean)hasSingleElementWithId:(id<JavaUtilMap>)value;

- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                              withId:(id<JavaUtilMap>)value;

- (void)serializeWithId:(id<JavaUtilMap>)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief General-purpose serialization for contents, where we do not necessarily know
  the value serialization, but 
  we do know that no value suppression is needed (which simplifies processing a bit)
 */
- (void)serializeFieldsWithJavaUtilMap:(id<JavaUtilMap>)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Method called to serialize fields, when the value type is statically known,
  so that value serializer is passed and does not need to be fetched from
  provider.
 */
- (void)serializeFieldsUsingWithJavaUtilMap:(id<JavaUtilMap>)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

/*!
 @brief Helper method used when we have a JSON Filter to use AND contents are
  "any properties" of a POJO.
 @param bean Enclosing POJO that has any-getter used to obtain "any properties"
 @since 2.9
 */
- (void)serializeFilteredAnyPropertiesWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                               withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                                                 withId:(id)bean
                                                                        withJavaUtilMap:(id<JavaUtilMap>)value
                                       withComFasterxmlJacksonDatabindSerPropertyFilter:(id<ComFasterxmlJacksonDatabindSerPropertyFilter>)filter
                                                                                 withId:(id)suppressableValue;

/*!
 @brief Helper method used when we have a JSON Filter to use for potentially
  filtering out Map entries.
 @since 2.5
 */
- (void)serializeFilteredFieldsWithJavaUtilMap:(id<JavaUtilMap>)value
      withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindSerPropertyFilter:(id<ComFasterxmlJacksonDatabindSerPropertyFilter>)filter
                                        withId:(id)suppressableValue;

/*!
 @brief Serialization method called when exclusion filtering needs to be applied.
 */
- (void)serializeOptionalFieldsWithJavaUtilMap:(id<JavaUtilMap>)value
      withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                        withId:(id)suppressableValue;

/*!
 @since 2.5
 */
- (void)serializeTypedFieldsWithJavaUtilMap:(id<JavaUtilMap>)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                     withId:(id)suppressableValue;

- (void)serializeWithTypeWithId:(id<JavaUtilMap>)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

/*!
 */
- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)withContentInclusionWithId:(id)suppressableValue;

/*!
 @brief Mutant factory for constructing an instance with different inclusion strategy
  for content (Map values).
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)withContentInclusionWithId:(id)suppressableValue
                                                                   withBoolean:(jboolean)suppressNulls;

- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)withFilterIdWithId:(id)filterId;

/*!
 @since 2.4
 */
- (ComFasterxmlJacksonDatabindSerStdMapSerializer *)withResolvedWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                                              withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
                                                              withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer
                                                                                            withJavaUtilSet:(id<JavaUtilSet>)ignored
                                                                                                withBoolean:(jboolean)sortKeys;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdMapSerializer:(ComFasterxmlJacksonDatabindSerStdMapSerializer *)src
                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                   withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
                                   withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer
                                                                 withJavaUtilSet:(id<JavaUtilSet>)ignoredEntries;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdMapSerializer:(ComFasterxmlJacksonDatabindSerStdMapSerializer *)src
                                                                          withId:(id)filterId
                                                                     withBoolean:(jboolean)sortKeys;

/*!
 @since 2.5
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdMapSerializer:(ComFasterxmlJacksonDatabindSerStdMapSerializer *)src
                           withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                                                          withId:(id)suppressableValue;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdMapSerializer:(ComFasterxmlJacksonDatabindSerStdMapSerializer *)src
                           withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
                                                                          withId:(id)suppressableValue
                                                                     withBoolean:(jboolean)suppressNulls;

/*!
 @since 2.5
 */
- (instancetype __nonnull)initWithJavaUtilSet:(id<JavaUtilSet>)ignoredEntries
      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)keyType
      withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)valueType
                                  withBoolean:(jboolean)valueTypeIsStatic
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)vts
withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)keySerializer
withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)valueSerializer;

/*!
 @since 2.5
 */
- (void)_ensureOverride;

/*!
 @since 2.9
 */
- (void)_ensureOverrideWithNSString:(NSString *)method;

- (ComFasterxmlJacksonDatabindJsonSerializer *)_findAndAddDynamicWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)map
                                                                                                                withIOSClass:(IOSClass *)type
                                                                           withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (ComFasterxmlJacksonDatabindJsonSerializer *)_findAndAddDynamicWithComFasterxmlJacksonDatabindSerImplPropertySerializerMap:(ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)map
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                           withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @since 2.8.7
 */
- (jboolean)_hasNullKeyWithJavaUtilMap:(id<JavaUtilMap>)input;

- (id<JavaUtilMap>)_orderEntriesWithJavaUtilMap:(id<JavaUtilMap>)input
       withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (void)_writeNullKeyedEntryWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                   withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                              withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerContainerSerializer:(ComFasterxmlJacksonDatabindSerContainerSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdMapSerializer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _property_, id<ComFasterxmlJacksonDatabindBeanProperty>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _keyType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _valueType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _keySerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _valueSerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _valueTypeSerializer_, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _dynamicValueSerializers_, ComFasterxmlJacksonDatabindSerImplPropertySerializerMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _ignoredEntries_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _filterId_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdMapSerializer, _suppressableValue_, id)

inline ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindSerStdMapSerializer_get_UNSPECIFIED_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindJavaType *ComFasterxmlJacksonDatabindSerStdMapSerializer_UNSPECIFIED_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdMapSerializer, UNSPECIFIED_TYPE, ComFasterxmlJacksonDatabindJavaType *)

/*!
 @since 2.9
 */
inline id ComFasterxmlJacksonDatabindSerStdMapSerializer_get_MARKER_FOR_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindSerStdMapSerializer_MARKER_FOR_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindSerStdMapSerializer, MARKER_FOR_EMPTY, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithJavaUtilSet_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_(ComFasterxmlJacksonDatabindSerStdMapSerializer *self, id<JavaUtilSet> ignoredEntries, ComFasterxmlJacksonDatabindJavaType *keyType, ComFasterxmlJacksonDatabindJavaType *valueType, jboolean valueTypeIsStatic, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *new_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithJavaUtilSet_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_(id<JavaUtilSet> ignoredEntries, ComFasterxmlJacksonDatabindJavaType *keyType, ComFasterxmlJacksonDatabindJavaType *valueType, jboolean valueTypeIsStatic, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *create_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithJavaUtilSet_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_(id<JavaUtilSet> ignoredEntries, ComFasterxmlJacksonDatabindJavaType *keyType, ComFasterxmlJacksonDatabindJavaType *valueType, jboolean valueTypeIsStatic, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdMapSerializer *self, ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer, id<JavaUtilSet> ignoredEntries);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *new_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer, id<JavaUtilSet> ignoredEntries) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *create_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer, id<JavaUtilSet> ignoredEntries);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *self, ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue, jboolean suppressNulls);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *new_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue, jboolean suppressNulls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *create_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue, jboolean suppressNulls);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *self, ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id filterId, jboolean sortKeys);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *new_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id filterId, jboolean sortKeys) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *create_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withId_withBoolean_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, id filterId, jboolean sortKeys);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *ComFasterxmlJacksonDatabindSerStdMapSerializer_constructWithJavaUtilSet_withComFasterxmlJacksonDatabindJavaType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withId_(id<JavaUtilSet> ignoredEntries, ComFasterxmlJacksonDatabindJavaType *mapType, jboolean staticValueType, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer, id filterId);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindSerStdMapSerializer *self, ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *new_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *create_ComFasterxmlJacksonDatabindSerStdMapSerializer_initWithComFasterxmlJacksonDatabindSerStdMapSerializer_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindSerStdMapSerializer *src, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, id suppressableValue);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdMapSerializer *ComFasterxmlJacksonDatabindSerStdMapSerializer_constructWithNSStringArray_withComFasterxmlJacksonDatabindJavaType_withBoolean_withComFasterxmlJacksonDatabindJsontypeTypeSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withComFasterxmlJacksonDatabindJsonSerializer_withId_(IOSObjectArray *ignoredList, ComFasterxmlJacksonDatabindJavaType *mapType, jboolean staticValueType, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *vts, ComFasterxmlJacksonDatabindJsonSerializer *keySerializer, ComFasterxmlJacksonDatabindJsonSerializer *valueSerializer, id filterId);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdMapSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdMapSerializer")
