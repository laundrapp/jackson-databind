//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/JsonSerializer.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/ser/ResolvableSerializer.h"
#include "com/fasterxml/jackson/databind/ser/SerializerCache.h"
#include "com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.h"
#include "com/fasterxml/jackson/databind/util/TypeKey.h"
#include "java/util/HashMap.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface ComFasterxmlJacksonDatabindSerSerializerCache () {
 @public
  /*!
   @brief Shared, modifiable map; all access needs to be through synchronized blocks.
   <p>
  NOTE: keys are of various types (see below for key types), in addition to
  basic <code>JavaType</code> used for "untyped" serializers.
   */
  JavaUtilHashMap *_sharedMap_;
  /*!
   @brief Most recent read-only instance, created from _sharedMap, if any.
   */
  JavaUtilConcurrentAtomicAtomicReference *_readOnlyMap_;
}

- (ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *)_makeReadOnlyLookupMap;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerSerializerCache, _sharedMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerSerializerCache, _readOnlyMap_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *ComFasterxmlJacksonDatabindSerSerializerCache__makeReadOnlyLookupMap(ComFasterxmlJacksonDatabindSerSerializerCache *self);

@implementation ComFasterxmlJacksonDatabindSerSerializerCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerSerializerCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *)getReadOnlyLookupMap {
  ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *m = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) get];
  if (m != nil) {
    return m;
  }
  return ComFasterxmlJacksonDatabindSerSerializerCache__makeReadOnlyLookupMap(self);
}

- (ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *)_makeReadOnlyLookupMap {
  return ComFasterxmlJacksonDatabindSerSerializerCache__makeReadOnlyLookupMap(self);
}

- (jint)size {
  @synchronized(self) {
    return [((JavaUtilHashMap *) nil_chk(_sharedMap_)) size];
  }
}

- (ComFasterxmlJacksonDatabindJsonSerializer *)untypedValueSerializerWithIOSClass:(IOSClass *)type {
  @synchronized(self) {
    return JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(_sharedMap_)) getWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithIOSClass_withBoolean_(type, false)]);
  }
}

- (ComFasterxmlJacksonDatabindJsonSerializer *)untypedValueSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type {
  @synchronized(self) {
    return JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(_sharedMap_)) getWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithComFasterxmlJacksonDatabindJavaType_withBoolean_(type, false)]);
  }
}

- (ComFasterxmlJacksonDatabindJsonSerializer *)typedValueSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type {
  @synchronized(self) {
    return JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(_sharedMap_)) getWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithComFasterxmlJacksonDatabindJavaType_withBoolean_(type, true)]);
  }
}

- (ComFasterxmlJacksonDatabindJsonSerializer *)typedValueSerializerWithIOSClass:(IOSClass *)cls {
  @synchronized(self) {
    return JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(_sharedMap_)) getWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithIOSClass_withBoolean_(cls, true)]);
  }
}

- (void)addTypedSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                    withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(_sharedMap_)) putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithComFasterxmlJacksonDatabindJavaType_withBoolean_(type, true) withId:ser] == nil) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) setWithId:nil];
    }
  }
}

- (void)addTypedSerializerWithIOSClass:(IOSClass *)cls
withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(_sharedMap_)) putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithIOSClass_withBoolean_(cls, true) withId:ser] == nil) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) setWithId:nil];
    }
  }
}

- (void)addAndResolveNonTypedSerializerWithIOSClass:(IOSClass *)type
      withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
  withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(_sharedMap_)) putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithIOSClass_withBoolean_(type, false) withId:ser] == nil) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) setWithId:nil];
    }
    if ([ComFasterxmlJacksonDatabindSerResolvableSerializer_class_() isInstance:ser]) {
      [((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) nil_chk(((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) cast_check(ser, ComFasterxmlJacksonDatabindSerResolvableSerializer_class_())))) resolveWithComFasterxmlJacksonDatabindSerializerProvider:provider];
    }
  }
}

- (void)addAndResolveNonTypedSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                 withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                             withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(_sharedMap_)) putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithComFasterxmlJacksonDatabindJavaType_withBoolean_(type, false) withId:ser] == nil) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) setWithId:nil];
    }
    if ([ComFasterxmlJacksonDatabindSerResolvableSerializer_class_() isInstance:ser]) {
      [((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) nil_chk(((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) cast_check(ser, ComFasterxmlJacksonDatabindSerResolvableSerializer_class_())))) resolveWithComFasterxmlJacksonDatabindSerializerProvider:provider];
    }
  }
}

- (void)addAndResolveNonTypedSerializerWithIOSClass:(IOSClass *)rawType
            withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)fullType
      withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
  withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  @synchronized(self) {
    id ob1 = [((JavaUtilHashMap *) nil_chk(_sharedMap_)) putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithIOSClass_withBoolean_(rawType, false) withId:ser];
    id ob2 = [_sharedMap_ putWithId:create_ComFasterxmlJacksonDatabindUtilTypeKey_initWithComFasterxmlJacksonDatabindJavaType_withBoolean_(fullType, false) withId:ser];
    if ((ob1 == nil) || (ob2 == nil)) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_readOnlyMap_)) setWithId:nil];
    }
    if ([ComFasterxmlJacksonDatabindSerResolvableSerializer_class_() isInstance:ser]) {
      [((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) nil_chk(((id<ComFasterxmlJacksonDatabindSerResolvableSerializer>) cast_check(ser, ComFasterxmlJacksonDatabindSerResolvableSerializer_class_())))) resolveWithComFasterxmlJacksonDatabindSerializerProvider:provider];
    }
  }
}

- (void)flush {
  @synchronized(self) {
    [((JavaUtilHashMap *) nil_chk(_sharedMap_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(_sharedMap_);
  RELEASE_(_readOnlyMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap;", 0x32, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonSerializer;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonSerializer;", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonSerializer;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJsonSerializer;", 0x1, 5, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 13, 14, -1, -1 },
    { NULL, "V", 0x1, 11, 15, 13, 16, -1, -1 },
    { NULL, "V", 0x1, 11, 17, 13, 18, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getReadOnlyLookupMap);
  methods[2].selector = @selector(_makeReadOnlyLookupMap);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(untypedValueSerializerWithIOSClass:);
  methods[5].selector = @selector(untypedValueSerializerWithComFasterxmlJacksonDatabindJavaType:);
  methods[6].selector = @selector(typedValueSerializerWithComFasterxmlJacksonDatabindJavaType:);
  methods[7].selector = @selector(typedValueSerializerWithIOSClass:);
  methods[8].selector = @selector(addTypedSerializerWithComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindJsonSerializer:);
  methods[9].selector = @selector(addTypedSerializerWithIOSClass:withComFasterxmlJacksonDatabindJsonSerializer:);
  methods[10].selector = @selector(addAndResolveNonTypedSerializerWithIOSClass:withComFasterxmlJacksonDatabindJsonSerializer:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[11].selector = @selector(addAndResolveNonTypedSerializerWithComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindJsonSerializer:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[12].selector = @selector(addAndResolveNonTypedSerializerWithIOSClass:withComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindJsonSerializer:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[13].selector = @selector(flush);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sharedMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "_readOnlyMap_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "untypedValueSerializer", "LIOSClass;", "(Ljava/lang/Class<*>;)Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;", "LComFasterxmlJacksonDatabindJavaType;", "(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;", "typedValueSerializer", "addTypedSerializer", "LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonDatabindJsonSerializer;", "(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;)V", "LIOSClass;LComFasterxmlJacksonDatabindJsonSerializer;", "(Ljava/lang/Class<*>;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;)V", "addAndResolveNonTypedSerializer", "LIOSClass;LComFasterxmlJacksonDatabindJsonSerializer;LComFasterxmlJacksonDatabindSerializerProvider;", "LComFasterxmlJacksonDatabindJsonMappingException;", "(Ljava/lang/Class<*>;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;Lcom/fasterxml/jackson/databind/SerializerProvider;)V", "LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonDatabindJsonSerializer;LComFasterxmlJacksonDatabindSerializerProvider;", "(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;Lcom/fasterxml/jackson/databind/SerializerProvider;)V", "LIOSClass;LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonDatabindJsonSerializer;LComFasterxmlJacksonDatabindSerializerProvider;", "(Ljava/lang/Class<*>;Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;Lcom/fasterxml/jackson/databind/SerializerProvider;)V", "Ljava/util/HashMap<Lcom/fasterxml/jackson/databind/util/TypeKey;Lcom/fasterxml/jackson/databind/JsonSerializer<Ljava/lang/Object;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lcom/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerSerializerCache = { "SerializerCache", "com.fasterxml.jackson.databind.ser", ptrTable, methods, fields, 7, 0x11, 14, 2, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindSerSerializerCache;
}

@end

void ComFasterxmlJacksonDatabindSerSerializerCache_init(ComFasterxmlJacksonDatabindSerSerializerCache *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_sharedMap_, new_JavaUtilHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_readOnlyMap_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

ComFasterxmlJacksonDatabindSerSerializerCache *new_ComFasterxmlJacksonDatabindSerSerializerCache_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerSerializerCache, init)
}

ComFasterxmlJacksonDatabindSerSerializerCache *create_ComFasterxmlJacksonDatabindSerSerializerCache_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerSerializerCache, init)
}

ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *ComFasterxmlJacksonDatabindSerSerializerCache__makeReadOnlyLookupMap(ComFasterxmlJacksonDatabindSerSerializerCache *self) {
  @synchronized(self) {
    ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *m = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->_readOnlyMap_)) get];
    if (m == nil) {
      m = ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_fromWithJavaUtilHashMap_(self->_sharedMap_);
      [self->_readOnlyMap_ setWithId:m];
    }
    return JreRetainedLocalValue(m);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerSerializerCache)
