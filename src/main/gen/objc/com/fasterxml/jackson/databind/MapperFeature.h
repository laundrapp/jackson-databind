//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindMapperFeature")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindMapperFeature
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindMapperFeature 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindMapperFeature 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindMapperFeature

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindMapperFeature_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindMapperFeature || defined(INCLUDE_ComFasterxmlJacksonDatabindMapperFeature))
#define ComFasterxmlJacksonDatabindMapperFeature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#define INCLUDE_ComFasterxmlJacksonDatabindCfgConfigFeature 1
#include "com/fasterxml/jackson/databind/cfg/ConfigFeature.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonDatabindMapperFeature_Enum) {
  ComFasterxmlJacksonDatabindMapperFeature_Enum_USE_ANNOTATIONS = 0,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_USE_GETTERS_AS_SETTERS = 1,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_PROPAGATE_TRANSIENT_MARKER = 2,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_AUTO_DETECT_CREATORS = 3,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_AUTO_DETECT_FIELDS = 4,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_AUTO_DETECT_GETTERS = 5,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_AUTO_DETECT_IS_GETTERS = 6,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_AUTO_DETECT_SETTERS = 7,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_REQUIRE_SETTERS_FOR_GETTERS = 8,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_ALLOW_FINAL_FIELDS_AS_MUTATORS = 9,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_INFER_PROPERTY_MUTATORS = 10,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES = 11,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_CAN_OVERRIDE_ACCESS_MODIFIERS = 12,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_OVERRIDE_PUBLIC_ACCESS_MODIFIERS = 13,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_USE_STATIC_TYPING = 14,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_DEFAULT_VIEW_INCLUSION = 15,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_SORT_PROPERTIES_ALPHABETICALLY = 16,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_ACCEPT_CASE_INSENSITIVE_PROPERTIES = 17,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_ACCEPT_CASE_INSENSITIVE_ENUMS = 18,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_USE_WRAPPER_NAME_AS_PROPERTY_NAME = 19,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_USE_STD_BEAN_NAMING = 20,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_ALLOW_EXPLICIT_PROPERTY_RENAMING = 21,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_ALLOW_COERCION_OF_SCALARS = 22,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_IGNORE_DUPLICATE_MODULE_REGISTRATIONS = 23,
  ComFasterxmlJacksonDatabindMapperFeature_Enum_IGNORE_MERGE_FOR_UNMERGEABLE = 24,
};

/*!
 @brief Enumeration that defines simple on/off features to set
  for <code>ObjectMapper</code>, and accessible (but not changeable)
  via <code>ObjectReader</code> and <code>ObjectWriter</code> (as well as
  through various convenience methods through context objects).
 <p>
  Note that in addition to being only mutable via <code>ObjectMapper</code>,
  changes only take effect when done <b>before any serialization or
  deserialization</b> calls -- that is, caller must follow
  "configure-then-use" pattern.
 */
@interface ComFasterxmlJacksonDatabindMapperFeature : JavaLangEnum < ComFasterxmlJacksonDatabindCfgConfigFeature >

#pragma mark Public

- (jboolean)enabledByDefault;

- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonDatabindMapperFeature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindMapperFeature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_values_[];

/*!
 @brief Feature that determines whether annotation introspection
  is used for configuration; if enabled, configured 
 <code>AnnotationIntrospector</code> will be used: if disabled,
  no annotations are considered.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_USE_ANNOTATIONS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, USE_ANNOTATIONS)

/*!
 @brief Feature that determines whether otherwise regular "getter"
  methods (but only ones that handle Collections and Maps,
  not getters of other type)
  can be used for purpose of getting a reference to a Collection
  and Map to modify the property, without requiring a setter
  method.
 This is similar to how JAXB framework sets Collections and
  Maps: no setter is involved, just setter.
 <p>
  Note that such getters-as-setters methods have lower
  precedence than setters, so they are only used if no
  setter is found for the Map/Collection property.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_USE_GETTERS_AS_SETTERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, USE_GETTERS_AS_SETTERS)

/*!
 @brief Feature that determines how <code>transient</code> modifier for fields
  is handled: if disabled, it is only taken to mean exclusion of the field
  as accessor; if true, it is taken to imply removal of the whole property.
 <p>
  Feature is disabled by default, meaning that existence of `transient`
  for a field does not necessarily lead to ignoral of getters or setters
  but just ignoring the use of field for access.
 @since 2.6
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_PROPAGATE_TRANSIENT_MARKER(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, PROPAGATE_TRANSIENT_MARKER)

/*!
 @brief Feature that determines whether "creator" methods are
  automatically detected by consider public constructors,
  and static single argument methods with name "valueOf".
 If disabled, only methods explicitly annotated are considered
  creator methods (except for the no-arg default constructor which
  is always considered a factory method).
 <p>
  Note that this feature has lower precedence than per-class
  annotations, and is only used if there isn't more granular
  configuration available.
 <P>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_AUTO_DETECT_CREATORS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, AUTO_DETECT_CREATORS)

/*!
 @brief Feature that determines whether non-static fields are recognized as
  properties.
 If yes, then all public member fields
  are considered as properties. If disabled, only fields explicitly
  annotated are considered property fields.
 <p>
  Note that this feature has lower precedence than per-class
  annotations, and is only used if there isn't more granular
  configuration available.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_AUTO_DETECT_FIELDS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, AUTO_DETECT_FIELDS)

/*!
 @brief Feature that determines whether regular "getter" methods are
  automatically detected based on standard Bean naming convention
  or not.If yes, then all public zero-argument methods that
  start with prefix "get" 
  are considered as getters.
 If disabled, only methods explicitly  annotated are considered getters.
 <p>
  Note that since version 1.3, this does <b>NOT</b> include
  "is getters" (see <code>AUTO_DETECT_IS_GETTERS</code> for details)
 <p>
  Note that this feature has lower precedence than per-class
  annotations, and is only used if there isn't more granular
  configuration available.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_AUTO_DETECT_GETTERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, AUTO_DETECT_GETTERS)

/*!
 @brief Feature that determines whether "is getter" methods are
  automatically detected based on standard Bean naming convention
  or not.If yes, then all public zero-argument methods that
  start with prefix "is", and whose return type is boolean
  are considered as "is getters".
 If disabled, only methods explicitly annotated are considered getters.
 <p>
  Note that this feature has lower precedence than per-class
  annotations, and is only used if there isn't more granular
  configuration available.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_AUTO_DETECT_IS_GETTERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, AUTO_DETECT_IS_GETTERS)

/*!
 @brief Feature that determines whether "setter" methods are
  automatically detected based on standard Bean naming convention
  or not.If yes, then all public one-argument methods that
  start with prefix "set"
  are considered setters.
 If disabled, only methods explicitly
  annotated are considered setters.
 <p>
  Note that this feature has lower precedence than per-class
  annotations, and is only used if there isn't more granular
  configuration available.
 <P>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_AUTO_DETECT_SETTERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, AUTO_DETECT_SETTERS)

/*!
 @brief Feature that determines whether getters (getter methods)
  can be auto-detected if there is no matching mutator (setter,
  constructor parameter or field) or not: if set to true,
  only getters that match a mutator are auto-discovered; if
  false, all auto-detectable getters can be discovered.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_REQUIRE_SETTERS_FOR_GETTERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, REQUIRE_SETTERS_FOR_GETTERS)

/*!
 @brief Feature that determines whether member fields declared as 'final' may
  be auto-detected to be used mutators (used to change value of the logical
  property) or not.If enabled, 'final' access modifier has no effect, and
  such fields may be detected according to usual visibility and inference
  rules; if disabled, such fields are NOT used as mutators except if
  explicitly annotated for such use.
 <p>
  Feature is enabled by default, for backwards compatibility reasons.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_ALLOW_FINAL_FIELDS_AS_MUTATORS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, ALLOW_FINAL_FIELDS_AS_MUTATORS)

/*!
 @brief Feature that determines whether member mutators (fields and
  setters) may be "pulled in" even if they are not visible,
  as long as there is a visible accessor (getter or field) with same name.
 For example: field "value" may be inferred as mutator,
  if there is visible or explicitly marked getter "getValue()".
  If enabled, inferring is enabled; otherwise (disabled) only visible and
  explicitly annotated accessors are ever used.
 <p>
  Note that 'getters' are never inferred and need to be either visible (including
  bean-style naming) or explicitly annotated.
 <p>
  Feature is enabled by default.
 @since 2.2
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_INFER_PROPERTY_MUTATORS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, INFER_PROPERTY_MUTATORS)

/*!
 @brief Feature that determines handling of <code>java.beans.ConstructorProperties<code>
  annotation: when enabled, it is considered as alias of 
 <code>com.fasterxml.jackson.annotation.JsonCreator</code>, to mean that constructor
  should be considered a property-based Creator; when disabled, only constructor
  parameter name information is used, but constructor is NOT considered an explicit
  Creator (although may be discovered as one using other annotations or heuristics).
 <p>
  Feature is mostly used to help interoperability with frameworks like Lombok
  that may automatically generate <code>ConstructorProperties</code> annotation
  but without necessarily meaning that constructor should be used as Creator
  for deserialization.
 <p>
  Feature is enabled by default.
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)

/*!
 @brief Feature that determines whether method and field access
  modifier settings can be overridden when accessing
  properties.If enabled, method 
 <code>java.lang.reflect.AccessibleObject</code>
  may be called to enable access to otherwise unaccessible objects.
 <p>
  Note that this setting may have significant performance implications,
  since access override helps remove costly access checks on each
  and every Reflection access. If you are considering disabling
  this feature, be sure to verify performance consequences if usage
  is performance sensitive.
  Also note that performance effects vary between Java platforms
  (JavaSE vs Android, for example), as well as JDK versions: older
  versions seemed to have more significant performance difference.
 <p>
  Conversely, on some platforms, it may be necessary to disable this feature
  as platform does not allow such calls. For example, when developing
  Applets (or other Java code that runs on tightly restricted sandbox),
  it may be necessary to disable the feature regardless of performance effects.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_CAN_OVERRIDE_ACCESS_MODIFIERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, CAN_OVERRIDE_ACCESS_MODIFIERS)

/*!
 @brief Feature that determines that forces call to 
 <code>java.lang.reflect.AccessibleObject</code> even for 
 <code>public</code> accessors -- that is, even if no such call is
  needed from functionality perspective -- if call is allowed
  (that is, <code>CAN_OVERRIDE_ACCESS_MODIFIERS</code> is set to true).
 The main reason to enable this feature is possible performance
  improvement as JDK does not have to perform access checks; these
  checks are otherwise made for all accessors, including public ones,
  and may result in slower Reflection calls. Exact impact (if any)
  depends on Java platform (Java SE, Android) as well as JDK version.
 <p>
  Feature is enabled by default, for legacy reasons (it was the behavior
  until 2.6)
 @since 2.7
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_OVERRIDE_PUBLIC_ACCESS_MODIFIERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, OVERRIDE_PUBLIC_ACCESS_MODIFIERS)

/*!
 @brief Feature that determines whether the type detection for
  serialization should be using actual dynamic runtime type,
  or declared static type.
 Note that deserialization always uses declared static types
  since no runtime types are available (as we are creating
  instances after using type information).
 <p>
  This global default value can be overridden at class, method
  or field level by using <code>JsonSerialize.typing</code> annotation
  property.
 <p>
  Feature is disabled by default which means that dynamic runtime types
  are used (instead of declared static types) for serialization.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_USE_STATIC_TYPING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, USE_STATIC_TYPING)

/*!
 @brief Feature that determines whether properties that have no view
  annotations are included in JSON serialization views (see 
 <code>com.fasterxml.jackson.annotation.JsonView</code> for more
  details on JSON Views).
 If enabled, non-annotated properties will be included;
  when disabled, they will be excluded. So this feature
  changes between "opt-in" (feature disabled) and
  "opt-out" (feature enabled) modes.
 <p>
  Default value is enabled, meaning that non-annotated
  properties are included in all views if there is no 
 <code>com.fasterxml.jackson.annotation.JsonView</code> annotation.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_DEFAULT_VIEW_INCLUSION(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, DEFAULT_VIEW_INCLUSION)

/*!
 @brief Feature that defines default property serialization order used
  for POJO fields (note: does <b>not</b> apply to <code>java.util.Map</code>
  serialization!)
 :
  if enabled, default ordering is alphabetic (similar to
  how <code>com.fasterxml.jackson.annotation.JsonPropertyOrder</code>
  works); if disabled, order is unspecified (based on what JDK gives
  us, which may be declaration order, but is not guaranteed).
 <p>
  Note that this is just the default behavior, and can be overridden by
  explicit overrides in classes (for example with 
 <code>com.fasterxml.jackson.annotation.JsonPropertyOrder</code> annotation)
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_SORT_PROPERTIES_ALPHABETICALLY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, SORT_PROPERTIES_ALPHABETICALLY)

/*!
 @brief Feature that will allow for more forgiving deserialization of incoming JSON.
 If enabled, the bean properties will be matched using their lower-case equivalents,
  meaning that any case-combination (incoming and matching names are canonicalized
  by lower-casing) should work.
 <p>
  Note that there is additional performance overhead since incoming property
  names need to be lower-cased before comparison, for cases where there are upper-case
  letters. Overhead for names that are already lower-case should be negligible however.
 <p>
  Feature is disabled by default.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_ACCEPT_CASE_INSENSITIVE_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, ACCEPT_CASE_INSENSITIVE_PROPERTIES)

/*!
 @brief Feature that determines if Enum deserialization should be case sensitive or not.
 If enabled, Enum deserialization will ignore case, that is, case of incoming String
  value and enum id (dependant on other settings, either `name()`, `toString()`, or
  explicit override) do not need to match. 
 <p>
  Feature is disabled by default.
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_ACCEPT_CASE_INSENSITIVE_ENUMS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, ACCEPT_CASE_INSENSITIVE_ENUMS)

/*!
 @brief Feature that can be enabled to make property names be
  overridden by wrapper name (usually detected with annotations
  as defined by <code>AnnotationIntrospector.findWrapperName</code>.
 If enabled, all properties that have associated non-empty Wrapper
  name will use that wrapper name instead of property name.
  If disabled, wrapper name is only used for wrapping (if anything).
 <p>
  Feature is disabled by default.
 @since 2.1
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_USE_WRAPPER_NAME_AS_PROPERTY_NAME(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, USE_WRAPPER_NAME_AS_PROPERTY_NAME)

/*!
 @brief Feature that may be enabled to enforce strict compatibility with
  Bean name introspection, instead of slightly different mechanism
  Jackson defaults to.
 Specific difference is that Jackson always lower cases leading upper-case
  letters, so "getURL()" becomes "url" property; whereas standard Bean
  naming <b>only</b> lower-cases the first letter if it is NOT followed by
  another upper-case letter (so "getURL()" would result in "URL" property).
 <p>
  Feature is disabled by default for backwards compatibility purposes: earlier
  Jackson versions used Jackson's own mechanism.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_USE_STD_BEAN_NAMING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, USE_STD_BEAN_NAMING)

/*!
 @brief Feature that when enabled will allow explicitly named properties (i.e., fields or methods
  annotated with <code>com.fasterxml.jackson.annotation.JsonProperty</code>("explicitName")) to
  be re-named by a <code>PropertyNamingStrategy</code>, if one is configured.
 <p>
  Feature is disabled by default.
 @since 2.7
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_ALLOW_EXPLICIT_PROPERTY_RENAMING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, ALLOW_EXPLICIT_PROPERTY_RENAMING)

/*!
 @brief Feature that determines whether coercions from secondary representations are allowed
  for simple non-textual scalar types: numbers and booleans.This includes `primitive`
  types and their wrappers, but excludes `java.lang.String` and date/time types.
 <p>
  When feature is disabled, only strictly compatible input may be bound: numbers for
  numbers, boolean values for booleans. When feature is enabled, conversions from
  JSON String are allowed, as long as textual value matches (for example, String
  "true" is allowed as equivalent of JSON boolean token `true`; or String "1.0"
  for `double`).
 <p>
  Note that it is possible that other configurability options can override this
  in closer scope (like on per-type or per-property basis); this is just the global
  default.
 <p>
  Feature is enabled by default (for backwards compatibility since this was the
  default behavior)
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_ALLOW_COERCION_OF_SCALARS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, ALLOW_COERCION_OF_SCALARS)

/*!
 @brief Feature that determines whether multiple registrations of same module
  should be ignored or not; if enabled, only the first registration call
  results in module being called, and possible duplicate calls are silently
  ignored; if disabled, no checking is done and all registration calls are
  dispatched to module.
 <p>
  Definition of "same module" is based on using <code>Module.getTypeId()</code>;
  modules with same non-null <code>type id</code> are considered same for
  purposes of duplicate registration. This also avoids having to keep track
  of actual module instances; only ids will be kept track of (and only if
  this feature is enabled).
 <p>
  Feature is enabled by default.
 @since 2.5
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_IGNORE_DUPLICATE_MODULE_REGISTRATIONS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, IGNORE_DUPLICATE_MODULE_REGISTRATIONS)

/*!
 @brief Setting that determines what happens if an attempt is made to explicitly
  "merge" value of a property, where value does not support merging; either
  merging is skipped and new value is created (<code>true</code>) or
  an exception is thrown (false).
 <p>
  Feature is disabled by default since non-mergeable property types are ignored
  even if defaults call for merging, and usually explicit per-type or per-property
  settings for such types should result in an exception.
 @since 2.9
 */
inline ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_get_IGNORE_MERGE_FOR_UNMERGEABLE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonDatabindMapperFeature, IGNORE_MERGE_FOR_UNMERGEABLE)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindMapperFeature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindMapperFeature *ComFasterxmlJacksonDatabindMapperFeature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindMapperFeature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindMapperFeature")
