//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/Converter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilConverter
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilConverter
#ifdef INCLUDE_ComFasterxmlJacksonDatabindUtilConverter_None
#define INCLUDE_ComFasterxmlJacksonDatabindUtilConverter 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilConverter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilConverter))
#define ComFasterxmlJacksonDatabindUtilConverter_

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;

/*!
 @brief Helper interface for things that convert Objects of
  one type to another.
 <p>
  NOTE: implementors are strongly encouraged to extend <code>StdConverter</code>
  instead of directly implementing <code>Converter</code>, since that can
  help with default implementation of typically boiler-plate code.
 - seealso: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
 - seealso: com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer
 @since 2.1
 */
@protocol ComFasterxmlJacksonDatabindUtilConverter < JavaObject >

/*!
 @brief Main conversion method.
 */
- (id)convertWithId:(id)value;

/*!
 @brief Method that can be used to find out actual input (source) type; this
  usually can be determined from type parameters, but may need
  to be implemented differently from programmatically defined
  converters (which cannot change static type parameter bindings).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJavaType *)getInputTypeWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)typeFactory;

/*!
 @brief Method that can be used to find out actual output (target) type; this
  usually can be determined from type parameters, but may need
  to be implemented differently from programmatically defined
  converters (which cannot change static type parameter bindings).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJavaType *)getOutputTypeWithComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)typeFactory;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilConverter)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilConverter)

#endif

#if !defined (ComFasterxmlJacksonDatabindUtilConverter_None_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilConverter_None))
#define ComFasterxmlJacksonDatabindUtilConverter_None_

/*!
 @brief This marker class is only to be used with annotations, to
  indicate that <b>no converter is to be used</b>.
 <p>
  Specifically, this class is to be used as the marker for
  annotation <code>com.fasterxml.jackson.databind.annotation.JsonSerialize</code>,
  property <code>converter</code> (and related)
 @since 2.2
 */
@interface ComFasterxmlJacksonDatabindUtilConverter_None : NSObject < ComFasterxmlJacksonDatabindUtilConverter >

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilConverter_None)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilConverter_None_init(ComFasterxmlJacksonDatabindUtilConverter_None *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilConverter_None)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilConverter")
