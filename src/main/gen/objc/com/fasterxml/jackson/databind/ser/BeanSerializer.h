//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerBeanSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerBeanSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerBeanSerializer))
#define ComFasterxmlJacksonDatabindSerBeanSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdBeanSerializerBase 1
#include "com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindSerBeanSerializerBuilder;
@class ComFasterxmlJacksonDatabindSerImplObjectIdWriter;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindUtilNameTransformer;
@class IOSObjectArray;
@protocol JavaUtilSet;

/*!
 @brief Serializer class that can serialize Java objects that map
  to JSON Object output.Internally handling is mostly dealt with
  by a sequence of <code>BeanPropertyWriter</code>s that will handle
  access value to serialize and call appropriate serializers to
  write out JSON.
 <p>
  Implementation note: we will post-process resulting serializer,
  to figure out actual serializers for final types. This must be
  done from <code>resolve</code> method, and NOT from constructor;
  otherwise we could end up with an infinite loop.
 */
@interface ComFasterxmlJacksonDatabindSerBeanSerializer : ComFasterxmlJacksonDatabindSerStdBeanSerializerBase

#pragma mark Public

/*!
 @param builder Builder object that contains collected information    that may be needed for serializer
 @param properties Property writers used for actual serialization
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
              withComFasterxmlJacksonDatabindSerBeanSerializerBuilder:(ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *)builder
            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)properties
            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)filteredProperties;

/*!
 @brief Method for constructing dummy bean serializer; one that
  never outputs any properties
 */
+ (ComFasterxmlJacksonDatabindSerBeanSerializer *)createDummyWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)forType;

/*!
 @brief Main serialization method that will delegate actual output to
  configured 
 <code>BeanPropertyWriter</code> instances.
 */
- (void)serializeWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

- (NSString *)description;

- (ComFasterxmlJacksonDatabindJsonSerializer *)unwrappingSerializerWithComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)unwrapper;

- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withFilterIdWithId:(id)filterId;

- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withObjectIdWriterWithComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter;

#pragma mark Protected

/*!
 @brief Alternate copy constructor that can be used to construct
  standard <code>BeanSerializer</code> passing an instance of
  "compatible enough" source serializer.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                 withComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                 withComFasterxmlJacksonDatabindSerImplObjectIdWriter:(ComFasterxmlJacksonDatabindSerImplObjectIdWriter *)objectIdWriter
                                                                               withId:(id)filterId;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)src
                                                                      withJavaUtilSet:(id<JavaUtilSet>)toIgnore;

/*!
 @brief Implementation has to check whether as-array serialization
  is possible reliably; if (and only if) so, will construct
  a <code>BeanAsArraySerializer</code>, otherwise will return this
  serializer as is.
 */
- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)asArraySerializer;

- (ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)withIgnoralsWithJavaUtilSet:(id<JavaUtilSet>)toIgnore;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)arg0
                            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)arg1
                            withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray:(IOSObjectArray *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)arg0
                                   withComFasterxmlJacksonDatabindUtilNameTransformer:(ComFasterxmlJacksonDatabindUtilNameTransformer *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase:(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *)arg0
                                                                    withNSStringArray:(IOSObjectArray *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerBeanSerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindSerBeanSerializerBuilder_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_(ComFasterxmlJacksonDatabindSerBeanSerializer *self, ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *builder, IOSObjectArray *properties, IOSObjectArray *filteredProperties);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *new_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindSerBeanSerializerBuilder_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_(ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *builder, IOSObjectArray *properties, IOSObjectArray *filteredProperties) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *create_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindSerBeanSerializerBuilder_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_withComFasterxmlJacksonDatabindSerBeanPropertyWriterArray_(ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonDatabindSerBeanSerializerBuilder *builder, IOSObjectArray *properties, IOSObjectArray *filteredProperties);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_(ComFasterxmlJacksonDatabindSerBeanSerializer *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *new_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *create_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_(ComFasterxmlJacksonDatabindSerBeanSerializer *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *new_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *create_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_withId_(ComFasterxmlJacksonDatabindSerBeanSerializer *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter, id filterId);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *new_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_withId_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter, id filterId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *create_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withComFasterxmlJacksonDatabindSerImplObjectIdWriter_withId_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, ComFasterxmlJacksonDatabindSerImplObjectIdWriter *objectIdWriter, id filterId);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerBeanSerializer *self, ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, id<JavaUtilSet> toIgnore);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *new_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, id<JavaUtilSet> toIgnore) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *create_ComFasterxmlJacksonDatabindSerBeanSerializer_initWithComFasterxmlJacksonDatabindSerStdBeanSerializerBase_withJavaUtilSet_(ComFasterxmlJacksonDatabindSerStdBeanSerializerBase *src, id<JavaUtilSet> toIgnore);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerBeanSerializer *ComFasterxmlJacksonDatabindSerBeanSerializer_createDummyWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *forType);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerBeanSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerBeanSerializer")
