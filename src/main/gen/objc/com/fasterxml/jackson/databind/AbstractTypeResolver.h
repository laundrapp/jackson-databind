//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAbstractTypeResolver")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindAbstractTypeResolver
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAbstractTypeResolver 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindAbstractTypeResolver 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindAbstractTypeResolver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindAbstractTypeResolver_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindAbstractTypeResolver || defined(INCLUDE_ComFasterxmlJacksonDatabindAbstractTypeResolver))
#define ComFasterxmlJacksonDatabindAbstractTypeResolver_

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;

/*!
 @brief Defines interface for resolvers that can resolve abstract types into concrete
  ones; either by using static mappings, or possibly by materializing
  implementations dynamically.
 */
@interface ComFasterxmlJacksonDatabindAbstractTypeResolver : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Try to locate a subtype for given abstract type, to either resolve
  to a concrete type, or at least to a more-specific (and hopefully supported)
  abstract type, one which may have registered deserializers.
 Method is called before trying to locate registered deserializers
  (as well as standard abstract type defaulting that core Jackson does),
  so it is typically implemented to add custom mappings of common abstract
  types (like specify which concrete implementation to use for binding 
 <code>java.util.List</code>s).
 <p>
  Note that this method does not necessarily have to do full resolution
  of bindings; that is, it is legal to return type that could be further
  resolved: caller is expected to keep calling this method on registered
  resolvers, until a concrete type is located.
 @param config Configuration in use; should always be of type     
  <code> DeserializationConfig </code>
 */
- (ComFasterxmlJacksonDatabindJavaType *)findTypeMappingWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method called to try to resolve an abstract type into
  concrete type (usually for purposes of deserializing),
  when no concrete implementation was found.
 It will be called after checking all other possibilities,
  including defaulting.
 @param config Configuration in use; should always be of type     
  <code> DeserializationConfig </code>
 @param typeDesc Description of the POJO type to resolve
 @return Resolved concrete type (which should retain generic
     type parameters of input type, if any), if resolution succeeds;
     null if resolver does not know how to resolve given type
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)resolveAbstractTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                  withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)typeDesc;

/*!
 @brief Older variant of <code>BeanDescription)</code>;
  obsoleted in 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)resolveAbstractTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                         withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindAbstractTypeResolver)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindAbstractTypeResolver_init(ComFasterxmlJacksonDatabindAbstractTypeResolver *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindAbstractTypeResolver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindAbstractTypeResolver")
