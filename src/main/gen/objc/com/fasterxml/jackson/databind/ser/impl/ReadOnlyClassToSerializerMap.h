//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap || defined(INCLUDE_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap))
#define ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class IOSClass;
@class JavaUtilHashMap;
@protocol JavaUtilMap;

/*!
 @brief Optimized lookup table for accessing two types of serializers; typed
  and non-typed.Only accessed from a single thread, so no synchronization
  needed for accessors.
 <p>
  Note that before 2.6 this class was much smaller, and referred most
  operations to separate <code>JsonSerializerMap</code>, but in 2.6
  functions were combined.
 */
@interface ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)serializers;

/*!
 @brief Factory method for constructing an instance.
 */
+ (ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *)fromWithJavaUtilHashMap:(JavaUtilHashMap *)src;

- (jint)size;

- (ComFasterxmlJacksonDatabindJsonSerializer *)typedValueSerializerWithIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonDatabindJsonSerializer *)typedValueSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindJsonSerializer *)untypedValueSerializerWithIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonDatabindJsonSerializer *)untypedValueSerializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_initWithJavaUtilMap_(ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *self, id<JavaUtilMap> serializers);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *new_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_initWithJavaUtilMap_(id<JavaUtilMap> serializers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *create_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_initWithJavaUtilMap_(id<JavaUtilMap> serializers);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap *ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap_fromWithJavaUtilHashMap_(JavaUtilHashMap *src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerImplReadOnlyClassToSerializerMap")
