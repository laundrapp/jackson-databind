//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/introspect/AnnotationMap.h"
#include "java/lang/Iterable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

__attribute__((unused)) static jboolean ComFasterxmlJacksonDatabindIntrospectAnnotationMap__addWithJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *self, id<JavaLangAnnotationAnnotation> ann);

@implementation ComFasterxmlJacksonDatabindIntrospectAnnotationMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)ofWithIOSClass:(IOSClass *)type
                                      withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)value {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationMap_ofWithIOSClass_withJavaLangAnnotationAnnotation_(type, value);
}

- (instancetype __nonnull)initWithJavaUtilHashMap:(JavaUtilHashMap *)a {
  ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(self, a);
  return self;
}

- (id<JavaLangAnnotationAnnotation>)getWithIOSClass:(IOSClass *)cls {
  if (_annotations_ == nil) {
    return nil;
  }
  return [_annotations_ getWithId:cls];
}

- (jboolean)hasWithIOSClass:(IOSClass *)cls {
  if (_annotations_ == nil) {
    return false;
  }
  return [_annotations_ containsKeyWithId:cls];
}

- (jboolean)hasOneOfWithIOSClassArray:(IOSObjectArray *)annoClasses {
  if (_annotations_ != nil) {
    for (jint i = 0, end = ((IOSObjectArray *) nil_chk(annoClasses))->size_; i < end; ++i) {
      if ([((JavaUtilHashMap *) nil_chk(_annotations_)) containsKeyWithId:IOSObjectArray_Get(annoClasses, i)]) {
        return true;
      }
    }
  }
  return false;
}

- (id<JavaLangIterable>)annotations {
  if (_annotations_ == nil || [_annotations_ size] == 0) {
    return JavaUtilCollections_emptyList();
  }
  return [_annotations_ values];
}

+ (ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)mergeWithComFasterxmlJacksonDatabindIntrospectAnnotationMap:(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)primary
                                                             withComFasterxmlJacksonDatabindIntrospectAnnotationMap:(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *)secondary {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationMap_mergeWithComFasterxmlJacksonDatabindIntrospectAnnotationMap_withComFasterxmlJacksonDatabindIntrospectAnnotationMap_(primary, secondary);
}

- (jint)size {
  return (_annotations_ == nil) ? 0 : [((JavaUtilHashMap *) nil_chk(_annotations_)) size];
}

- (jboolean)addIfNotPresentWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  if (_annotations_ == nil || ![_annotations_ containsKeyWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType]]) {
    ComFasterxmlJacksonDatabindIntrospectAnnotationMap__addWithJavaLangAnnotationAnnotation_(self, ann);
    return true;
  }
  return false;
}

- (jboolean)addWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationMap__addWithJavaLangAnnotationAnnotation_(self, ann);
}

- (NSString *)description {
  if (_annotations_ == nil) {
    return @"[null]";
  }
  return [_annotations_ description];
}

- (jboolean)_addWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)ann {
  return ComFasterxmlJacksonDatabindIntrospectAnnotationMap__addWithJavaLangAnnotationAnnotation_(self, ann);
}

- (void)dealloc {
  RELEASE_(_annotations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 20, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ofWithIOSClass:withJavaLangAnnotationAnnotation:);
  methods[2].selector = @selector(initWithJavaUtilHashMap:);
  methods[3].selector = @selector(getWithIOSClass:);
  methods[4].selector = @selector(hasWithIOSClass:);
  methods[5].selector = @selector(hasOneOfWithIOSClassArray:);
  methods[6].selector = @selector(annotations);
  methods[7].selector = @selector(mergeWithComFasterxmlJacksonDatabindIntrospectAnnotationMap:withComFasterxmlJacksonDatabindIntrospectAnnotationMap:);
  methods[8].selector = @selector(size);
  methods[9].selector = @selector(addIfNotPresentWithJavaLangAnnotationAnnotation:);
  methods[10].selector = @selector(addWithJavaLangAnnotationAnnotation:);
  methods[11].selector = @selector(description);
  methods[12].selector = @selector(_addWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_annotations_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 21, -1 },
  };
  static const void *ptrTable[] = { "of", "LIOSClass;LJavaLangAnnotationAnnotation;", "(Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;)Lcom/fasterxml/jackson/databind/introspect/AnnotationMap;", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;>;)V", "get", "LIOSClass;", "<A::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TA;>;)TA;", "has", "(Ljava/lang/Class<*>;)Z", "hasOneOf", "[LIOSClass;", "([Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "()Ljava/lang/Iterable<Ljava/lang/annotation/Annotation;>;", "merge", "LComFasterxmlJacksonDatabindIntrospectAnnotationMap;LComFasterxmlJacksonDatabindIntrospectAnnotationMap;", "addIfNotPresent", "LJavaLangAnnotationAnnotation;", "add", "toString", "_add", "Ljava/util/HashMap<Ljava/lang/Class<*>;Ljava/lang/annotation/Annotation;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindIntrospectAnnotationMap = { "AnnotationMap", "com.fasterxml.jackson.databind.introspect", ptrTable, methods, fields, 7, 0x11, 13, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindIntrospectAnnotationMap;
}

@end

void ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *new_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationMap, init)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationMap, init)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *ComFasterxmlJacksonDatabindIntrospectAnnotationMap_ofWithIOSClass_withJavaLangAnnotationAnnotation_(IOSClass *type, id<JavaLangAnnotationAnnotation> value) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initialize();
  JavaUtilHashMap *ann = create_JavaUtilHashMap_initWithInt_(4);
  [ann putWithId:type withId:value];
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(ann);
}

void ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *self, JavaUtilHashMap *a) {
  NSObject_init(self);
  JreStrongAssign(&self->_annotations_, a);
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *new_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(JavaUtilHashMap *a) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationMap, initWithJavaUtilHashMap_, a)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(JavaUtilHashMap *a) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindIntrospectAnnotationMap, initWithJavaUtilHashMap_, a)
}

ComFasterxmlJacksonDatabindIntrospectAnnotationMap *ComFasterxmlJacksonDatabindIntrospectAnnotationMap_mergeWithComFasterxmlJacksonDatabindIntrospectAnnotationMap_withComFasterxmlJacksonDatabindIntrospectAnnotationMap_(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *primary, ComFasterxmlJacksonDatabindIntrospectAnnotationMap *secondary) {
  ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initialize();
  if (primary == nil || primary->_annotations_ == nil || [primary->_annotations_ isEmpty]) {
    return secondary;
  }
  if (secondary == nil || secondary->_annotations_ == nil || [secondary->_annotations_ isEmpty]) {
    return primary;
  }
  JavaUtilHashMap *annotations = create_JavaUtilHashMap_init();
  for (id<JavaLangAnnotationAnnotation> __strong ann in nil_chk([((JavaUtilHashMap *) nil_chk(secondary->_annotations_)) values])) {
    [annotations putWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType] withId:ann];
  }
  for (id<JavaLangAnnotationAnnotation> __strong ann in nil_chk([((JavaUtilHashMap *) nil_chk(primary->_annotations_)) values])) {
    [annotations putWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType] withId:ann];
  }
  return create_ComFasterxmlJacksonDatabindIntrospectAnnotationMap_initWithJavaUtilHashMap_(annotations);
}

jboolean ComFasterxmlJacksonDatabindIntrospectAnnotationMap__addWithJavaLangAnnotationAnnotation_(ComFasterxmlJacksonDatabindIntrospectAnnotationMap *self, id<JavaLangAnnotationAnnotation> ann) {
  if (self->_annotations_ == nil) {
    JreStrongAssignAndConsume(&self->_annotations_, new_JavaUtilHashMap_init());
  }
  id<JavaLangAnnotationAnnotation> previous = [self->_annotations_ putWithId:[((id<JavaLangAnnotationAnnotation>) nil_chk(ann)) annotationType] withId:ann];
  return (previous == nil) || ![((id<JavaLangAnnotationAnnotation>) nil_chk(previous)) isEqual:ann];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindIntrospectAnnotationMap)
