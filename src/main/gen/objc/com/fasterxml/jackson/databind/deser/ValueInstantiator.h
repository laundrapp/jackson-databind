//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserValueInstantiator
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserValueInstantiator
#ifdef INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base
#define INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserValueInstantiator_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator))
#define ComFasterxmlJacksonDatabindDeserValueInstantiator_

@class ComFasterxmlJacksonDatabindDeserImplPropertyValueBuffer;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedParameter;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedWithParams;
@class ComFasterxmlJacksonDatabindJavaType;
@class IOSClass;
@class IOSObjectArray;

/*!
 @brief Class that defines simple API implemented by objects that create value
  instances.Some or all of properties of value instances may 
  be initialized by instantiator, rest being populated by deserializer,
  to which value instance is passed.
 Since different kinds of JSON values (structured and scalar)
  may be bound to Java values, in some cases instantiator
  fully defines resulting value; this is the case when JSON value
  is a scalar value (String, number, boolean).
 <p>
  Note that this type is not parameterized (even though it would seemingly
  make sense), because such type information cannot be use effectively
  during runtime: access is always using either wildcard type, or just
  basic <code>java.lang.Object</code>; and so adding type parameter seems
  like unnecessary extra work.
 <p>
  Actual implementations are strongly recommended to be based on 
 <code>com.fasterxml.jackson.databind.deser.std.StdValueInstantiator</code>
  which implements all methods, and as such will be compatible
  across versions even if new methods were added to this interface.
 */
@interface ComFasterxmlJacksonDatabindDeserValueInstantiator : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method that can be called to check whether a double (boolean / Boolean) based
  creator is available to use (to call <code>createFromDouble</code>).
 */
- (jboolean)canCreateFromBoolean;

/*!
 @brief Method that can be called to check whether a double (double / Double) based
  creator is available to use (to call <code>createFromDouble</code>).
 */
- (jboolean)canCreateFromDouble;

/*!
 @brief Method that can be called to check whether an integer (int, Integer) based
  creator is available to use (to call <code>createFromInt</code>).
 */
- (jboolean)canCreateFromInt;

/*!
 @brief Method that can be called to check whether a long (long, Long) based
  creator is available to use (to call <code>createFromLong</code>).
 */
- (jboolean)canCreateFromLong;

/*!
 @brief Method that can be called to check whether a property-based creator
  (argument-taking constructor or factory method)
  is available to instantiate values from JSON Object
 */
- (jboolean)canCreateFromObjectWith;

/*!
 @brief Method that can be called to check whether a String-based creator
  is available for this instantiator
 */
- (jboolean)canCreateFromString;

/*!
 @brief Method that can be called to check whether a array-delegate-based creator
  (single-arg constructor or factory method)
  is available for this instantiator
 @since 2.7
 */
- (jboolean)canCreateUsingArrayDelegate;

/*!
 @brief Method that can be called to check whether a default creator (constructor,
  or no-arg static factory method)
  is available for this instantiator
 */
- (jboolean)canCreateUsingDefault;

/*!
 @brief Method that can be called to check whether a delegate-based creator (single-arg
  constructor or factory method)
  is available for this instantiator
 */
- (jboolean)canCreateUsingDelegate;

/*!
 @brief Method that will return true if any of <code>canCreateXxx</code> method
  returns true: that is, if there is any way that an instance could
  be created.
 */
- (jboolean)canInstantiate;

- (id)createFromBooleanWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                 withBoolean:(jboolean)value;

- (id)createFromDoubleWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                 withDouble:(jdouble)value;

- (id)createFromIntWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                 withInt:(jint)value;

- (id)createFromLongWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                 withLong:(jlong)value;

/*!
 @brief Method called to create value instance from JSON Object when
  instantiation arguments are passed; this is done, for example when passing information
  specified with "Creator" annotations.
 <p>
  This method is called if <code>getFromObjectArguments</code> returns
  a non-empty List of arguments.
 */
- (id)createFromObjectWithWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                              withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Method that delegates to 
 <code>Object[])</code> by
  default, but can be overridden if the application should have customized
  behavior with respect to missing properties.
 <p>
  The default implementation of this method uses 
 <code>PropertyValueBuffer.getParameters(SettableBeanProperty[])</code> to read
  and validate all properties in bulk, possibly substituting defaults for
  missing properties or throwing exceptions for missing properties.  An
  overridden implementation of this method could, for example, use 
 <code>PropertyValueBuffer.hasParameter(SettableBeanProperty)</code> and 
 <code>PropertyValueBuffer.getParameter(SettableBeanProperty)</code> to safely
  read the present properties only, and to have some other behavior for the
  missing properties.
 @since 2.8
 */
- (id)createFromObjectWithWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                  withComFasterxmlJacksonDatabindDeserSettableBeanPropertyArray:(IOSObjectArray *)props
                    withComFasterxmlJacksonDatabindDeserImplPropertyValueBuffer:(ComFasterxmlJacksonDatabindDeserImplPropertyValueBuffer *)buffer;

- (id)createFromStringWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                               withNSString:(NSString *)value;

/*!
 @brief Method to called to create value instance from JSON Array using
  an intermediate "delegate" value to pass to createor method
 */
- (id)createUsingArrayDelegateWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                             withId:(id)delegate;

/*!
 @brief Method called to create value instance from a JSON value when
  no data needs to passed to creator (constructor, factory method);
  typically this will call the default constructor of the value object.
 It will only be used if more specific creator methods are not
  applicable; hence "default".
 <p>
  This method is called if <code>getFromObjectArguments</code> returns
  null or empty List.
 */
- (id)createUsingDefaultWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

/*!
 @brief Method to called to create value instance from JSON Object using
  an intermediate "delegate" value to pass to createor method
 */
- (id)createUsingDelegateWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                        withId:(id)delegate;

/*!
 @brief Method that can be called to try to access member (constructor,
  static factory method) that is used as the "array delegate creator".
 Note that implementations not required to return actual object
  they use (or, they may use some other instantiation) method.
  That is, even if <code>canCreateUsingArrayDelegate()</code> returns true,
  this method may return null .
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedWithParams *)getArrayDelegateCreator;

/*!
 @brief Method that can be used to determine what is the type of array delegate
  type to use, if any; if no delegates are used, will return null.If
  non-null type is returned, deserializer will bind JSON into specified
  type (using standard deserializer for that type), and pass that to
  instantiator.
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJavaType *)getArrayDelegateTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Method that can be called to try to access member (constructor,
  static factory method) that is used as the "default creator"
  (creator that is called without arguments; typically default
  [zero-argument] constructor of the type).
 Note that implementations not required to return actual object
  they use (or, they may use some other instantiation) method.
  That is, even if <code>canCreateUsingDefault()</code> returns true,
  this method may return null .
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedWithParams *)getDefaultCreator;

/*!
 @brief Method that can be called to try to access member (constructor,
  static factory method) that is used as the "delegate creator".
 Note that implementations not required to return actual object
  they use (or, they may use some other instantiation) method.
  That is, even if <code>canCreateUsingDelegate()</code> returns true,
  this method may return null .
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedWithParams *)getDelegateCreator;

/*!
 @brief Method that can be used to determine what is the type of delegate
  type to use, if any; if no delegates are used, will return null.
 If non-null type is returned, deserializer will bind JSON into
  specified type (using standard deserializer for that type), and
  pass that to instantiator.
 */
- (ComFasterxmlJacksonDatabindJavaType *)getDelegateTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief Method called to determine types of instantiation arguments
  to use when creating instances with creator arguments
  (when <code>canCreateFromObjectWith()</code> returns  true).
 These arguments are bound from JSON, using specified
  property types to locate deserializers.
 <p>
  NOTE: all properties will be of type 
 <code>com.fasterxml.jackson.databind.deser.CreatorProperty</code>.
 */
- (IOSObjectArray *)getFromObjectArgumentsWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config;

/*!
 @brief If an incomplete creator was found, this is the first parameter that
  needs further annotation to help make the creator complete.
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedParameter *)getIncompleteParameter;

/*!
 @brief Accessor for raw (type-erased) type of instances to create.
 <p>
  NOTE: since this method has not existed since beginning of
  Jackson 2.0 series, default implementation will just return 
 <code>Object.class</code>; implementations are expected
  to override it with real value.
 @since 2.8
 */
- (IOSClass *)getValueClass;

/*!
 @brief Method that returns description of the value type this instantiator
  handles.Used for error messages, diagnostics.
 */
- (NSString *)getValueTypeDesc;

/*!
 @brief Method that can be called to try to access member (constructor,
  static factory method) that is used as the "non-default creator"
  (constructor or factory method that takes one or more arguments).
 Note that implementations not required to return actual object
  they use (or, they may use some other instantiation) method.
  That is, even if <code>canCreateFromObjectWith()</code> returns true,
  this method may return null .
 */
- (ComFasterxmlJacksonDatabindIntrospectAnnotatedWithParams *)getWithArgsCreator;

#pragma mark Protected

/*!
 @since 2.4 (demoted from <code>StdValueInstantiator</code>)
 */
- (id)_createFromStringFallbacksWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                         withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserValueInstantiator)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserValueInstantiator_init(ComFasterxmlJacksonDatabindDeserValueInstantiator *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserValueInstantiator)

#endif

#if !defined (ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable))
#define ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable_

@class ComFasterxmlJacksonDatabindDeserValueInstantiator;

/*!
 @since 2.9
 */
@protocol ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable < JavaObject >

- (ComFasterxmlJacksonDatabindDeserValueInstantiator *)getValueInstantiator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserValueInstantiator_Gettable)

#endif

#if !defined (ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base))
#define ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_

@class ComFasterxmlJacksonDatabindJavaType;
@class IOSClass;

/*!
 @brief Partial <code>ValueInstantiator</code> implementation that is strongly recommended
  to be used instead of directly extending <code>ValueInstantiator</code> itself.
 */
@interface ComFasterxmlJacksonDatabindDeserValueInstantiator_Base : ComFasterxmlJacksonDatabindDeserValueInstantiator {
 @public
  IOSClass *_valueType_;
}

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (IOSClass *)getValueClass;

- (NSString *)getValueTypeDesc;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserValueInstantiator_Base)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserValueInstantiator_Base, _valueType_, IOSClass *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithIOSClass_(ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *self, IOSClass *type);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *new_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithIOSClass_(IOSClass *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *create_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *self, ComFasterxmlJacksonDatabindJavaType *type);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *new_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserValueInstantiator_Base *create_ComFasterxmlJacksonDatabindDeserValueInstantiator_Base_initWithComFasterxmlJacksonDatabindJavaType_(ComFasterxmlJacksonDatabindJavaType *type);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserValueInstantiator_Base)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserValueInstantiator")
