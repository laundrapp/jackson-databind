//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer))
#define ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerContextualSerializer 1
#include "com/fasterxml/jackson/databind/ser/ContextualSerializer.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable 1
#include "com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.h"

#define RESTRICT_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonschemaSchemaAware 1
#include "com/fasterxml/jackson/databind/jsonschema/SchemaAware.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindIntrospectAnnotatedMember;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsonSerializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;

/*!
 @brief Serializer class that can serialize Object that have a 
 <code>com.fasterxml.jackson.annotation.JsonValue</code> annotation to
  indicate that serialization should be done by calling the method
  annotated, and serializing result it returns.
 <p>
  Implementation note: we will post-process resulting serializer
  (much like what is done with <code>BeanSerializer</code>)
  to figure out actual serializers for final types.
   This must be done from <code>createContextual</code> method, and NOT from constructor;
  otherwise we could end up with an infinite loop.
 */
@interface ComFasterxmlJacksonDatabindSerStdJsonValueSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer < ComFasterxmlJacksonDatabindSerContextualSerializer, ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitable, ComFasterxmlJacksonDatabindJsonschemaSchemaAware > {
 @public
  /*!
   @since 2.9
   */
  ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *_accessor_;
  ComFasterxmlJacksonDatabindJsonSerializer *_valueSerializer_;
  id<ComFasterxmlJacksonDatabindBeanProperty> _property_;
  /*!
   @brief This is a flag that is set in rare (?)
   cases where this serializer
  is used for "natural" types (boolean, int, String, double); and where
  we actually must force type information wrapping, even though
  one would not normally be added.
   */
  jboolean _forceTypeInformation_;
}

#pragma mark Public

/*!
 @param ser Explicit serializer to use, if caller knows it (which     occurs if and only if the "value method" was annotated with
      <code>com.fasterxml.jackson.databind.annotation.JsonSerialize</code>
  ), otherwise     null
 @since 2.8 Earlier method took "raw" Method, but that does not work with access
     to information we need
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember:(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)accessor
                                         withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdJsonValueSerializer:(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *)src
                                           withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                         withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                                                                           withBoolean:(jboolean)forceTypeInfo;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

/*!
 @brief We can try to find the actual serializer for value, if we can
  statically figure out what the result type must be.
 */
- (ComFasterxmlJacksonDatabindJsonSerializer *)createContextualWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                     withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (void)serializeWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov;

- (void)serializeWithTypeWithId:(id)bean
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer0;

- (NSString *)description;

- (ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *)withResolvedWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)property
                                                                    withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser
                                                                                                      withBoolean:(jboolean)forceTypeInfo;

#pragma mark Protected

/*!
 @brief Overridable helper method used for special case handling of schema information for
  Enums.
 @return True if method handled callbacks; false if not; in latter case caller will
    send default callbacks
 @since 2.6
 */
- (jboolean)_acceptJsonFormatVisitorForEnumWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint
                                                                                                        withIOSClass:(IOSClass *)enumType;

- (jboolean)isNaturalTypeWithStdHandlingWithIOSClass:(IOSClass *)rawType
       withComFasterxmlJacksonDatabindJsonSerializer:(ComFasterxmlJacksonDatabindJsonSerializer *)ser;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer, _accessor_, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer, _valueSerializer_, ComFasterxmlJacksonDatabindJsonSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer, _property_, id<ComFasterxmlJacksonDatabindBeanProperty>)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindJsonSerializer_(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *self, ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *accessor, ComFasterxmlJacksonDatabindJsonSerializer *ser);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *new_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindJsonSerializer_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *accessor, ComFasterxmlJacksonDatabindJsonSerializer *ser) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *create_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindIntrospectAnnotatedMember_withComFasterxmlJacksonDatabindJsonSerializer_(ComFasterxmlJacksonDatabindIntrospectAnnotatedMember *accessor, ComFasterxmlJacksonDatabindJsonSerializer *ser);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindSerStdJsonValueSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withBoolean_(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *self, ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *ser, jboolean forceTypeInfo);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *new_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindSerStdJsonValueSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withBoolean_(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *ser, jboolean forceTypeInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *create_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_initWithComFasterxmlJacksonDatabindSerStdJsonValueSerializer_withComFasterxmlJacksonDatabindBeanProperty_withComFasterxmlJacksonDatabindJsonSerializer_withBoolean_(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer *src, id<ComFasterxmlJacksonDatabindBeanProperty> property, ComFasterxmlJacksonDatabindJsonSerializer *ser, jboolean forceTypeInfo);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer)

#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter))
#define ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter_

#define RESTRICT_ComFasterxmlJacksonDatabindJsontypeTypeSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsontypeTypeSerializer 1
#include "com/fasterxml/jackson/databind/jsontype/TypeSerializer.h"

@class ComFasterxmlJacksonAnnotationJsonTypeInfo_As;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreTypeWritableTypeId;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindBeanProperty;
@protocol ComFasterxmlJacksonDatabindJsontypeTypeIdResolver;

/*!
 @brief Silly little wrapper class we need to re-route type serialization so that we can
  override Object to use for type id (logical type) even when asking serialization
  of something else (delegate type)
 */
@interface ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter : ComFasterxmlJacksonDatabindJsontypeTypeSerializer {
 @public
  ComFasterxmlJacksonDatabindJsontypeTypeSerializer *_typeSerializer_;
  id _forObject_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)ts
                                                                             withId:(id)ob;

- (ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)forPropertyWithComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)prop;

- (NSString *)getPropertyName;

- (id<ComFasterxmlJacksonDatabindJsontypeTypeIdResolver>)getTypeIdResolver;

- (ComFasterxmlJacksonAnnotationJsonTypeInfo_As *)getTypeInclusion;

- (void)writeCustomTypePrefixForArrayWithId:(id)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                               withNSString:(NSString *)typeId;

- (void)writeCustomTypePrefixForObjectWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypePrefixForScalarWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForArrayWithId:(id)value
   withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                               withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForObjectWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                withNSString:(NSString *)typeId;

- (void)writeCustomTypeSuffixForScalarWithId:(id)value
    withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                withNSString:(NSString *)typeId;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypePrefixWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                         withComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeId;

- (void)writeTypePrefixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (void)writeTypePrefixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                         withIOSClass:(IOSClass *)type;

- (void)writeTypePrefixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (void)writeTypePrefixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                          withIOSClass:(IOSClass *)type;

- (void)writeTypePrefixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (void)writeTypePrefixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                          withIOSClass:(IOSClass *)type;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypeSuffixWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                         withComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeId;

- (void)writeTypeSuffixForArrayWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (void)writeTypeSuffixForObjectWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

- (void)writeTypeSuffixForScalarWithId:(id)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter, _typeSerializer_, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter, _forObject_, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter_initWithComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter *self, ComFasterxmlJacksonDatabindJsontypeTypeSerializer *ts, id ob);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter *new_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter_initWithComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *ts, id ob) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter *create_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter_initWithComFasterxmlJacksonDatabindJsontypeTypeSerializer_withId_(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *ts, id ob);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdJsonValueSerializer_TypeSerializerRerouter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdJsonValueSerializer")
