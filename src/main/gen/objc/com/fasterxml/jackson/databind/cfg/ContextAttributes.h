//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindCfgContextAttributes
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindCfgContextAttributes
#ifdef INCLUDE_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl
#define INCLUDE_ComFasterxmlJacksonDatabindCfgContextAttributes 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindCfgContextAttributes_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes || defined(INCLUDE_ComFasterxmlJacksonDatabindCfgContextAttributes))
#define ComFasterxmlJacksonDatabindCfgContextAttributes_

@protocol JavaUtilMap;

/*!
 @brief Helper class used for storing and accessing per-call attributes.
 Storage is two-layered: at higher precedence, we have actual per-call
  attributes; and at lower precedence, default attributes that may be
  defined for Object readers and writers.
 <p>
  Note that the way mutability is implemented differs between kinds
  of attributes, to account for thread-safety: per-call attributes
  are handled assuming that instances are never shared, whereas
  changes to per-reader/per-writer attributes are made assuming
  sharing, by creating new copies instead of modifying state.
  This allows sharing of default values without per-call copying, but
  requires two-level lookup on access.
 @since 2.3
 */
@interface ComFasterxmlJacksonDatabindCfgContextAttributes : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Accessor for value of specified attribute
 */
- (id)getAttributeWithId:(id)key;

+ (ComFasterxmlJacksonDatabindCfgContextAttributes *)getEmpty;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withoutSharedAttributeWithId:(id)key;

/*!
 @brief Mutator used during call (via context) to set value of "non-shared"
  part of attribute set.
 */
- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withPerCallAttributeWithId:(id)key
                                                                         withId:(id)value;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withSharedAttributeWithId:(id)key
                                                                        withId:(id)value;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withSharedAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindCfgContextAttributes)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgContextAttributes_init(ComFasterxmlJacksonDatabindCfgContextAttributes *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes *ComFasterxmlJacksonDatabindCfgContextAttributes_getEmpty(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindCfgContextAttributes)

#endif

#if !defined (ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes || defined(INCLUDE_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl))
#define ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindCfgContextAttributes;
@protocol JavaUtilMap;

@interface ComFasterxmlJacksonDatabindCfgContextAttributes_Impl : ComFasterxmlJacksonDatabindCfgContextAttributes < JavaIoSerializable > {
 @public
  /*!
   @brief Shared attributes that we cannot modify in-place.
   */
  id<JavaUtilMap> _shared_;
  /*!
   @brief Per-call attributes that we can directly modify, since they are not
  shared between threads.
   <p>
  NOTE: typed as Object-to-Object, unlike <code>_shared</code>, because
  we need to be able to modify contents, and wildcard type would
  complicate that access.
   */
  id<JavaUtilMap> _nonShared_;
}

#pragma mark Public

- (id)getAttributeWithId:(id)key;

+ (ComFasterxmlJacksonDatabindCfgContextAttributes *)getEmpty;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withoutSharedAttributeWithId:(id)key;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withPerCallAttributeWithId:(id)key
                                                                         withId:(id)value;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withSharedAttributeWithId:(id)key
                                                                        withId:(id)value;

- (ComFasterxmlJacksonDatabindCfgContextAttributes *)withSharedAttributesWithJavaUtilMap:(id<JavaUtilMap>)shared;

#pragma mark Protected

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)shared;

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)shared
                              withJavaUtilMap:(id<JavaUtilMap>)nonShared;

/*!
 @brief Overridable method that creates initial non-shared instance,
  with the first explicit set value.
 */
- (ComFasterxmlJacksonDatabindCfgContextAttributes *)nonSharedInstanceWithId:(id)key
                                                                      withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl, _shared_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl, _nonShared_, id<JavaUtilMap>)

inline ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl, EMPTY, ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *)

inline id ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_get_NULL_SURROGATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_NULL_SURROGATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl, NULL_SURROGATE, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *self, id<JavaUtilMap> shared);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *new_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_(id<JavaUtilMap> shared) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *create_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_(id<JavaUtilMap> shared);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_withJavaUtilMap_(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *self, id<JavaUtilMap> shared, id<JavaUtilMap> nonShared);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *new_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> shared, id<JavaUtilMap> nonShared) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes_Impl *create_ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_initWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> shared, id<JavaUtilMap> nonShared);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindCfgContextAttributes *ComFasterxmlJacksonDatabindCfgContextAttributes_Impl_getEmpty(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindCfgContextAttributes_Impl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindCfgContextAttributes")
