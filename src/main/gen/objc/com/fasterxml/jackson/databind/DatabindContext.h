//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDatabindContext")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDatabindContext
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDatabindContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDatabindContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDatabindContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDatabindContext_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDatabindContext || defined(INCLUDE_ComFasterxmlJacksonDatabindDatabindContext))
#define ComFasterxmlJacksonDatabindDatabindContext_

@class ComFasterxmlJacksonAnnotationJsonFormat_Value;
@class ComFasterxmlJacksonAnnotationObjectIdGenerator;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgMapperConfig;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindIntrospectObjectIdInfo;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonMappingException;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class IOSClass;
@class IOSObjectArray;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonAnnotationObjectIdResolver;
@protocol ComFasterxmlJacksonDatabindUtilConverter;
@protocol JavaLangReflectType;

/*!
 @brief Shared base class for <code>DeserializationContext</code> and 
 <code>SerializerProvider</code>, context objects passed through data-binding
  process.Designed so that some of implementations can rely on shared
  aspects like access to secondary contextual objects like type factories
  or handler instantiators.
 @since 2.2
 */
@interface ComFasterxmlJacksonDatabindDatabindContext : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Convenience method for accessing serialization view in use (if any); equivalent to:
 @code

    getConfig().canOverrideAccessModifiers();
 
@endcode
 */
- (jboolean)canOverrideAccessModifiers;

/*!
 @brief Convenience method for constructing subtypes, retaining generic
  type parameter (if any)
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructSpecializedTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                            withIOSClass:(IOSClass *)subclass;

/*!
 @brief Convenience method for constructing <code>JavaType</code> for given JDK
  type (usually <code>java.lang.Class</code>)
 */
- (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Helper method to use to construct a <code>Converter</code>, given a definition
  that may be either actual converter instance, or Class for instantiating one.
 @since 2.2
 */
- (id<ComFasterxmlJacksonDatabindUtilConverter>)converterInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                                                             withId:(id)converterDef;

/*!
 @brief Accessor for locating currently active view, if any;
  returns null if no view has been set.
 */
- (IOSClass *)getActiveView;

/*!
 @brief Convenience method for accessing serialization view in use (if any); equivalent to:
 @code

    getConfig().getAnnotationIntrospector();
 
@endcode
 */
- (ComFasterxmlJacksonDatabindAnnotationIntrospector *)getAnnotationIntrospector;

/*!
 @brief Method for accessing attributes available in this context.
 Per-call attributes have highest precedence; attributes set
  via <code>ObjectReader</code> or <code>ObjectWriter</code> have lower
  precedence.
 @param key Key of the attribute to get
 @return Value of the attribute, if any; null otherwise
 @since 2.3
 */
- (id)getAttributeWithId:(id)key;

/*!
 @brief Accessor to currently active configuration (both per-request configs
  and per-mapper config).
 */
- (ComFasterxmlJacksonDatabindCfgMapperConfig *)getConfig;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)getDefaultPropertyFormatWithIOSClass:(IOSClass *)baseType;

/*!
 @since 2.6
 */
- (JavaUtilLocale *)getLocale;

/*!
 @since 2.6
 */
- (JavaUtilTimeZone *)getTimeZone;

- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

/*!
 @brief Convenience method for checking whether specified serialization
  feature is enabled or not.
 Shortcut for:
 @code

   getConfig().isEnabled(feature);
 
@endcode
 */
- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)feature;

- (ComFasterxmlJacksonAnnotationObjectIdGenerator *)objectIdGeneratorInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                          withComFasterxmlJacksonDatabindIntrospectObjectIdInfo:(ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)objectIdInfo;

- (id<ComFasterxmlJacksonAnnotationObjectIdResolver>)objectIdResolverInstanceWithComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)annotated
                                                                          withComFasterxmlJacksonDatabindIntrospectObjectIdInfo:(ComFasterxmlJacksonDatabindIntrospectObjectIdInfo *)objectIdInfo;

/*!
 @since 2.9
 */
- (id)reportBadDefinitionWithIOSClass:(IOSClass *)type
                         withNSString:(NSString *)msg;

/*!
 @brief Helper method called to indicate a generic problem that stems from type
  definition(s), not input data, or input/output state; typically this
  means throwing a <code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException</code>.
 @since 2.9
 */
- (id)reportBadDefinitionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                    withNSString:(NSString *)msg;

/*!
 @brief Lookup method called when code needs to resolve class name from input;
  usually simple lookup
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJavaType *)resolveSubTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                  withNSString:(NSString *)subClass;

/*!
 @brief Method for setting per-call value of given attribute.
 This will override any previously defined value for the
  attribute within this context.
 @param key Key of the attribute to set
 @param value Value to set attribute to
 @return This context object, to allow chaining
 @since 2.3
 */
- (ComFasterxmlJacksonDatabindDatabindContext *)setAttributeWithId:(id)key
                                                            withId:(id)value;

#pragma mark Protected

/*!
 @since 2.9
 */
- (NSString *)_colonConcatWithNSString:(NSString *)msgBase
                          withNSString:(NSString *)extra;

/*!
 @since 2.9
 */
- (NSString *)_descWithNSString:(NSString *)desc;

/*!
 @since 2.9
 */
- (NSString *)_formatWithNSString:(NSString *)msg
                withNSObjectArray:(IOSObjectArray *)msgArgs;

/*!
 @since 2.9
 */
- (NSString *)_quotedStringWithNSString:(NSString *)desc;

/*!
 @since 2.9
 */
- (NSString *)_truncateWithNSString:(NSString *)desc;

/*!
 @brief Helper method for constructing exception to indicate that given type id
  could not be resolved to a valid subtype of specified base type.
 Most commonly called during polymorphic deserialization.
 <p>
  Note that most of the time this method should NOT be called directly: instead, method 
 <code>handleUnknownTypeId()</code> should be called which will call this method
  if necessary.
 @since 2.9
 */
- (ComFasterxmlJacksonDatabindJsonMappingException *)invalidTypeIdExceptionWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                                                                                                      withNSString:(NSString *)typeId
                                                                                                      withNSString:(NSString *)extraDesc;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDatabindContext)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDatabindContext_init(ComFasterxmlJacksonDatabindDatabindContext *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDatabindContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDatabindContext")
