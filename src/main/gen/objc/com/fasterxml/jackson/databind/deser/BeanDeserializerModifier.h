//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier))
#define ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier_

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@protocol JavaUtilList;

/*!
 @brief Abstract class that defines API for objects that can be registered
  to participate in constructing <code>JsonDeserializer</code> instances
  (via <code>DeserializerFactory</code>).
 This is typically done by modules that want alter some aspects of deserialization
  process; and is preferable to sub-classing of <code>BeanDeserializerFactory</code>.
 <p>
  Note that Jackson 2.2 adds more methods for customization; with earlier versions
  only <code>BeanDeserializer</code> instances could be modified, but with 2.2 all types
  of deserializers can be changed.
 <p>
  Sequence in which callback methods are called for <code>BeanDeserializer</code> is: 
 <ol>
   <li><code>updateProperties</code> is called once all property definitions are
     collected, and initial filtering (by ignorable type and explicit ignoral-by-bean)
     has been performed.   
 </li>
   <li><code>updateBuilder</code> is called once all initial pieces for building deserializer
     have been collected   
 </li>
   <li><code>modifyDeserializer</code> is called after deserializer has been built
     by <code>BeanDeserializerBuilder</code>
     but before it is returned to be used   
 </li>
  </ol>
 <p>
  For other types of deserializers, methods called depend on type of values for
  which deserializer is being constructed; and only a single method is called
  since the process does not involve builders (unlike that of <code>BeanDeserializer</code>.
 <p>
  Default method implementations are "no-op"s, meaning that methods are implemented
  but have no effect; this is mostly so that new methods can be added in later
  versions.
 */
@interface ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called by <code>DeserializerFactory</code> after it has constructed the
  standard deserializer for given 
 <code>ArrayType</code>
  to make it possible to either replace or augment this deserializer with
  additional functionality.
 @param config Configuration in use
 @param valueType Type of the value deserializer is used for.
 @param beanDesc Description f
 @param deserializer Default deserializer that would be used.
 @return Deserializer to use; either <code>deserializer</code> that was passed
    in, or an instance method constructed.
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyArrayDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)valueType
                                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                             withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyCollectionDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)type
                                                                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                  withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyCollectionLikeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeCollectionLikeType:(ComFasterxmlJacksonDatabindTypeCollectionLikeType *)type
                                                                                       withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                      withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @brief Method called by <code>BeanDeserializerFactory</code> after constructing default
  bean deserializer instance with properties collected and ordered earlier.
 Implementations can modify or replace given deserializer and return deserializer
  to use. Note that although initial deserializer being passed is of type 
 <code>BeanDeserializer</code>, modifiers may return deserializers of other types;
  and this is why implementations must check for type before casting.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                         withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                        withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyEnumDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                            withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @brief Method called by <code>DeserializerFactory</code> after it has constructed the
  standard key deserializer for given key type.
 This make it possible to replace the default key deserializer, or augment
  it somehow (including optional use of default deserializer with occasional
  override).
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindKeyDeserializer *)modifyKeyDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                           withComFasterxmlJacksonDatabindKeyDeserializer:(ComFasterxmlJacksonDatabindKeyDeserializer *)deserializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyMapDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)type
                                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                           withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @since 2.2
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyMapLikeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeMapLikeType:(ComFasterxmlJacksonDatabindTypeMapLikeType *)type
                                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                               withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)modifyReferenceDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)type
                                                                                  withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                 withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deserializer;

/*!
 @brief Method called by <code>BeanDeserializerFactory</code> when it has collected
  basic information such as tentative list of properties to deserialize.
 Implementations may choose to modify state of builder (to affect deserializer being
  built), or even completely replace it (if they want to build different kind of
  deserializer). Typically changes mostly concern set of properties to deserialize.
 */
- (ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder *)updateBuilderWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                   withComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder:(ComFasterxmlJacksonDatabindDeserBeanDeserializerBuilder *)builder;

/*!
 @brief Method called by <code>BeanDeserializerFactory</code> when it has collected
  initial list of <code>BeanPropertyDefinition</code>s, and done basic by-name
  and by-type filtering, but before constructing builder or actual
  property handlers; or arranging order.
 The most common changes to make at this point are to completely remove
  specified properties, or rename then: other modifications are easier
  to make at later points.
 */
- (id<JavaUtilList>)updatePropertiesWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                          withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                        withJavaUtilList:(id<JavaUtilList>)propDefs;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier_init(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier")
