//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerFactory")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializerFactory
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializerFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserDeserializerFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerFactory || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializerFactory))
#define ComFasterxmlJacksonDatabindDeserDeserializerFactory_

@class ComFasterxmlJacksonDatabindAbstractTypeResolver;
@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier;
@class ComFasterxmlJacksonDatabindDeserValueInstantiator;
@class ComFasterxmlJacksonDatabindDeserializationConfig;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindJsontypeTypeDeserializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class ComFasterxmlJacksonDatabindTypeArrayType;
@class ComFasterxmlJacksonDatabindTypeCollectionLikeType;
@class ComFasterxmlJacksonDatabindTypeCollectionType;
@class ComFasterxmlJacksonDatabindTypeMapLikeType;
@class ComFasterxmlJacksonDatabindTypeMapType;
@class ComFasterxmlJacksonDatabindTypeReferenceType;
@class IOSClass;
@class IOSObjectArray;
@protocol ComFasterxmlJacksonDatabindDeserDeserializers;
@protocol ComFasterxmlJacksonDatabindDeserKeyDeserializers;
@protocol ComFasterxmlJacksonDatabindDeserValueInstantiators;

/*!
 @brief Abstract class that defines API used by <code>DeserializationContext</code>
  to construct actual 
 <code>JsonDeserializer</code> instances (which are then cached by
  context and/or dedicated cache).
 <p>
  Since there are multiple broad categories of deserializers, there are 
  multiple factory methods:
 <ul>
  <li>For JSON "Array" type, we need 2 methods: one to deal with expected
    Java arrays (<code>createArrayDeserializer</code>)
    and the other for other Java containers like <code>java.util.List</code>s
    and <code>java.util.Set</code>s (<code>createCollectionDeserializer</code>).
    Actually there is also a third method for "Collection-like" types;
    things like Scala collections that act like JDK collections but do not
    implement same interfaces.  
 </li>
  <li>For JSON "Object" type, we need 2 methods: one to deal with
    expected Java <code>java.util.Map</code>s
    (<code>createMapDeserializer</code>), and another for POJOs
    (<code>createBeanDeserializer</code>.
    As an additional twist there is also a callback for "Map-like" types,
    mostly to make it possible to support Scala Maps (which are NOT JDK
    Map compatible).  
 </li>
  <li>For Tree Model (<code>com.fasterxml.jackson.databind.JsonNode</code>) properties there is
     <code>createTreeDeserializer</code>
  <li>For enumerated types (<code>java.lang.Enum</code>) there is
     <code>createEnumDeserializer</code>
   </li>
  <li>For all other types, <code>createBeanDeserializer</code> is used. 
 </ul>
 <p>
 */
@interface ComFasterxmlJacksonDatabindDeserDeserializerFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to create (or, for completely immutable deserializers,
  reuse) a deserializer that can convert JSON content into values of
  specified Java type.
 @param type Type to be deserialized
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createArrayDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeArrayType:(ComFasterxmlJacksonDatabindTypeArrayType *)type
                                                                               withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to create (or, for completely immutable deserializers,
  reuse) a deserializer that can convert JSON content into values of
  specified Java "bean" (POJO) type.
 At this point it is known that the type is not otherwise recognized
  as one of structured types (array, Collection, Map) or a well-known
  JDK type (enum, primitives/wrappers, String); this method only
  gets called if other options are exhausted. This also means that
  this method can be overridden to add support for custom types.
 @param type Type to be deserialized
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createBeanDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to create a deserializer that will use specified Builder
  class for building value instances.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createBuilderBasedDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                             withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                                      withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc
                                                                                                                        withIOSClass:(IOSClass *)builderClass;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)createCollectionDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeCollectionType:(ComFasterxmlJacksonDatabindTypeCollectionType *)type
                                                                                    withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)createCollectionLikeDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeCollectionLikeType:(ComFasterxmlJacksonDatabindTypeCollectionLikeType *)type
                                                                                        withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)createEnumDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                              withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to find if factory knows how to create a key deserializer
  for specified type; currently this means checking if a module has registered
  possible deserializers.
 @return Key deserializer to use for specified type, if one found; null if not
    (and default key deserializer should be used)
 */
- (ComFasterxmlJacksonDatabindKeyDeserializer *)createKeyDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)createMapDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeMapType:(ComFasterxmlJacksonDatabindTypeMapType *)type
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)createMapLikeDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeMapLikeType:(ComFasterxmlJacksonDatabindTypeMapLikeType *)type
                                                                                 withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createReferenceDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                 withComFasterxmlJacksonDatabindTypeReferenceType:(ComFasterxmlJacksonDatabindTypeReferenceType *)type
                                                                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to create and return a deserializer that can construct
  JsonNode(s) from JSON content.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)createTreeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                             withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method called to find and create a type information deserializer for given base type,
  if one is needed.If not needed (no polymorphic handling configured for type),
  should return null.
 <p>
  Note that this method is usually only directly called for values of container (Collection,
  array, Map) types and root values, but not for bean property values.
 @param baseType Declared base type of the value to deserializer (actual     deserializer type will be this type or its subtype)
 @return Type deserializer to use for given base type, if one is needed; null if not.
 */
- (ComFasterxmlJacksonDatabindJsontypeTypeDeserializer *)findTypeDeserializerWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                                          withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType;

/*!
 @brief Method that is to find all creators (constructors, factory methods)
  for the bean type to deserialize.
 */
- (ComFasterxmlJacksonDatabindDeserValueInstantiator *)findValueInstantiatorWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                   withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

/*!
 @brief Method that can be called to try to resolve an abstract type
  (interface, abstract class) into a concrete type, or at least
  something "more concrete" (abstract class instead of interface).
 Will either return passed type, or a more specific type.
 */
- (ComFasterxmlJacksonDatabindJavaType *)mapAbstractTypeWithComFasterxmlJacksonDatabindDeserializationConfig:(ComFasterxmlJacksonDatabindDeserializationConfig *)config
                                                                     withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Convenience method for creating a new factory instance with additional 
 <code>AbstractTypeResolver</code>.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)withAbstractTypeResolverWithComFasterxmlJacksonDatabindAbstractTypeResolver:(ComFasterxmlJacksonDatabindAbstractTypeResolver *)resolver;

/*!
 @brief Convenience method for creating a new factory instance with additional deserializer
  provider.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)withAdditionalDeserializersWithComFasterxmlJacksonDatabindDeserDeserializers:(id<ComFasterxmlJacksonDatabindDeserDeserializers>)additional;

/*!
 @brief Convenience method for creating a new factory instance with additional 
 <code>KeyDeserializers</code>.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)withAdditionalKeyDeserializersWithComFasterxmlJacksonDatabindDeserKeyDeserializers:(id<ComFasterxmlJacksonDatabindDeserKeyDeserializers>)additional;

/*!
 @brief Convenience method for creating a new factory instance with additional 
 <code>BeanDeserializerModifier</code>.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)withDeserializerModifierWithComFasterxmlJacksonDatabindDeserBeanDeserializerModifier:(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *)modifier;

/*!
 @brief Convenience method for creating a new factory instance with additional 
 <code>ValueInstantiators</code>.
 */
- (ComFasterxmlJacksonDatabindDeserDeserializerFactory *)withValueInstantiatorsWithComFasterxmlJacksonDatabindDeserValueInstantiators:(id<ComFasterxmlJacksonDatabindDeserValueInstantiators>)instantiators;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonDatabindDeserDeserializerFactory)

inline IOSObjectArray *ComFasterxmlJacksonDatabindDeserDeserializerFactory_get_NO_DESERIALIZERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonDatabindDeserDeserializerFactory_NO_DESERIALIZERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonDatabindDeserDeserializerFactory, NO_DESERIALIZERS, IOSObjectArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserDeserializerFactory_init(ComFasterxmlJacksonDatabindDeserDeserializerFactory *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserDeserializerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerFactory")
