//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/impl/ErrorThrowingDeserializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer))
#define ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer_

#define RESTRICT_ComFasterxmlJacksonDatabindJsonDeserializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindJsonDeserializer 1
#include "com/fasterxml/jackson/databind/JsonDeserializer.h"

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class JavaLangNoClassDefFoundError;

/*!
 @brief A deserializer that stores an <code>Error</code> caught during constructing
  of the deserializer, which needs to be deferred and only during actual
  attempt to deserialize a value of given type.
 Note that null and empty values can be deserialized without error.
 @since 2.9 Note: prior to this version was named <code>NoClassDefFoundDeserializer</code>
 */
@interface ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer : ComFasterxmlJacksonDatabindJsonDeserializer

#pragma mark Public

- (instancetype __nonnull)initWithJavaLangNoClassDefFoundError:(JavaLangNoClassDefFoundError *)cause;

- (id)deserializeWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)jp
 withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer_initWithJavaLangNoClassDefFoundError_(ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer *self, JavaLangNoClassDefFoundError *cause);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer *new_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer_initWithJavaLangNoClassDefFoundError_(JavaLangNoClassDefFoundError *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer *create_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer_initWithJavaLangNoClassDefFoundError_(JavaLangNoClassDefFoundError *cause);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserImplErrorThrowingDeserializer")
