//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/Module.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModule")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindModule
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModule 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindModule 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindModule

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindModule_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindModule || defined(INCLUDE_ComFasterxmlJacksonDatabindModule))
#define ComFasterxmlJacksonDatabindModule_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

@class ComFasterxmlJacksonCoreVersion;
@protocol ComFasterxmlJacksonDatabindModule_SetupContext;

/*!
 @brief Simple interface for extensions that can be registered with <code>ObjectMapper</code>
  to provide a well-defined set of extensions to default functionality; such as
  support for new data types.
 */
@interface ComFasterxmlJacksonDatabindModule : NSObject < ComFasterxmlJacksonCoreVersioned >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method that returns a display that can be used by Jackson
  for informational purposes, as well as in associating extensions with
  module that provides them.
 */
- (NSString *)getModuleName;

/*!
 @brief Method that returns an id that may be used to determine if two <code>Module</code>
  instances are considered to be of same type, for purpose of preventing
  multiple registrations of "same type of" module
  (see <code>com.fasterxml.jackson.databind.MapperFeature</code>)
  If `null` is returned, every instance is considered unique.
 If non-null value is returned, equality of id Objects is used to check whether
  modules should be considered to be "of same type"
 <p>
  Default implementation returns value of class name (<code>Class.getName</code>).
 @since 2.5
 */
- (id)getTypeId;

/*!
 @brief Method called by <code>ObjectMapper</code> when module is registered.
 It is called to let module register functionality it provides,
  using callback methods passed-in context object exposes.
 */
- (void)setupModuleWithComFasterxmlJacksonDatabindModule_SetupContext:(id<ComFasterxmlJacksonDatabindModule_SetupContext>)context;

/*!
 @brief Method that returns version of this module.Can be used by Jackson for
  informational purposes.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindModule)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindModule_init(ComFasterxmlJacksonDatabindModule *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindModule)

#endif

#if !defined (ComFasterxmlJacksonDatabindModule_SetupContext_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindModule || defined(INCLUDE_ComFasterxmlJacksonDatabindModule_SetupContext))
#define ComFasterxmlJacksonDatabindModule_SetupContext_

@class ComFasterxmlJacksonCoreJsonFactory_Feature;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreVersion;
@class ComFasterxmlJacksonDatabindAbstractTypeResolver;
@class ComFasterxmlJacksonDatabindAnnotationIntrospector;
@class ComFasterxmlJacksonDatabindCfgMutableConfigOverride;
@class ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier;
@class ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler;
@class ComFasterxmlJacksonDatabindDeserializationFeature;
@class ComFasterxmlJacksonDatabindIntrospectClassIntrospector;
@class ComFasterxmlJacksonDatabindMapperFeature;
@class ComFasterxmlJacksonDatabindPropertyNamingStrategy;
@class ComFasterxmlJacksonDatabindSerBeanSerializerModifier;
@class ComFasterxmlJacksonDatabindSerializationFeature;
@class ComFasterxmlJacksonDatabindTypeTypeFactory;
@class ComFasterxmlJacksonDatabindTypeTypeModifier;
@class IOSClass;
@class IOSObjectArray;
@protocol ComFasterxmlJacksonDatabindDeserDeserializers;
@protocol ComFasterxmlJacksonDatabindDeserKeyDeserializers;
@protocol ComFasterxmlJacksonDatabindDeserValueInstantiators;
@protocol ComFasterxmlJacksonDatabindSerSerializers;
@protocol JavaUtilCollection;

/*!
 @brief Interface Jackson exposes to modules for purpose of registering
  extended functionality.
 Usually implemented by <code>ObjectMapper</code>, but modules should
  NOT rely on this -- if they do require access to mapper instance,
  they need to call <code>SetupContext.getOwner</code> method.
 */
@protocol ComFasterxmlJacksonDatabindModule_SetupContext < JavaObject >

/*!
 @brief Method that returns version information about <code>ObjectMapper</code> 
  that implements this context.Modules can use this to choose
  different settings or initialization order; or even decide to fail
  set up completely if version is compatible with module.
 */
- (ComFasterxmlJacksonCoreVersion *)getMapperVersion;

/*!
 @brief Fallback access method that allows modules to refer to the 
 <code>ObjectMapper</code> that provided this context.
 It should NOT be needed by most modules; and ideally should
  not be used -- however, there may be cases where this may
  be necessary due to various design constraints.
 <p>
  NOTE: use of this method is discouraged, as it allows access to
  things Modules typically should not modify. It is included, however,
  to allow access to new features in cases where Module API
  has not yet been extended, or there are oversights.
 <p>
  Return value is chosen to not leak dependency to <code>ObjectMapper</code>;
  however, instance will always be of that type.
  This is why return value is declared generic, to allow caller to
  specify context to often avoid casting.
 @since 2.0
 */
- (ComFasterxmlJacksonCoreObjectCodec *)getOwner;

/*!
 @brief Accessor for finding <code>TypeFactory</code> that is currently configured
  by the context.
 <p>
  NOTE: since it is possible that other modules might change or replace
  TypeFactory, use of this method adds order-dependency for registrations.
 @since 2.0
 */
- (ComFasterxmlJacksonDatabindTypeTypeFactory *)getTypeFactory;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindMapperFeature:(ComFasterxmlJacksonDatabindMapperFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindDeserializationFeature:(ComFasterxmlJacksonDatabindDeserializationFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonDatabindSerializationFeature:(ComFasterxmlJacksonDatabindSerializationFeature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
@brief "Mutant accessor" for getting a mutable configuration override object for
  given type, needed to add or change per-type overrides applied
  to properties of given type.
Usage is through returned object by colling "setter" methods, which
  directly modify override object and take effect directly.
  For example you can do
 @code

    mapper.configOverride(java.util.Date.class)
        .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
 @code

  to change the default format to use for properties of type 
 <code>java.util.Date</code> (possibly further overridden by per-property
  annotations)
@since 2.8
 */
- (ComFasterxmlJacksonDatabindCfgMutableConfigOverride *)configOverrideWithIOSClass:(IOSClass *)type;

/*!
 @brief Method that module can use to register additional deserializers to use for
  handling types.
 @param d Object that can be called to find deserializer for types supported    by module (null returned for non-supported types)
 */
- (void)addDeserializersWithComFasterxmlJacksonDatabindDeserDeserializers:(id<ComFasterxmlJacksonDatabindDeserDeserializers>)d;

/*!
 @brief Method that module can use to register additional deserializers to use for
  handling Map key values (which are separate from value deserializers because
  they are always serialized from String values)
 */
- (void)addKeyDeserializersWithComFasterxmlJacksonDatabindDeserKeyDeserializers:(id<ComFasterxmlJacksonDatabindDeserKeyDeserializers>)s;

/*!
 @brief Method that module can use to register additional serializers to use for
  handling types.
 @param s Object that can be called to find serializer for types supported    by module (null returned for non-supported types)
 */
- (void)addSerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)s;

/*!
 @brief Method that module can use to register additional serializers to use for
  handling Map key values (which are separate from value serializers because
  they must write <code>JsonToken.FIELD_NAME</code> instead of String value).
 */
- (void)addKeySerializersWithComFasterxmlJacksonDatabindSerSerializers:(id<ComFasterxmlJacksonDatabindSerSerializers>)s;

/*!
 @brief Method that module can use to register additional modifier objects to
  customize configuration and construction of bean deserializers.
 @param mod Modifier to register
 */
- (void)addBeanDeserializerModifierWithComFasterxmlJacksonDatabindDeserBeanDeserializerModifier:(ComFasterxmlJacksonDatabindDeserBeanDeserializerModifier *)mod;

/*!
 @brief Method that module can use to register additional modifier objects to
  customize configuration and construction of bean serializers.
 @param mod Modifier to register
 */
- (void)addBeanSerializerModifierWithComFasterxmlJacksonDatabindSerBeanSerializerModifier:(ComFasterxmlJacksonDatabindSerBeanSerializerModifier *)mod;

/*!
 @brief Method that module can use to register additional 
 <code>AbstractTypeResolver</code> instance, to handle resolution of
  abstract to concrete types (either by defaulting, or by materializing).
 @param resolver Resolver to add.
 */
- (void)addAbstractTypeResolverWithComFasterxmlJacksonDatabindAbstractTypeResolver:(ComFasterxmlJacksonDatabindAbstractTypeResolver *)resolver;

/*!
 @brief Method that module can use to register additional 
 <code>TypeModifier</code> instance, which can augment <code>com.fasterxml.jackson.databind.JavaType</code>
  instances constructed by <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.
 @param modifier to add
 */
- (void)addTypeModifierWithComFasterxmlJacksonDatabindTypeTypeModifier:(ComFasterxmlJacksonDatabindTypeTypeModifier *)modifier;

/*!
 @brief Method that module can use to register additional <code>com.fasterxml.jackson.databind.deser.ValueInstantiator</code>s,
  by adding <code>ValueInstantiators</code> object that gets called when 
  instantatiator is needed by a deserializer.
 @param instantiators Object that can provide <code>com.fasterxml.jackson.databind.deser.ValueInstantiator</code> s for
      constructing POJO values during deserialization
 */
- (void)addValueInstantiatorsWithComFasterxmlJacksonDatabindDeserValueInstantiators:(id<ComFasterxmlJacksonDatabindDeserValueInstantiators>)instantiators;

/*!
 @brief Method for replacing the default class introspector with a derived class that
  overrides specific behavior.
 @param ci Derived class of ClassIntrospector with overriden behavior
 @since 2.2
 */
- (void)setClassIntrospectorWithComFasterxmlJacksonDatabindIntrospectClassIntrospector:(ComFasterxmlJacksonDatabindIntrospectClassIntrospector *)ci;

/*!
 @brief Method for registering specified <code>AnnotationIntrospector</code> as the highest
  priority introspector (will be chained with existing introspector(s) which
  will be used as fallbacks for cases this introspector does not handle)
 @param ai Annotation introspector to register.
 */
- (void)insertAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Method for registering specified <code>AnnotationIntrospector</code> as the lowest
  priority introspector, chained with existing introspector(s) and called
  as fallback for cases not otherwise handled.
 @param ai Annotation introspector to register.
 */
- (void)appendAnnotationIntrospectorWithComFasterxmlJacksonDatabindAnnotationIntrospector:(ComFasterxmlJacksonDatabindAnnotationIntrospector *)ai;

/*!
 @brief Method for registering specified classes as subtypes (of supertype(s)
  they have)
 */
- (void)registerSubtypesWithIOSClassArray:(IOSObjectArray *)subtypes;

/*!
 @brief Method for registering specified classes as subtypes (of supertype(s)
  they have), using specified type names.
 */
- (void)registerSubtypesWithComFasterxmlJacksonDatabindJsontypeNamedTypeArray:(IOSObjectArray *)subtypes;

/*!
 @brief Method for registering specified classes as subtypes (of supertype(s)
  they have)
 @since 2.9
 */
- (void)registerSubtypesWithJavaUtilCollection:(id<JavaUtilCollection>)subtypes;

/*!
 @brief Method used for defining mix-in annotations to use for augmenting
  specified class or interface.
 All annotations from 
 <code>mixinSource</code> are taken to override annotations
  that <code>target</code> (or its supertypes) has.
 <p>
  Note: mix-ins are registered both for serialization and deserialization
  (which can be different internally).
 <p>
  Note: currently only one set of mix-in annotations can be defined for
  a single class; so if multiple modules register mix-ins, highest
  priority one (last one registered) will have priority over other modules.
 @param target Class (or interface) whose annotations to effectively override
 @param mixinSource Class (or interface) whose annotations are to    be "added" to target's annotations, overriding as necessary
 */
- (void)setMixInAnnotationsWithIOSClass:(IOSClass *)target
                           withIOSClass:(IOSClass *)mixinSource;

/*!
 @brief Add a deserialization problem handler
 @param handler The deserialization problem handler
 */
- (void)addDeserializationProblemHandlerWithComFasterxmlJacksonDatabindDeserDeserializationProblemHandler:(ComFasterxmlJacksonDatabindDeserDeserializationProblemHandler *)handler;

/*!
 @brief Method that may be used to override naming strategy that is used
  by <code>ObjectMapper</code>.
 @since 2.3
 */
- (void)setNamingStrategyWithComFasterxmlJacksonDatabindPropertyNamingStrategy:(ComFasterxmlJacksonDatabindPropertyNamingStrategy *)naming;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindModule_SetupContext)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindModule_SetupContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindModule")
