//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/util/ObjectBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilObjectBuffer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindUtilObjectBuffer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilObjectBuffer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilObjectBuffer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindUtilObjectBuffer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindUtilObjectBuffer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilObjectBuffer || defined(INCLUDE_ComFasterxmlJacksonDatabindUtilObjectBuffer))
#define ComFasterxmlJacksonDatabindUtilObjectBuffer_

@class IOSClass;
@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief Helper class to use for constructing Object arrays by appending entries
  to create arrays of various lengths (length that is not known a priori).
 */
@interface ComFasterxmlJacksonDatabindUtilObjectBuffer : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to add a full Object array as a chunk buffered within
  this buffer, and to obtain a new array to fill.Caller is not to use
  the array it gives; but to use the returned array for continued
  buffering.
 @param fullChunk Completed chunk that the caller is requesting    to append to this buffer. It is generally chunk that was
     returned by an earlier call to 
 <code>resetAndStart</code>  or    <code>appendCompletedChunk</code>
   (although this is not required or    enforced)
 @return New chunk buffer for caller to fill
 */
- (IOSObjectArray *)appendCompletedChunkWithNSObjectArray:(IOSObjectArray *)fullChunk;

/*!
 @brief Method that can be used to check how many Objects have been buffered
  within this buffer.
 */
- (jint)bufferedSize;

/*!
 @brief Method called to indicate that the buffering process is now
  complete; and to construct a combined exactly-sized result
  array.Additionally the buffer itself will be reset to
  reduce memory retention.
 <p>
  Resulting array will be of generic <code>Object[]</code> type:
  if a typed array is needed, use the method with additional
  type argument.
 */
- (IOSObjectArray *)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                                    withInt:(jint)lastChunkEntries;

/*!
 @brief Type-safe alternative to 
 <code>int)</code>, to allow
  for constructing explicitly typed result array.
 @param componentType Type of elements included in the buffer. Will be    used for constructing the result array.
 */
- (IOSObjectArray *)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                                    withInt:(jint)lastChunkEntries
                                               withIOSClass:(IOSClass *)componentType;

- (void)completeAndClearBufferWithNSObjectArray:(IOSObjectArray *)lastChunk
                                        withInt:(jint)lastChunkEntries
                               withJavaUtilList:(id<JavaUtilList>)resultList;

/*!
 @brief Helper method that can be used to check how much free capacity
  will this instance start with.Can be used to choose the best
  instance to reuse, based on size of reusable object chunk
  buffer holds reference to.
 */
- (jint)initialCapacity OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method called to start buffering process.Will ensure that the buffer
  is empty, and then return an object array to start chunking content on
 */
- (IOSObjectArray *)resetAndStart;

/*!
 @since 2.9
 */
- (IOSObjectArray *)resetAndStartWithNSObjectArray:(IOSObjectArray *)base
                                           withInt:(jint)count;

#pragma mark Protected

- (void)_copyToWithId:(id)resultArray
              withInt:(jint)totalSize
    withNSObjectArray:(IOSObjectArray *)lastChunk
              withInt:(jint)lastChunkEntries OBJC_METHOD_FAMILY_NONE;

- (void)_reset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindUtilObjectBuffer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindUtilObjectBuffer_init(ComFasterxmlJacksonDatabindUtilObjectBuffer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilObjectBuffer *new_ComFasterxmlJacksonDatabindUtilObjectBuffer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindUtilObjectBuffer *create_ComFasterxmlJacksonDatabindUtilObjectBuffer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindUtilObjectBuffer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindUtilObjectBuffer")
