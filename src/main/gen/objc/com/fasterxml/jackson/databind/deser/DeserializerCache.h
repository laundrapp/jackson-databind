//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerCache")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializerCache
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerCache 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerCache 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindDeserDeserializerCache

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindDeserDeserializerCache_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerCache || defined(INCLUDE_ComFasterxmlJacksonDatabindDeserDeserializerCache))
#define ComFasterxmlJacksonDatabindDeserDeserializerCache_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonDatabindBeanDescription;
@class ComFasterxmlJacksonDatabindDeserDeserializerFactory;
@class ComFasterxmlJacksonDatabindDeserializationContext;
@class ComFasterxmlJacksonDatabindIntrospectAnnotated;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonDeserializer;
@class ComFasterxmlJacksonDatabindKeyDeserializer;
@class JavaUtilConcurrentConcurrentHashMap;
@class JavaUtilHashMap;
@protocol ComFasterxmlJacksonDatabindUtilConverter;

/*!
 @brief Class that defines caching layer between callers (like 
 <code>ObjectMapper</code>,
  <code>com.fasterxml.jackson.databind.DeserializationContext</code>)
  and classes that construct deserializers
  (<code>com.fasterxml.jackson.databind.deser.DeserializerFactory</code>).
 */
@interface ComFasterxmlJacksonDatabindDeserDeserializerCache : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief We will also cache some dynamically constructed deserializers;
  specifically, ones that are expensive to construct.
   This currently means bean and Enum deserializers; starting with
  2.5, container deserializers will also be cached.
 <p>
  Given that we don't expect much concurrency for additions
  (should very quickly converge to zero after startup), let's
  define a relatively low concurrency setting.
   */
  JavaUtilConcurrentConcurrentHashMap *_cachedDeserializers_;
  /*!
   @brief During deserializer construction process we may need to keep track of partially
  completed deserializers, to resolve cyclic dependencies.This is the
  map used for storing deserializers before they are fully complete.
   */
  JavaUtilHashMap *_incompleteDeserializers_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method that can be used to determine how many deserializers this
  provider is caching currently 
  (if it does caching: default implementation does)
  Exact count depends on what kind of deserializers get cached;
  default implementation caches only dynamically constructed deserializers,
  but not eagerly constructed standard deserializers (which is different
  from how serializer provider works).
 <p>
  The main use case for this method is to allow conditional flushing of
  deserializer cache, if certain number of entries is reached.
 */
- (jint)cachedDeserializersCount;

/*!
 @brief Method called to get hold of a deserializer to use for deserializing
  keys for <code>java.util.Map</code>.
 @throw JsonMappingExceptionif there are fatal problems with
    accessing suitable key deserializer; including that of not
    finding any serializer
 */
- (ComFasterxmlJacksonDatabindKeyDeserializer *)findKeyDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                 withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method called to get hold of a deserializer for a value of given type;
  or if no such deserializer can be found, a default handler (which
  may do a best-effort generic serialization or just simply
  throw an exception when invoked).
 <p>
  Note: this method is only called for value types; not for keys.
  Key deserializers can be accessed using <code>findKeyDeserializer</code>.
 <p>
  Note also that deserializer returned is guaranteed to be resolved
  (if it is of type <code>ResolvableDeserializer</code>), but
  not contextualized (wrt <code>ContextualDeserializer</code>): caller
  has to handle latter if necessary.
 @param ctxt Deserialization context
 @param propertyType Declared type of the value to deserializer (obtained using    'setter' method signature and/or type annotations
 @throw JsonMappingExceptionif there are fatal problems with
    accessing suitable deserializer; including that of not
    finding any serializer
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findValueDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                    withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)propertyType;

/*!
 @brief Method that will drop all dynamically constructed deserializers (ones that
  are counted as result value for <code>cachedDeserializersCount</code>).
 This can be used to remove memory usage (in case some deserializers are
  only used once or so), or to force re-construction of deserializers after
  configuration changes for mapper than owns the provider.
 */
- (void)flushCachedDeserializers;

/*!
 @brief Method called to find out whether provider would be able to find
  a deserializer for given type, using a root reference (i.e.not
  through fields or membership in an array or collection)
 */
- (jboolean)hasValueDeserializerForWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                 withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

#pragma mark Protected

/*!
 @brief Method that handles actual construction (via factory) and caching (both
  intermediate and eventual)
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_createAndCache2WithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                               withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                               withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method that will try to create a deserializer for given type,
  and resolve and cache it if necessary
 @param ctxt Currently active deserialization context
 @param type Type of property to deserialize
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_createAndCacheValueDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                               withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                                               withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

/*!
 @brief Method that does the heavy lifting of checking for per-type annotations,
  find out full type, and figure out which actual factory method
  to call.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)_createDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                  withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                                  withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)_createDeserializer2WithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                   withComFasterxmlJacksonDatabindDeserDeserializerFactory:(ComFasterxmlJacksonDatabindDeserDeserializerFactory *)factory
                                                                                   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                                                            withComFasterxmlJacksonDatabindBeanDescription:(ComFasterxmlJacksonDatabindBeanDescription *)beanDesc;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)_findCachedDeserializerWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindKeyDeserializer *)_handleUnknownKeyDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                           withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (ComFasterxmlJacksonDatabindJsonDeserializer *)_handleUnknownValueDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                              withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type;

- (id<ComFasterxmlJacksonDatabindUtilConverter>)findConverterWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a;

/*!
 @brief Helper method that will check whether given annotated entity (usually class,
  but may also be a property accessor) indicates that a <code>Converter</code> is to
  be used; and if so, to construct and return suitable serializer for it.
 If not, will simply return given serializer as is.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findConvertingDeserializerWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                              withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)a
                                                                                 withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser;

/*!
 @brief Helper method called to check if a class or method
  has annotation that tells which class to use for deserialization.
 Returns null if no such annotation found.
 */
- (ComFasterxmlJacksonDatabindJsonDeserializer *)findDeserializerFromAnnotationWithComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                                                                                  withComFasterxmlJacksonDatabindIntrospectAnnotated:(ComFasterxmlJacksonDatabindIntrospectAnnotated *)ann;

#pragma mark Package-Private

- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindDeserDeserializerCache)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserDeserializerCache, _cachedDeserializers_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonDatabindDeserDeserializerCache, _incompleteDeserializers_, JavaUtilHashMap *)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindDeserDeserializerCache_init(ComFasterxmlJacksonDatabindDeserDeserializerCache *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserDeserializerCache *new_ComFasterxmlJacksonDatabindDeserDeserializerCache_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindDeserDeserializerCache *create_ComFasterxmlJacksonDatabindDeserDeserializerCache_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindDeserDeserializerCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindDeserDeserializerCache")
