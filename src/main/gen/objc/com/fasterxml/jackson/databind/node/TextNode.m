//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/Base64Variants.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/NumberInput.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/exc/InvalidFormatException.h"
#include "com/fasterxml/jackson/databind/node/JsonNodeType.h"
#include "com/fasterxml/jackson/databind/node/TextNode.h"
#include "com/fasterxml/jackson/databind/node/ValueNode.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindNodeTextNode)

ComFasterxmlJacksonDatabindNodeTextNode *ComFasterxmlJacksonDatabindNodeTextNode_EMPTY_STRING_NODE;

@implementation ComFasterxmlJacksonDatabindNodeTextNode

- (instancetype __nonnull)initWithNSString:(NSString *)v {
  ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(self, v);
  return self;
}

+ (ComFasterxmlJacksonDatabindNodeTextNode *)valueOfWithNSString:(NSString *)v {
  return ComFasterxmlJacksonDatabindNodeTextNode_valueOfWithNSString_(v);
}

- (ComFasterxmlJacksonDatabindNodeJsonNodeType *)getNodeType {
  return JreLoadEnum(ComFasterxmlJacksonDatabindNodeJsonNodeType, STRING);
}

- (ComFasterxmlJacksonCoreJsonToken *)asToken {
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING);
}

- (NSString *)textValue {
  return _value_;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  NSString *str = [((NSString *) nil_chk(_value_)) java_trim];
  ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = create_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithInt_(4 + (JreLShift32(([((NSString *) nil_chk(str)) java_length] * 3), 2)));
  @try {
    [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeWithNSString:str withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw nil_chk(ComFasterxmlJacksonDatabindExcInvalidFormatException_fromWithComFasterxmlJacksonCoreJsonParser_withNSString_withId_withIOSClass_(nil, NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", [IOSObjectArray arrayWithObjects:(id[]){ [e getMessage] } count:1 type:NSObject_class_()]), str, IOSClass_byteArray(1)));
  }
  return [builder toByteArray];
}

- (IOSByteArray *)binaryValue {
  return [self getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:ComFasterxmlJacksonCoreBase64Variants_getDefaultVariant()];
}

- (NSString *)asText {
  return _value_;
}

- (NSString *)asTextWithNSString:(NSString *)defaultValue {
  return (_value_ == nil) ? defaultValue : _value_;
}

- (jboolean)asBooleanWithBoolean:(jboolean)defaultValue {
  if (_value_ != nil) {
    NSString *v = [_value_ java_trim];
    if ([@"true" isEqual:v]) {
      return true;
    }
    if ([@"false" isEqual:v]) {
      return false;
    }
  }
  return defaultValue;
}

- (jint)asIntWithInt:(jint)defaultValue {
  return ComFasterxmlJacksonCoreIoNumberInput_parseAsIntWithNSString_withInt_(_value_, defaultValue);
}

- (jlong)asLongWithLong:(jlong)defaultValue {
  return ComFasterxmlJacksonCoreIoNumberInput_parseAsLongWithNSString_withLong_(_value_, defaultValue);
}

- (jdouble)asDoubleWithDouble:(jdouble)defaultValue {
  return ComFasterxmlJacksonCoreIoNumberInput_parseAsDoubleWithNSString_withDouble_(_value_, defaultValue);
}

- (void)serializeWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
        withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  if (_value_ == nil) {
    [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(g)) writeNull];
  }
  else {
    [((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(g)) writeStringWithNSString:_value_];
  }
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (o == nil) return false;
  if ([o isKindOfClass:[ComFasterxmlJacksonDatabindNodeTextNode class]]) {
    return [((NSString *) nil_chk(((ComFasterxmlJacksonDatabindNodeTextNode *) cast_chk(o, [ComFasterxmlJacksonDatabindNodeTextNode class]))->_value_)) isEqual:_value_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(_value_)) hash]);
}

- (NSString *)description {
  jint len = [((NSString *) nil_chk(_value_)) java_length];
  len = len + 2 + (JreRShift32(len, 4));
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(len);
  ComFasterxmlJacksonDatabindNodeTextNode_appendQuotedWithJavaLangStringBuilder_withNSString_(sb, _value_);
  return [sb description];
}

+ (void)appendQuotedWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)content {
  ComFasterxmlJacksonDatabindNodeTextNode_appendQuotedWithJavaLangStringBuilder_withNSString_(sb, content);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(_value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeTextNode;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindNodeJsonNodeType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 14, 15, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(valueOfWithNSString:);
  methods[2].selector = @selector(getNodeType);
  methods[3].selector = @selector(asToken);
  methods[4].selector = @selector(textValue);
  methods[5].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[6].selector = @selector(binaryValue);
  methods[7].selector = @selector(asText);
  methods[8].selector = @selector(asTextWithNSString:);
  methods[9].selector = @selector(asBooleanWithBoolean:);
  methods[10].selector = @selector(asIntWithInt:);
  methods[11].selector = @selector(asLongWithLong:);
  methods[12].selector = @selector(asDoubleWithDouble:);
  methods[13].selector = @selector(serializeWithComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(description);
  methods[17].selector = @selector(appendQuotedWithJavaLangStringBuilder:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_NODE", "LComFasterxmlJacksonDatabindNodeTextNode;", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "_value_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "valueOf", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "LJavaIoIOException;", "asText", "asBoolean", "Z", "asInt", "I", "asLong", "J", "asDouble", "D", "serialize", "LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "equals", "LNSObject;", "hashCode", "toString", "appendQuoted", "LJavaLangStringBuilder;LNSString;", &ComFasterxmlJacksonDatabindNodeTextNode_EMPTY_STRING_NODE };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindNodeTextNode = { "TextNode", "com.fasterxml.jackson.databind.node", ptrTable, methods, fields, 7, 0x1, 18, 2, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindNodeTextNode;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindNodeTextNode class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindNodeTextNode_EMPTY_STRING_NODE, new_ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(@""));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindNodeTextNode)
  }
}

@end

void ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(ComFasterxmlJacksonDatabindNodeTextNode *self, NSString *v) {
  ComFasterxmlJacksonDatabindNodeValueNode_init(self);
  JreStrongAssign(&self->_value_, v);
}

ComFasterxmlJacksonDatabindNodeTextNode *new_ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(NSString *v) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindNodeTextNode, initWithNSString_, v)
}

ComFasterxmlJacksonDatabindNodeTextNode *create_ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(NSString *v) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindNodeTextNode, initWithNSString_, v)
}

ComFasterxmlJacksonDatabindNodeTextNode *ComFasterxmlJacksonDatabindNodeTextNode_valueOfWithNSString_(NSString *v) {
  ComFasterxmlJacksonDatabindNodeTextNode_initialize();
  if (v == nil) {
    return nil;
  }
  if ([v java_length] == 0) {
    return ComFasterxmlJacksonDatabindNodeTextNode_EMPTY_STRING_NODE;
  }
  return create_ComFasterxmlJacksonDatabindNodeTextNode_initWithNSString_(v);
}

void ComFasterxmlJacksonDatabindNodeTextNode_appendQuotedWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *content) {
  ComFasterxmlJacksonDatabindNodeTextNode_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'"'];
  ComFasterxmlJacksonCoreIoCharTypes_appendQuotedWithJavaLangStringBuilder_withNSString_(sb, content);
  [sb appendWithChar:'"'];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindNodeTextNode)
