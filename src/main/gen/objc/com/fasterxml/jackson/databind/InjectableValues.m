//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/BeanProperty.h"
#include "com/fasterxml/jackson/databind/DeserializationContext.h"
#include "com/fasterxml/jackson/databind/InjectableValues.h"
#include "com/fasterxml/jackson/databind/util/ClassUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

inline jlong ComFasterxmlJacksonDatabindInjectableValues_Std_get_serialVersionUID(void);
#define ComFasterxmlJacksonDatabindInjectableValues_Std_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonDatabindInjectableValues_Std, serialVersionUID, jlong)

@implementation ComFasterxmlJacksonDatabindInjectableValues

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindInjectableValues_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)findInjectableValueWithId:(id)valueId
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)forProperty
                         withId:(id)beanInstance {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findInjectableValueWithId:withComFasterxmlJacksonDatabindDeserializationContext:withComFasterxmlJacksonDatabindBeanProperty:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "findInjectableValue", "LNSObject;LComFasterxmlJacksonDatabindDeserializationContext;LComFasterxmlJacksonDatabindBeanProperty;LNSObject;", "LComFasterxmlJacksonDatabindJsonMappingException;", "LComFasterxmlJacksonDatabindInjectableValues_Std;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindInjectableValues = { "InjectableValues", "com.fasterxml.jackson.databind", ptrTable, methods, NULL, 7, 0x401, 2, 0, -1, 3, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindInjectableValues;
}

@end

void ComFasterxmlJacksonDatabindInjectableValues_init(ComFasterxmlJacksonDatabindInjectableValues *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindInjectableValues)

@implementation ComFasterxmlJacksonDatabindInjectableValues_Std

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindInjectableValues_Std_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)values {
  ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(self, values);
  return self;
}

- (ComFasterxmlJacksonDatabindInjectableValues_Std *)addValueWithNSString:(NSString *)key
                                                                   withId:(id)value {
  [((id<JavaUtilMap>) nil_chk(_values_)) putWithId:key withId:value];
  return self;
}

- (ComFasterxmlJacksonDatabindInjectableValues_Std *)addValueWithIOSClass:(IOSClass *)classKey
                                                                   withId:(id)value {
  [((id<JavaUtilMap>) nil_chk(_values_)) putWithId:[((IOSClass *) nil_chk(classKey)) getName] withId:value];
  return self;
}

- (id)findInjectableValueWithId:(id)valueId
withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
withComFasterxmlJacksonDatabindBeanProperty:(id<ComFasterxmlJacksonDatabindBeanProperty>)forProperty
                         withId:(id)beanInstance {
  if (!([valueId isKindOfClass:[NSString class]])) {
    [((ComFasterxmlJacksonDatabindDeserializationContext *) nil_chk(ctxt)) reportBadDefinitionWithIOSClass:ComFasterxmlJacksonDatabindUtilClassUtil_classOfWithId_(valueId) withNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Unrecognized inject value id type (%s), expecting String", [IOSObjectArray arrayWithObjects:(id[]){ ComFasterxmlJacksonDatabindUtilClassUtil_classNameOfWithId_(valueId) } count:1 type:NSObject_class_()])];
  }
  NSString *key = (NSString *) cast_chk(valueId, [NSString class]);
  id ob = [((id<JavaUtilMap>) nil_chk(_values_)) getWithId:key];
  if (ob == nil && ![_values_ containsKeyWithId:key]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$$", @"No injectable id with value '", key, @"' found (for property '", [((id<ComFasterxmlJacksonDatabindBeanProperty>) nil_chk(forProperty)) getName], @"')"));
  }
  return ob;
}

- (void)dealloc {
  RELEASE_(_values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindInjectableValues_Std;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindInjectableValues_Std;", 0x1, 2, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilMap:);
  methods[2].selector = @selector(addValueWithNSString:withId:);
  methods[3].selector = @selector(addValueWithIOSClass:withId:);
  methods[4].selector = @selector(findInjectableValueWithId:withComFasterxmlJacksonDatabindDeserializationContext:withComFasterxmlJacksonDatabindBeanProperty:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonDatabindInjectableValues_Std_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_values_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x14, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "addValue", "LNSString;LNSObject;", "LIOSClass;LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/Object;)Lcom/fasterxml/jackson/databind/InjectableValues$Std;", "findInjectableValue", "LNSObject;LComFasterxmlJacksonDatabindDeserializationContext;LComFasterxmlJacksonDatabindBeanProperty;LNSObject;", "LComFasterxmlJacksonDatabindJsonMappingException;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LComFasterxmlJacksonDatabindInjectableValues;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindInjectableValues_Std = { "Std", "com.fasterxml.jackson.databind", ptrTable, methods, fields, 7, 0x9, 5, 2, 10, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindInjectableValues_Std;
}

@end

void ComFasterxmlJacksonDatabindInjectableValues_Std_init(ComFasterxmlJacksonDatabindInjectableValues_Std *self) {
  ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(self, create_JavaUtilHashMap_init());
}

ComFasterxmlJacksonDatabindInjectableValues_Std *new_ComFasterxmlJacksonDatabindInjectableValues_Std_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindInjectableValues_Std, init)
}

ComFasterxmlJacksonDatabindInjectableValues_Std *create_ComFasterxmlJacksonDatabindInjectableValues_Std_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindInjectableValues_Std, init)
}

void ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(ComFasterxmlJacksonDatabindInjectableValues_Std *self, id<JavaUtilMap> values) {
  ComFasterxmlJacksonDatabindInjectableValues_init(self);
  JreStrongAssign(&self->_values_, values);
}

ComFasterxmlJacksonDatabindInjectableValues_Std *new_ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(id<JavaUtilMap> values) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindInjectableValues_Std, initWithJavaUtilMap_, values)
}

ComFasterxmlJacksonDatabindInjectableValues_Std *create_ComFasterxmlJacksonDatabindInjectableValues_Std_initWithJavaUtilMap_(id<JavaUtilMap> values) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindInjectableValues_Std, initWithJavaUtilMap_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindInjectableValues_Std)
