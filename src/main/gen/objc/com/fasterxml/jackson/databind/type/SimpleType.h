//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeSimpleType")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindTypeSimpleType
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeSimpleType 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeSimpleType 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindTypeSimpleType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindTypeSimpleType_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeSimpleType || defined(INCLUDE_ComFasterxmlJacksonDatabindTypeSimpleType))
#define ComFasterxmlJacksonDatabindTypeSimpleType_

#define RESTRICT_ComFasterxmlJacksonDatabindTypeTypeBase 1
#define INCLUDE_ComFasterxmlJacksonDatabindTypeTypeBase 1
#include "com/fasterxml/jackson/databind/type/TypeBase.h"

@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindTypeTypeBindings;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangStringBuilder;

/*!
 @brief Simple types are defined as anything other than one of recognized
  container types (arrays, Collections, Maps).For our needs we
  need not know anything further, since we have no way of dealing
  with generic types other than Collections and Maps.
 */
@interface ComFasterxmlJacksonDatabindTypeSimpleType : ComFasterxmlJacksonDatabindTypeTypeBase

#pragma mark Public

/*!
 @brief Method that should NOT to be used by application code:
  it does NOT properly handle inspection of super-types, so neither parent
  Classes nor implemented Interfaces are accessible with resulting type
  instance.Instead, please use <code>TypeFactory</code>'s <code>constructType</code>
  methods which handle introspection appropriately.
 <p>
  Note that prior to 2.7, method usage was not limited and would typically
  have worked acceptably: the problem comes from inability to resolve super-type
  information, for which <code>TypeFactory</code> is needed.
 */
+ (ComFasterxmlJacksonDatabindTypeSimpleType *)constructWithIOSClass:(IOSClass *)cls;

/*!
 @brief Method used by core Jackson classes: NOT to be used by application code:
  it does NOT properly handle inspection of super-types, so neither parent
  Classes nor implemented Interfaces are accessible with resulting type
  instance.
 <p>
  NOTE: public only because it is called by <code>ObjectMapper</code> which is
  not in same package
 */
+ (ComFasterxmlJacksonDatabindTypeSimpleType *)constructUnsafeWithIOSClass:(IOSClass *)raw;

- (jboolean)isEqual:(id)o;

- (JavaLangStringBuilder *)getErasedSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (JavaLangStringBuilder *)getGenericSignatureWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (jboolean)hasContentType;

- (jboolean)isContainerType;

- (ComFasterxmlJacksonDatabindJavaType *)refineWithIOSClass:(IOSClass *)rawType
            withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
                    withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
               withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInterfaces;

- (NSString *)description;

- (ComFasterxmlJacksonDatabindJavaType *)withContentTypeWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)contentType;

- (ComFasterxmlJacksonDatabindJavaType *)withContentTypeHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeSimpleType *)withContentValueHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeSimpleType *)withStaticTyping;

- (ComFasterxmlJacksonDatabindTypeSimpleType *)withTypeHandlerWithId:(id)h;

- (ComFasterxmlJacksonDatabindTypeSimpleType *)withValueHandlerWithId:(id)h;

#pragma mark Protected

/*!
 @brief Constructor only used by core Jackson databind functionality;
  should never be called by application code.
 <p>
  As with other direct construction that by-passes <code>TypeFactory</code>,
  no introspection occurs with respect to super-types; caller must be
  aware of consequences if using this method.
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInts;

/*!
 @brief Pass-through constructor used by <code>ReferenceType</code>.
 @since 2.6
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInts
                                   withInt:(jint)extraHash
                                    withId:(id)valueHandler
                                    withId:(id)typeHandler
                               withBoolean:(jboolean)asStatic;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls
withComFasterxmlJacksonDatabindTypeTypeBindings:(ComFasterxmlJacksonDatabindTypeTypeBindings *)bindings
   withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)superClass
withComFasterxmlJacksonDatabindJavaTypeArray:(IOSObjectArray *)superInts
                                    withId:(id)valueHandler
                                    withId:(id)typeHandler
                               withBoolean:(jboolean)asStatic;

/*!
 @brief Simple copy-constructor, usually used when upgrading/refining a simple type
  into more specialized type.
 @since 2.7
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindTypeTypeBase:(ComFasterxmlJacksonDatabindTypeTypeBase *)base;

- (ComFasterxmlJacksonDatabindJavaType *)_narrowWithIOSClass:(IOSClass *)subclass;

- (NSString *)buildCanonicalName;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindTypeSimpleType)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_(ComFasterxmlJacksonDatabindTypeSimpleType *self, IOSClass *cls);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *new_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_(IOSClass *cls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *create_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_(ComFasterxmlJacksonDatabindTypeSimpleType *self, IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *new_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *create_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeSimpleType_initWithComFasterxmlJacksonDatabindTypeTypeBase_(ComFasterxmlJacksonDatabindTypeSimpleType *self, ComFasterxmlJacksonDatabindTypeTypeBase *base);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *new_ComFasterxmlJacksonDatabindTypeSimpleType_initWithComFasterxmlJacksonDatabindTypeTypeBase_(ComFasterxmlJacksonDatabindTypeTypeBase *base) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *create_ComFasterxmlJacksonDatabindTypeSimpleType_initWithComFasterxmlJacksonDatabindTypeTypeBase_(ComFasterxmlJacksonDatabindTypeTypeBase *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withId_withId_withBoolean_(ComFasterxmlJacksonDatabindTypeSimpleType *self, IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *new_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withId_withId_withBoolean_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, id valueHandler, id typeHandler, jboolean asStatic) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *create_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withId_withId_withBoolean_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withInt_withId_withId_withBoolean_(ComFasterxmlJacksonDatabindTypeSimpleType *self, IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, jint extraHash, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *new_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withInt_withId_withId_withBoolean_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, jint extraHash, id valueHandler, id typeHandler, jboolean asStatic) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *create_ComFasterxmlJacksonDatabindTypeSimpleType_initWithIOSClass_withComFasterxmlJacksonDatabindTypeTypeBindings_withComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindJavaTypeArray_withInt_withId_withId_withBoolean_(IOSClass *cls, ComFasterxmlJacksonDatabindTypeTypeBindings *bindings, ComFasterxmlJacksonDatabindJavaType *superClass, IOSObjectArray *superInts, jint extraHash, id valueHandler, id typeHandler, jboolean asStatic);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeSimpleType_constructUnsafeWithIOSClass_(IOSClass *raw);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindTypeSimpleType *ComFasterxmlJacksonDatabindTypeSimpleType_constructWithIOSClass_(IOSClass *cls);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindTypeSimpleType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindTypeSimpleType")
