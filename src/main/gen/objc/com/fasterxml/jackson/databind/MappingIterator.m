//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/FormatSchema.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonStreamContext.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/databind/DeserializationContext.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/JsonDeserializer.h"
#include "com/fasterxml/jackson/databind/JsonMappingException.h"
#include "com/fasterxml/jackson/databind/MappingIterator.h"
#include "com/fasterxml/jackson/databind/RuntimeJsonMappingException.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindMappingIterator)

ComFasterxmlJacksonDatabindMappingIterator *ComFasterxmlJacksonDatabindMappingIterator_EMPTY_ITERATOR;

@implementation ComFasterxmlJacksonDatabindMappingIterator

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)type
                                withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                withComFasterxmlJacksonDatabindDeserializationContext:(ComFasterxmlJacksonDatabindDeserializationContext *)ctxt
                      withComFasterxmlJacksonDatabindJsonDeserializer:(ComFasterxmlJacksonDatabindJsonDeserializer *)deser
                                                          withBoolean:(jboolean)managedParser
                                                               withId:(id)valueToUpdate {
  ComFasterxmlJacksonDatabindMappingIterator_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_(self, type, p, ctxt, deser, managedParser, valueToUpdate);
  return self;
}

+ (ComFasterxmlJacksonDatabindMappingIterator *)emptyIterator {
  return ComFasterxmlJacksonDatabindMappingIterator_emptyIterator();
}

- (jboolean)hasNext {
  @try {
    return [self hasNextValue];
  }
  @catch (ComFasterxmlJacksonDatabindJsonMappingException *e) {
    return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([self _handleMappingExceptionWithComFasterxmlJacksonDatabindJsonMappingException:e], [JavaLangBoolean class]))) booleanValue];
  }
  @catch (JavaIoIOException *e) {
    return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([self _handleIOExceptionWithJavaIoIOException:e], [JavaLangBoolean class]))) booleanValue];
  }
}

- (id)next {
  @try {
    return [self nextValue];
  }
  @catch (ComFasterxmlJacksonDatabindJsonMappingException *e) {
    @throw create_ComFasterxmlJacksonDatabindRuntimeJsonMappingException_initWithNSString_withComFasterxmlJacksonDatabindJsonMappingException_([e getMessage], e);
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)close {
  if (_state_ != ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED) {
    _state_ = ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED;
    if (_parser_ != nil) {
      [_parser_ close];
    }
  }
}

- (jboolean)hasNextValue {
  {
    ComFasterxmlJacksonCoreJsonToken *t;
    switch (_state_) {
      case ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED:
      return false;
      case ComFasterxmlJacksonDatabindMappingIterator_STATE_NEED_RESYNC:
      [self _resync];
      case ComFasterxmlJacksonDatabindMappingIterator_STATE_MAY_HAVE_VALUE:
      t = [((ComFasterxmlJacksonCoreJsonParser *) nil_chk(_parser_)) getCurrentToken];
      if (t == nil) {
        t = [_parser_ nextToken];
        if (t == nil || t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY)) {
          _state_ = ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED;
          if (_closeParser_ && (_parser_ != nil)) {
            [_parser_ close];
          }
          return false;
        }
      }
      _state_ = ComFasterxmlJacksonDatabindMappingIterator_STATE_HAS_VALUE;
      return true;
      case ComFasterxmlJacksonDatabindMappingIterator_STATE_HAS_VALUE:
      ;
    }
  }
  return true;
}

- (id)nextValue {
  switch (_state_) {
    case ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED:
    return [self _throwNoSuchElement];
    case ComFasterxmlJacksonDatabindMappingIterator_STATE_NEED_RESYNC:
    case ComFasterxmlJacksonDatabindMappingIterator_STATE_MAY_HAVE_VALUE:
    if (![self hasNextValue]) {
      return [self _throwNoSuchElement];
    }
    break;
    case ComFasterxmlJacksonDatabindMappingIterator_STATE_HAS_VALUE:
    break;
  }
  jint nextState = ComFasterxmlJacksonDatabindMappingIterator_STATE_NEED_RESYNC;
  @try {
    id value;
    if (_updatedValue_ == nil) {
      value = [((ComFasterxmlJacksonDatabindJsonDeserializer *) nil_chk(_deserializer_)) deserializeWithComFasterxmlJacksonCoreJsonParser:_parser_ withComFasterxmlJacksonDatabindDeserializationContext:_context_];
    }
    else {
      [((ComFasterxmlJacksonDatabindJsonDeserializer *) nil_chk(_deserializer_)) deserializeWithComFasterxmlJacksonCoreJsonParser:_parser_ withComFasterxmlJacksonDatabindDeserializationContext:_context_ withId:_updatedValue_];
      value = _updatedValue_;
    }
    nextState = ComFasterxmlJacksonDatabindMappingIterator_STATE_MAY_HAVE_VALUE;
    return value;
  }
  @finally {
    _state_ = nextState;
    [((ComFasterxmlJacksonCoreJsonParser *) nil_chk(_parser_)) clearCurrentToken];
  }
}

- (id<JavaUtilList>)readAll {
  return [self readAllWithJavaUtilList:create_JavaUtilArrayList_init()];
}

- (id<JavaUtilList>)readAllWithJavaUtilList:(id<JavaUtilList>)resultList {
  while ([self hasNextValue]) {
    [((id<JavaUtilList>) nil_chk(resultList)) addWithId:[self nextValue]];
  }
  return resultList;
}

- (id<JavaUtilCollection>)readAllWithJavaUtilCollection:(id<JavaUtilCollection>)results {
  while ([self hasNextValue]) {
    [((id<JavaUtilCollection>) nil_chk(results)) addWithId:[self nextValue]];
  }
  return results;
}

- (ComFasterxmlJacksonCoreJsonParser *)getParser {
  return _parser_;
}

- (id<ComFasterxmlJacksonCoreFormatSchema>)getParserSchema {
  return [((ComFasterxmlJacksonCoreJsonParser *) nil_chk(_parser_)) getSchema];
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  return [((ComFasterxmlJacksonCoreJsonParser *) nil_chk(_parser_)) getCurrentLocation];
}

- (void)_resync {
  ComFasterxmlJacksonCoreJsonParser *p = _parser_;
  if ([((ComFasterxmlJacksonCoreJsonParser *) nil_chk(p)) getParsingContext] == _seqContext_) {
    return;
  }
  while (true) {
    ComFasterxmlJacksonCoreJsonToken *t = [p nextToken];
    if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT))) {
      if ([p getParsingContext] == _seqContext_) {
        [p clearCurrentToken];
        return;
      }
    }
    else if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT))) {
      [p skipChildren];
    }
    else if (t == nil) {
      return;
    }
  }
}

- (id)_throwNoSuchElement {
  @throw create_JavaUtilNoSuchElementException_init();
}

- (id)_handleMappingExceptionWithComFasterxmlJacksonDatabindJsonMappingException:(ComFasterxmlJacksonDatabindJsonMappingException *)e {
  @throw create_ComFasterxmlJacksonDatabindRuntimeJsonMappingException_initWithNSString_withComFasterxmlJacksonDatabindJsonMappingException_([((ComFasterxmlJacksonDatabindJsonMappingException *) nil_chk(e)) getMessage], e);
}

- (id)_handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_([((JavaIoIOException *) nil_chk(e)) getMessage], e);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(_type_);
  RELEASE_(_context_);
  RELEASE_(_deserializer_);
  RELEASE_(_parser_);
  RELEASE_(_seqContext_);
  RELEASE_(_updatedValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindMappingIterator;", 0xc, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 4, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 7, 4, 8, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 6, 9, 4, 10, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFormatSchema;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x4, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x4, 15, 4, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonCoreJsonParser:withComFasterxmlJacksonDatabindDeserializationContext:withComFasterxmlJacksonDatabindJsonDeserializer:withBoolean:withId:);
  methods[1].selector = @selector(emptyIterator);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(hasNextValue);
  methods[7].selector = @selector(nextValue);
  methods[8].selector = @selector(readAll);
  methods[9].selector = @selector(readAllWithJavaUtilList:);
  methods[10].selector = @selector(readAllWithJavaUtilCollection:);
  methods[11].selector = @selector(getParser);
  methods[12].selector = @selector(getParserSchema);
  methods[13].selector = @selector(getCurrentLocation);
  methods[14].selector = @selector(_resync);
  methods[15].selector = @selector(_throwNoSuchElement);
  methods[16].selector = @selector(_handleMappingExceptionWithComFasterxmlJacksonDatabindJsonMappingException:);
  methods[17].selector = @selector(_handleIOExceptionWithJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ITERATOR", "LComFasterxmlJacksonDatabindMappingIterator;", .constantValue.asLong = 0, 0x1c, -1, 17, 18, -1 },
    { "STATE_CLOSED", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED, 0x1c, -1, -1, -1, -1 },
    { "STATE_NEED_RESYNC", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindMappingIterator_STATE_NEED_RESYNC, 0x1c, -1, -1, -1, -1 },
    { "STATE_MAY_HAVE_VALUE", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindMappingIterator_STATE_MAY_HAVE_VALUE, 0x1c, -1, -1, -1, -1 },
    { "STATE_HAS_VALUE", "I", .constantValue.asInt = ComFasterxmlJacksonDatabindMappingIterator_STATE_HAS_VALUE, 0x1c, -1, -1, -1, -1 },
    { "_type_", "LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LComFasterxmlJacksonDatabindDeserializationContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_deserializer_", "LComFasterxmlJacksonDatabindJsonDeserializer;", .constantValue.asLong = 0, 0x14, -1, -1, 19, -1 },
    { "_parser_", "LComFasterxmlJacksonCoreJsonParser;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_seqContext_", "LComFasterxmlJacksonCoreJsonStreamContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_updatedValue_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, 20, -1 },
    { "_closeParser_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_state_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonCoreJsonParser;LComFasterxmlJacksonDatabindDeserializationContext;LComFasterxmlJacksonDatabindJsonDeserializer;ZLNSObject;", "(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/JsonDeserializer<*>;ZLjava/lang/Object;)V", "<T:Ljava/lang/Object;>()Lcom/fasterxml/jackson/databind/MappingIterator<TT;>;", "()TT;", "LJavaIoIOException;", "()Ljava/util/List<TT;>;", "readAll", "LJavaUtilList;", "<L::Ljava/util/List<-TT;>;>(TL;)TL;", "LJavaUtilCollection;", "<C::Ljava/util/Collection<-TT;>;>(TC;)TC;", "<R:Ljava/lang/Object;>()TR;", "_handleMappingException", "LComFasterxmlJacksonDatabindJsonMappingException;", "<R:Ljava/lang/Object;>(Lcom/fasterxml/jackson/databind/JsonMappingException;)TR;", "_handleIOException", "<R:Ljava/lang/Object;>(Ljava/io/IOException;)TR;", &ComFasterxmlJacksonDatabindMappingIterator_EMPTY_ITERATOR, "Lcom/fasterxml/jackson/databind/MappingIterator<*>;", "Lcom/fasterxml/jackson/databind/JsonDeserializer<TT;>;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;Ljava/io/Closeable;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindMappingIterator = { "MappingIterator", "com.fasterxml.jackson.databind", ptrTable, methods, fields, 7, 0x1, 18, 13, -1, -1, -1, 21, -1 };
  return &_ComFasterxmlJacksonDatabindMappingIterator;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindMappingIterator class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonDatabindMappingIterator_EMPTY_ITERATOR, new_ComFasterxmlJacksonDatabindMappingIterator_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_(nil, nil, nil, nil, false, nil));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindMappingIterator)
  }
}

@end

void ComFasterxmlJacksonDatabindMappingIterator_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_(ComFasterxmlJacksonDatabindMappingIterator *self, ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, ComFasterxmlJacksonDatabindJsonDeserializer *deser, jboolean managedParser, id valueToUpdate) {
  NSObject_init(self);
  JreStrongAssign(&self->_type_, type);
  JreStrongAssign(&self->_parser_, p);
  JreStrongAssign(&self->_context_, ctxt);
  JreStrongAssign(&self->_deserializer_, deser);
  self->_closeParser_ = managedParser;
  if (valueToUpdate == nil) {
    JreStrongAssign(&self->_updatedValue_, nil);
  }
  else {
    JreStrongAssign(&self->_updatedValue_, valueToUpdate);
  }
  if (p == nil) {
    JreStrongAssign(&self->_seqContext_, nil);
    self->_state_ = ComFasterxmlJacksonDatabindMappingIterator_STATE_CLOSED;
  }
  else {
    ComFasterxmlJacksonCoreJsonStreamContext *sctxt = [p getParsingContext];
    if (managedParser && [p isExpectedStartArrayToken]) {
      [p clearCurrentToken];
    }
    else {
      ComFasterxmlJacksonCoreJsonToken *t = [p getCurrentToken];
      if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY))) {
        sctxt = [((ComFasterxmlJacksonCoreJsonStreamContext *) nil_chk(sctxt)) getParent];
      }
    }
    JreStrongAssign(&self->_seqContext_, sctxt);
    self->_state_ = ComFasterxmlJacksonDatabindMappingIterator_STATE_MAY_HAVE_VALUE;
  }
}

ComFasterxmlJacksonDatabindMappingIterator *new_ComFasterxmlJacksonDatabindMappingIterator_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_(ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, ComFasterxmlJacksonDatabindJsonDeserializer *deser, jboolean managedParser, id valueToUpdate) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindMappingIterator, initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_, type, p, ctxt, deser, managedParser, valueToUpdate)
}

ComFasterxmlJacksonDatabindMappingIterator *create_ComFasterxmlJacksonDatabindMappingIterator_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_(ComFasterxmlJacksonDatabindJavaType *type, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonDatabindDeserializationContext *ctxt, ComFasterxmlJacksonDatabindJsonDeserializer *deser, jboolean managedParser, id valueToUpdate) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindMappingIterator, initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonDatabindDeserializationContext_withComFasterxmlJacksonDatabindJsonDeserializer_withBoolean_withId_, type, p, ctxt, deser, managedParser, valueToUpdate)
}

ComFasterxmlJacksonDatabindMappingIterator *ComFasterxmlJacksonDatabindMappingIterator_emptyIterator() {
  ComFasterxmlJacksonDatabindMappingIterator_initialize();
  return ComFasterxmlJacksonDatabindMappingIterator_EMPTY_ITERATOR;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindMappingIterator)
