//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/databind/SerializerProvider.h"
#include "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.h"
#include "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.h"
#include "com/fasterxml/jackson/databind/util/TokenBuffer.h"
#include "java/util/UUID.h"

@interface ComFasterxmlJacksonDatabindSerStdUUIDSerializer ()

+ (void)_appendIntWithInt:(jint)bits
            withCharArray:(IOSCharArray *)ch
                  withInt:(jint)offset;

+ (void)_appendShortWithInt:(jint)bits
              withCharArray:(IOSCharArray *)ch
                    withInt:(jint)offset;

+ (IOSByteArray *)_asBytesWithJavaUtilUUID:(JavaUtilUUID *)uuid;

+ (void)_appendIntWithInt:(jint)value
            withByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset;

@end

__attribute__((unused)) static void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withCharArray_withInt_(jint bits, IOSCharArray *ch, jint offset);

__attribute__((unused)) static void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(jint bits, IOSCharArray *ch, jint offset);

__attribute__((unused)) static IOSByteArray *ComFasterxmlJacksonDatabindSerStdUUIDSerializer__asBytesWithJavaUtilUUID_(JavaUtilUUID *uuid);

__attribute__((unused)) static void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_(jint value, IOSByteArray *buffer, jint offset);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonDatabindSerStdUUIDSerializer)

IOSCharArray *ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS;

@implementation ComFasterxmlJacksonDatabindSerStdUUIDSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)prov
                                                              withId:(JavaUtilUUID *)value {
  if ([((JavaUtilUUID *) nil_chk(value)) getLeastSignificantBits] == 0LL && [value getMostSignificantBits] == 0LL) {
    return true;
  }
  return false;
}

- (void)serializeWithId:(JavaUtilUUID *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider {
  if ([((ComFasterxmlJacksonCoreJsonGenerator *) nil_chk(gen)) canWriteBinaryNatively]) {
    if (!([gen isKindOfClass:[ComFasterxmlJacksonDatabindUtilTokenBuffer class]])) {
      [gen writeBinaryWithByteArray:ComFasterxmlJacksonDatabindSerStdUUIDSerializer__asBytesWithJavaUtilUUID_(value)];
      return;
    }
  }
  IOSCharArray *ch = [IOSCharArray arrayWithLength:36];
  jlong msb = [((JavaUtilUUID *) nil_chk(value)) getMostSignificantBits];
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withCharArray_withInt_((jint) (JreRShift64(msb, 32)), ch, 0);
  *IOSCharArray_GetRef(ch, 8) = '-';
  jint i = (jint) msb;
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(JreURShift32(i, 16), ch, 9);
  *IOSCharArray_GetRef(ch, 13) = '-';
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(i, ch, 14);
  *IOSCharArray_GetRef(ch, 18) = '-';
  jlong lsb = [value getLeastSignificantBits];
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_((jint) (JreURShift64(lsb, 48)), ch, 19);
  *IOSCharArray_GetRef(ch, 23) = '-';
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_((jint) (JreURShift64(lsb, 32)), ch, 24);
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withCharArray_withInt_((jint) lsb, ch, 28);
  [gen writeStringWithCharArray:ch withInt:0 withInt:36];
}

+ (void)_appendIntWithInt:(jint)bits
            withCharArray:(IOSCharArray *)ch
                  withInt:(jint)offset {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withCharArray_withInt_(bits, ch, offset);
}

+ (void)_appendShortWithInt:(jint)bits
              withCharArray:(IOSCharArray *)ch
                    withInt:(jint)offset {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(bits, ch, offset);
}

+ (IOSByteArray *)_asBytesWithJavaUtilUUID:(JavaUtilUUID *)uuid {
  return ComFasterxmlJacksonDatabindSerStdUUIDSerializer__asBytesWithJavaUtilUUID_(uuid);
}

+ (void)_appendIntWithInt:(jint)value
            withByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_(value, buffer, offset);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1a, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, 5, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isEmptyWithComFasterxmlJacksonDatabindSerializerProvider:withId:);
  methods[2].selector = @selector(serializeWithId:withComFasterxmlJacksonCoreJsonGenerator:withComFasterxmlJacksonDatabindSerializerProvider:);
  methods[3].selector = @selector(_appendIntWithInt:withCharArray:withInt:);
  methods[4].selector = @selector(_appendShortWithInt:withCharArray:withInt:);
  methods[5].selector = @selector(_asBytesWithJavaUtilUUID:);
  methods[6].selector = @selector(_appendIntWithInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_CHARS", "[C", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "isEmpty", "LComFasterxmlJacksonDatabindSerializerProvider;LJavaUtilUUID;", "serialize", "LJavaUtilUUID;LComFasterxmlJacksonCoreJsonGenerator;LComFasterxmlJacksonDatabindSerializerProvider;", "LJavaIoIOException;", "_appendInt", "I[CI", "_appendShort", "_asBytes", "LJavaUtilUUID;", "I[BI", &ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS, "Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/util/UUID;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindSerStdUUIDSerializer = { "UUIDSerializer", "com.fasterxml.jackson.databind.ser.std", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, 12, -1 };
  return &_ComFasterxmlJacksonDatabindSerStdUUIDSerializer;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonDatabindSerStdUUIDSerializer class]) {
    JreStrongAssign(&ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS, [@"0123456789abcdef" java_toCharArray]);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonDatabindSerStdUUIDSerializer)
  }
}

@end

void ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init(ComFasterxmlJacksonDatabindSerStdUUIDSerializer *self) {
  ComFasterxmlJacksonDatabindSerStdStdScalarSerializer_initWithIOSClass_(self, JavaUtilUUID_class_());
}

ComFasterxmlJacksonDatabindSerStdUUIDSerializer *new_ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindSerStdUUIDSerializer, init)
}

ComFasterxmlJacksonDatabindSerStdUUIDSerializer *create_ComFasterxmlJacksonDatabindSerStdUUIDSerializer_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindSerStdUUIDSerializer, init)
}

void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withCharArray_withInt_(jint bits, IOSCharArray *ch, jint offset) {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer_initialize();
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(JreRShift32(bits, 16), ch, offset);
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(bits, ch, offset + 4);
}

void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendShortWithInt_withCharArray_withInt_(jint bits, IOSCharArray *ch, jint offset) {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer_initialize();
  *IOSCharArray_GetRef(nil_chk(ch), offset) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS), (JreRShift32(bits, 12)) & (jint) 0xF);
  *IOSCharArray_GetRef(ch, ++offset) = IOSCharArray_Get(ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS, (JreRShift32(bits, 8)) & (jint) 0xF);
  *IOSCharArray_GetRef(ch, ++offset) = IOSCharArray_Get(ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS, (JreRShift32(bits, 4)) & (jint) 0xF);
  *IOSCharArray_GetRef(ch, ++offset) = IOSCharArray_Get(ComFasterxmlJacksonDatabindSerStdUUIDSerializer_HEX_CHARS, bits & (jint) 0xF);
}

IOSByteArray *ComFasterxmlJacksonDatabindSerStdUUIDSerializer__asBytesWithJavaUtilUUID_(JavaUtilUUID *uuid) {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer_initialize();
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:16];
  jlong hi = [((JavaUtilUUID *) nil_chk(uuid)) getMostSignificantBits];
  jlong lo = [uuid getLeastSignificantBits];
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_((jint) (JreRShift64(hi, 32)), buffer, 0);
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_((jint) hi, buffer, 4);
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_((jint) (JreRShift64(lo, 32)), buffer, 8);
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_((jint) lo, buffer, 12);
  return buffer;
}

void ComFasterxmlJacksonDatabindSerStdUUIDSerializer__appendIntWithInt_withByteArray_withInt_(jint value, IOSByteArray *buffer, jint offset) {
  ComFasterxmlJacksonDatabindSerStdUUIDSerializer_initialize();
  *IOSByteArray_GetRef(nil_chk(buffer), offset) = (jbyte) (JreRShift32(value, 24));
  *IOSByteArray_GetRef(buffer, ++offset) = (jbyte) (JreRShift32(value, 16));
  *IOSByteArray_GetRef(buffer, ++offset) = (jbyte) (JreRShift32(value, 8));
  *IOSByteArray_GetRef(buffer, ++offset) = (jbyte) value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindSerStdUUIDSerializer)
