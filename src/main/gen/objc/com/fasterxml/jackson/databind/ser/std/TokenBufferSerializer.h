//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer")
#ifdef RESTRICT_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer_) && (INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer || defined(INCLUDE_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer))
#define ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer_

#define RESTRICT_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#define INCLUDE_ComFasterxmlJacksonDatabindSerStdStdSerializer 1
#include "com/fasterxml/jackson/databind/ser/std/StdSerializer.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonDatabindJavaType;
@class ComFasterxmlJacksonDatabindJsonNode;
@class ComFasterxmlJacksonDatabindJsontypeTypeSerializer;
@class ComFasterxmlJacksonDatabindSerializerProvider;
@class ComFasterxmlJacksonDatabindUtilTokenBuffer;
@class IOSClass;
@protocol ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper;
@protocol JavaLangReflectType;

/*!
 @brief We also want to directly support serialization of <code>TokenBuffer</code>;
  and since it is part of core package, it cannot implement 
 <code>com.fasterxml.jackson.databind.JsonSerializable</code>
  (which is only included in the mapper package)
 */
@interface ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer : ComFasterxmlJacksonDatabindSerStdStdSerializer

#pragma mark Public

- (instancetype __nonnull)init;

- (void)acceptJsonFormatVisitorWithComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper:(id<ComFasterxmlJacksonDatabindJsonFormatVisitorsJsonFormatVisitorWrapper>)visitor
                                                                 withComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)typeHint;

- (ComFasterxmlJacksonDatabindJsonNode *)getSchemaWithComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
                                                                            withJavaLangReflectType:(id<JavaLangReflectType>)typeHint;

- (void)serializeWithId:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)jgen
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider;

/*!
 @brief Implementing typed output for contents of a TokenBuffer is very tricky,
  since we do not know for sure what its contents might look like (or, rather,
  we do know when serializing, but not necessarily when deserializing!)
 One possibility would be to check the current token, and use that to
  determine if we would output JSON Array, Object or scalar value.
 <p>
  Note that we just claim it is scalar; this should work ok and is simpler
  than doing introspection on both serialization and deserialization.
 */
- (void)serializeWithTypeWithId:(ComFasterxmlJacksonDatabindUtilTokenBuffer *)value
withComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
withComFasterxmlJacksonDatabindSerializerProvider:(ComFasterxmlJacksonDatabindSerializerProvider *)provider
withComFasterxmlJacksonDatabindJsontypeTypeSerializer:(ComFasterxmlJacksonDatabindJsontypeTypeSerializer *)typeSer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindSerStdStdSerializer:(ComFasterxmlJacksonDatabindSerStdStdSerializer *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer)

FOUNDATION_EXPORT void ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer_init(ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer *new_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer *create_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonDatabindSerStdTokenBufferSerializer")
