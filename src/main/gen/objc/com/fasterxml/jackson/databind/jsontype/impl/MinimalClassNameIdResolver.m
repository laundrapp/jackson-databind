//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/annotation/JsonTypeInfo.h"
#include "com/fasterxml/jackson/databind/DatabindContext.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.h"
#include "com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "java/lang/StringBuilder.h"

@implementation ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver

- (instancetype __nonnull)initWithComFasterxmlJacksonDatabindJavaType:(ComFasterxmlJacksonDatabindJavaType *)baseType
                       withComFasterxmlJacksonDatabindTypeTypeFactory:(ComFasterxmlJacksonDatabindTypeTypeFactory *)typeFactory {
  ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(self, baseType, typeFactory);
  return self;
}

- (ComFasterxmlJacksonAnnotationJsonTypeInfo_Id *)getMechanism {
  return JreLoadEnum(ComFasterxmlJacksonAnnotationJsonTypeInfo_Id, MINIMAL_CLASS);
}

- (NSString *)idFromValueWithId:(id)value {
  NSString *n = [[nil_chk(value) java_getClass] getName];
  if ([((NSString *) nil_chk(n)) java_hasPrefix:_basePackagePrefix_]) {
    return [n java_substring:[((NSString *) nil_chk(_basePackagePrefix_)) java_length] - 1];
  }
  return n;
}

- (ComFasterxmlJacksonDatabindJavaType *)_typeFromIdWithNSString:(NSString *)id_
                  withComFasterxmlJacksonDatabindDatabindContext:(ComFasterxmlJacksonDatabindDatabindContext *)ctxt {
  if ([((NSString *) nil_chk(id_)) java_hasPrefix:@"."]) {
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_([id_ java_length] + [((NSString *) nil_chk(_basePackageName_)) java_length]);
    if ([_basePackageName_ java_length] == 0) {
      [sb appendWithNSString:[id_ java_substring:1]];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:_basePackageName_])) appendWithNSString:id_];
    }
    id_ = [sb description];
  }
  return [super _typeFromIdWithNSString:id_ withComFasterxmlJacksonDatabindDatabindContext:ctxt];
}

- (void)dealloc {
  RELEASE_(_basePackageName_);
  RELEASE_(_basePackagePrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonAnnotationJsonTypeInfo_Id;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x4, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonDatabindJavaType:withComFasterxmlJacksonDatabindTypeTypeFactory:);
  methods[1].selector = @selector(getMechanism);
  methods[2].selector = @selector(idFromValueWithId:);
  methods[3].selector = @selector(_typeFromIdWithNSString:withComFasterxmlJacksonDatabindDatabindContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_basePackageName_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_basePackagePrefix_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonDatabindJavaType;LComFasterxmlJacksonDatabindTypeTypeFactory;", "idFromValue", "LNSObject;", "_typeFromId", "LNSString;LComFasterxmlJacksonDatabindDatabindContext;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver = { "MinimalClassNameIdResolver", "com.fasterxml.jackson.databind.jsontype.impl", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver;
}

@end

void ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver *self, ComFasterxmlJacksonDatabindJavaType *baseType, ComFasterxmlJacksonDatabindTypeTypeFactory *typeFactory) {
  ComFasterxmlJacksonDatabindJsontypeImplClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(self, baseType, typeFactory);
  NSString *base = [((IOSClass *) nil_chk([((ComFasterxmlJacksonDatabindJavaType *) nil_chk(baseType)) getRawClass])) getName];
  jint ix = [((NSString *) nil_chk(base)) java_lastIndexOf:'.'];
  if (ix < 0) {
    JreStrongAssign(&self->_basePackageName_, @"");
    JreStrongAssign(&self->_basePackagePrefix_, @".");
  }
  else {
    JreStrongAssign(&self->_basePackagePrefix_, [base java_substring:0 endIndex:ix + 1]);
    JreStrongAssign(&self->_basePackageName_, [base java_substring:0 endIndex:ix]);
  }
}

ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver *new_ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindJavaType *baseType, ComFasterxmlJacksonDatabindTypeTypeFactory *typeFactory) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver, initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_, baseType, typeFactory)
}

ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver *create_ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver_initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_(ComFasterxmlJacksonDatabindJavaType *baseType, ComFasterxmlJacksonDatabindTypeTypeFactory *typeFactory) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver, initWithComFasterxmlJacksonDatabindJavaType_withComFasterxmlJacksonDatabindTypeTypeFactory_, baseType, typeFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonDatabindJsontypeImplMinimalClassNameIdResolver)
